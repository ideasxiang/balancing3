
balancing_std.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08017388  08017388  00027388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080179d8  080179d8  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  080179d8  080179d8  000279d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080179e0  080179e0  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080179e0  080179e0  000279e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080179e4  080179e4  000279e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080179e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b7c  20000190  08017b78  00030190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007d0c  08017b78  00037d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030506  00000000  00000000  00030203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000867e  00000000  00000000  00060709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d0  00000000  00000000  00068d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bf8  00000000  00000000  0006b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000314e0  00000000  00000000  0006ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a511  00000000  00000000  0009e330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef4d4  00000000  00000000  000d8841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009ba4  00000000  00000000  001c7d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001d18bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000190 	.word	0x20000190
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801736c 	.word	0x0801736c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000194 	.word	0x20000194
 80001ec:	0801736c 	.word	0x0801736c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <append_buffer>:

/*
 * Adds a byte to the end of the buffer
 * Add one byte at a time!
 */
void append_buffer(buffer_t* buffer, uint8_t data){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
	buffer->last_time = HAL_GetTick();
 8000f00:	f006 fdce 	bl	8007aa0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	61da      	str	r2, [r3, #28]
	buffer->buffer[buffer->curr_byte] = data;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7e1b      	ldrb	r3, [r3, #24]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	78fa      	ldrb	r2, [r7, #3]
 8000f14:	545a      	strb	r2, [r3, r1]
	buffer->stored_bytes++;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7e5b      	ldrb	r3, [r3, #25]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	765a      	strb	r2, [r3, #25]
	buffer->curr_byte = (buffer->curr_byte >= BUFFER_SIZE-1) ? 0 : buffer->curr_byte + 1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7e1b      	ldrb	r3, [r3, #24]
 8000f26:	2b16      	cmp	r3, #22
 8000f28:	d804      	bhi.n	8000f34 <append_buffer+0x40>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7e1b      	ldrb	r3, [r3, #24]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	e000      	b.n	8000f36 <append_buffer+0x42>
 8000f34:	2200      	movs	r2, #0
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	761a      	strb	r2, [r3, #24]
	if (buffer->stored_bytes >= BUFFER_SIZE) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7e5b      	ldrb	r3, [r3, #25]
 8000f3e:	2b17      	cmp	r3, #23
 8000f40:	d902      	bls.n	8000f48 <append_buffer+0x54>
		buffer->stored_bytes = BUFFER_SIZE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2218      	movs	r2, #24
 8000f46:	765a      	strb	r2, [r3, #25]
	}
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <buffer_init>:

void buffer_init(buffer_t *buffer)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	buffer->curr_byte = 0;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	761a      	strb	r2, [r3, #24]
	buffer->last_proc = 0;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2020 	strb.w	r2, [r3, #32]
	buffer->stored_bytes = 0;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	765a      	strb	r2, [r3, #25]
	buffer->last_time = 0;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d104      	bne.n	8000f9a <buzzer+0x1a>
	{
		htim12.Instance->CCR1 = 0;
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <buzzer+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
		htim12.Instance->CCR1 = 500;
	}
}
 8000f98:	e00c      	b.n	8000fb4 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000fa0:	fb92 f2f3 	sdiv	r2, r2, r3
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <buzzer+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
		htim12.Instance->CCR1 = 500;
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <buzzer+0x40>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	20000c74 	.word	0x20000c74

08000fc4 <buzzer_init>:


void buzzer_init()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <buzzer_init+0x18>)
 8000fcc:	f00b f926 	bl	800c21c <HAL_TIM_PWM_Start>
	  htim12.Instance->CCR1 = 0;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <buzzer_init+0x18>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000c74 	.word	0x20000c74

08000fe0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f002 fc19 	bl	8003820 <can_ISR>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f002 fc0e 	bl	8003820 <can_ISR>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	2100      	movs	r1, #0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f007 f869 	bl	80080f6 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	2101      	movs	r1, #1
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f007 f858 	bl	80080f6 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2228      	movs	r2, #40	; 0x28
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f014 fa8d 	bl	8015584 <memset>
    can_filter_st.FilterActivation = ENABLE;
 800106a:	2301      	movs	r3, #1
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001072:	2301      	movs	r3, #1
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	0c1b      	lsrs	r3, r3, #16
 800107a:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	b29b      	uxth	r3, r3
 8001080:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	b29b      	uxth	r3, r3
 800108c:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <can_start+0xa4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d111      	bne.n	80010bc <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f006 fe26 	bl	8007cf8 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f006 ff03 	bl	8007eb8 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80010b2:	2102      	movs	r1, #2
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f007 f930 	bl	800831a <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 80010ba:	e017      	b.n	80010ec <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <can_start+0xa8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d112      	bne.n	80010ec <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 80010ca:	230e      	movs	r3, #14
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
		can_filter_st.FilterBank = 14;
 80010ce:	230e      	movs	r3, #14
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4619      	mov	r1, r3
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f006 fe0d 	bl	8007cf8 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f006 feea 	bl	8007eb8 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 80010e4:	2110      	movs	r1, #16
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f007 f917 	bl	800831a <HAL_CAN_ActivateNotification>
}
 80010ec:	bf00      	nop
 80010ee:	3738      	adds	r7, #56	; 0x38
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40006400 	.word	0x40006400
 80010f8:	40006800 	.word	0x40006800

080010fc <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start(uint8_t *pData)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = &DBUS_UART;
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <dbus_remote_start+0xd8>)
 8001106:	617b      	str	r3, [r7, #20]
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b20      	cmp	r3, #32
 8001112:	d15a      	bne.n	80011ca <dbus_remote_start+0xce>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <dbus_remote_start+0x22>
			return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e056      	b.n	80011cc <dbus_remote_start+0xd0>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <dbus_remote_start+0x30>
 8001128:	2302      	movs	r3, #2
 800112a:	e04f      	b.n	80011cc <dbus_remote_start+0xd0>
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2212      	movs	r2, #18
 800113e:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2200      	movs	r2, #0
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2222      	movs	r2, #34	; 0x22
 800114a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001152:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <dbus_remote_start+0xdc>)
 8001154:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	2200      	movs	r2, #0
 800115c:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	613b      	str	r3, [r7, #16]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3304      	adds	r3, #4
 800116c:	4619      	mov	r1, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	2312      	movs	r3, #18
 8001174:	f007 fcd4 	bl	8008b20 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011a4:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0201 	orr.w	r2, r2, #1
 80011b4:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695a      	ldr	r2, [r3, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c4:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <dbus_remote_start+0xd0>
	} else {
		return HAL_BUSY;
 80011ca:	2302      	movs	r3, #2
	}
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000d00 	.word	0x20000d00
 80011d8:	08004139 	.word	0x08004139

080011dc <laser_on>:
#include "board_lib.h"
#include "bsp_gpio.h"


void laser_on()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <laser_on+0x14>)
 80011e8:	f008 f99a 	bl	8009520 <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021800 	.word	0x40021800

080011f4 <laser_off>:

void laser_off()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fe:	4802      	ldr	r0, [pc, #8]	; (8001208 <laser_off+0x14>)
 8001200:	f008 f98e 	bl	8009520 <HAL_GPIO_WritePin>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021800 	.word	0x40021800

0800120c <inv_sqrt>:
  * @param  x: the number need to be calculated
  * @retval 1/Sqrt(x)
  * @usage  call in imu_ahrs_update() function
  */
float inv_sqrt(float x)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800121e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001222:	edc7 7a05 	vstr	s15, [r7, #20]
	float y     = x;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	613b      	str	r3, [r7, #16]
	long  i     = *(long*)&y;
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]

	i = 0x5f3759df - (i >> 1);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	105a      	asrs	r2, r3, #1
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <inv_sqrt+0x74>)
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001244:	ed97 7a04 	vldr	s14, [r7, #16]
 8001248:	edd7 7a05 	vldr	s15, [r7, #20]
 800124c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001250:	edd7 7a04 	vldr	s15, [r7, #16]
 8001254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001258:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800125c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001260:	edd7 7a04 	vldr	s15, [r7, #16]
 8001264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001268:	edc7 7a04 	vstr	s15, [r7, #16]

	return y;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	ee07 3a90 	vmov	s15, r3
}
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	5f3759df 	.word	0x5f3759df

08001284 <mpu_write_byte>:
  *                 mpu_set_gyro_fsr(),
  *                 mpu_set_accel_fsr(),
  *                 mpu_device_init() function
  */
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af02      	add	r7, sp, #8
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 8001294:	2200      	movs	r2, #0
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <mpu_write_byte+0x64>)
 800129a:	f008 f941 	bl	8009520 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
    tx = reg & 0x7F;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 100);
 80012a8:	f107 020e 	add.w	r2, r7, #14
 80012ac:	f107 010f 	add.w	r1, r7, #15
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <mpu_write_byte+0x68>)
 80012b8:	f00a fa06 	bl	800b6c8 <HAL_SPI_TransmitReceive>
    tx = data;
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 100);
 80012c0:	f107 020e 	add.w	r2, r7, #14
 80012c4:	f107 010f 	add.w	r1, r7, #15
 80012c8:	2364      	movs	r3, #100	; 0x64
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <mpu_write_byte+0x68>)
 80012d0:	f00a f9fa 	bl	800b6c8 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80012d4:	2201      	movs	r2, #1
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <mpu_write_byte+0x64>)
 80012da:	f008 f921 	bl	8009520 <HAL_GPIO_WritePin>
    return 0;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021400 	.word	0x40021400
 80012ec:	200009f4 	.word	0x200009f4

080012f0 <mpu_read_byte>:
  * @retval
  * @usage  call in ist_reg_read_by_mpu(),
  *                 mpu_device_init() function
  */
uint8_t mpu_read_byte(uint8_t const reg)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 80012fa:	2200      	movs	r2, #0
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	4813      	ldr	r0, [pc, #76]	; (800134c <mpu_read_byte+0x5c>)
 8001300:	f008 f90e 	bl	8009520 <HAL_GPIO_WritePin>
	uint8_t rx, tx;
    tx = reg | 0x80;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130a:	b2db      	uxtb	r3, r3
 800130c:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1,100);
 800130e:	f107 020f 	add.w	r2, r7, #15
 8001312:	f107 010e 	add.w	r1, r7, #14
 8001316:	2364      	movs	r3, #100	; 0x64
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <mpu_read_byte+0x60>)
 800131e:	f00a f9d3 	bl	800b6c8 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1 , 100);
 8001322:	f107 020f 	add.w	r2, r7, #15
 8001326:	f107 010e 	add.w	r1, r7, #14
 800132a:	2364      	movs	r3, #100	; 0x64
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2301      	movs	r3, #1
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <mpu_read_byte+0x60>)
 8001332:	f00a f9c9 	bl	800b6c8 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8001336:	2201      	movs	r2, #1
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <mpu_read_byte+0x5c>)
 800133c:	f008 f8f0 	bl	8009520 <HAL_GPIO_WritePin>
    return rx;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021400 	.word	0x40021400
 8001350:	200009f4 	.word	0x200009f4

08001354 <mpu_read_bytes>:
  * @usage  call in ist8310_get_data(),
  *                 mpu_get_data(),
  *                 mpu_offset_call() function
  */
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t* pData, uint8_t len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	4613      	mov	r3, r2
 8001362:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
    MPU_NSS_LOW;
 8001364:	2200      	movs	r2, #0
 8001366:	2140      	movs	r1, #64	; 0x40
 8001368:	4811      	ldr	r0, [pc, #68]	; (80013b0 <mpu_read_bytes+0x5c>)
 800136a:	f008 f8d9 	bl	8009520 <HAL_GPIO_WritePin>
    tx         = regAddr | 0x80;
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1,100);
 8001378:	f107 020e 	add.w	r2, r7, #14
 800137c:	f107 010f 	add.w	r1, r7, #15
 8001380:	2364      	movs	r3, #100	; 0x64
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <mpu_read_bytes+0x60>)
 8001388:	f00a f99e 	bl	800b6c8 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(&MPU_HSPI, pData, len,100);
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	b29a      	uxth	r2, r3
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	6839      	ldr	r1, [r7, #0]
 8001394:	4807      	ldr	r0, [pc, #28]	; (80013b4 <mpu_read_bytes+0x60>)
 8001396:	f00a f886 	bl	800b4a6 <HAL_SPI_Receive>
    MPU_NSS_HIGH;
 800139a:	2201      	movs	r2, #1
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	4804      	ldr	r0, [pc, #16]	; (80013b0 <mpu_read_bytes+0x5c>)
 80013a0:	f008 f8be 	bl	8009520 <HAL_GPIO_WritePin>
    return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021400 	.word	0x40021400
 80013b4:	200009f4 	.word	0x200009f4

080013b8 <ist_reg_write_by_mpu>:
  *         data: data to be written
  * @retval
  * @usage  call in ist8310_init() function
  */
static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
    /* turn off slave 1 at first */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 80013c8:	2100      	movs	r1, #0
 80013ca:	202a      	movs	r0, #42	; 0x2a
 80013cc:	f7ff ff5a 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80013d0:	2002      	movs	r0, #2
 80013d2:	f006 fb71 	bl	8007ab8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, addr);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4619      	mov	r1, r3
 80013da:	2029      	movs	r0, #41	; 0x29
 80013dc:	f7ff ff52 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80013e0:	2002      	movs	r0, #2
 80013e2:	f006 fb69 	bl	8007ab8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, data);
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2064      	movs	r0, #100	; 0x64
 80013ec:	f7ff ff4a 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80013f0:	2002      	movs	r0, #2
 80013f2:	f006 fb61 	bl	8007ab8 <HAL_Delay>
    /* turn on slave 1 with one byte transmitting */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 80013f6:	2181      	movs	r1, #129	; 0x81
 80013f8:	202a      	movs	r0, #42	; 0x2a
 80013fa:	f7ff ff43 	bl	8001284 <mpu_write_byte>
    /* wait longer to ensure the data is transmitted from slave 1 */
    MPU_DELAY(10);
 80013fe:	200a      	movs	r0, #10
 8001400:	f006 fb5a 	bl	8007ab8 <HAL_Delay>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <ist_reg_read_by_mpu>:
	* @param  addr: the address to be read of IST8310's register
	* @retval
  * @usage  call in ist8310_init() function
	*/
static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
    uint8_t retval;
    mpu_write_byte(MPU6500_I2C_SLV4_REG, addr);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4619      	mov	r1, r3
 800141a:	2032      	movs	r0, #50	; 0x32
 800141c:	f7ff ff32 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 8001420:	200a      	movs	r0, #10
 8001422:	f006 fb49 	bl	8007ab8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x80);
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	2034      	movs	r0, #52	; 0x34
 800142a:	f7ff ff2b 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 800142e:	200a      	movs	r0, #10
 8001430:	f006 fb42 	bl	8007ab8 <HAL_Delay>
    retval = mpu_read_byte(MPU6500_I2C_SLV4_DI);
 8001434:	2035      	movs	r0, #53	; 0x35
 8001436:	f7ff ff5b 	bl	80012f0 <mpu_read_byte>
 800143a:	4603      	mov	r3, r0
 800143c:	73fb      	strb	r3, [r7, #15]
    /* turn off slave4 after read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 800143e:	2100      	movs	r1, #0
 8001440:	2034      	movs	r0, #52	; 0x34
 8001442:	f7ff ff1f 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f006 fb36 	bl	8007ab8 <HAL_Delay>
    return retval;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <mpu_master_i2c_auto_read_config>:
* @param    device_address: slave device address, Address[6:0]
	* @retval   void
	* @note
	*/
static void mpu_master_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	460b      	mov	r3, r1
 8001462:	71bb      	strb	r3, [r7, #6]
 8001464:	4613      	mov	r3, r2
 8001466:	717b      	strb	r3, [r7, #5]
    /*
	   * configure the device address of the IST8310
     * use slave1, auto transmit single measure mode
	   */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, device_address);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4619      	mov	r1, r3
 800146c:	2028      	movs	r0, #40	; 0x28
 800146e:	f7ff ff09 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 8001472:	2002      	movs	r0, #2
 8001474:	f006 fb20 	bl	8007ab8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 8001478:	210a      	movs	r1, #10
 800147a:	2029      	movs	r0, #41	; 0x29
 800147c:	f7ff ff02 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 8001480:	2002      	movs	r0, #2
 8001482:	f006 fb19 	bl	8007ab8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 8001486:	2101      	movs	r1, #1
 8001488:	2064      	movs	r0, #100	; 0x64
 800148a:	f7ff fefb 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 800148e:	2002      	movs	r0, #2
 8001490:	f006 fb12 	bl	8007ab8 <HAL_Delay>

    /* use slave0,auto read data */
    mpu_write_byte(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4619      	mov	r1, r3
 800149e:	2025      	movs	r0, #37	; 0x25
 80014a0:	f7ff fef0 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f006 fb07 	bl	8007ab8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV0_REG, reg_base_addr);
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	4619      	mov	r1, r3
 80014ae:	2026      	movs	r0, #38	; 0x26
 80014b0:	f7ff fee8 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014b4:	2002      	movs	r0, #2
 80014b6:	f006 faff 	bl	8007ab8 <HAL_Delay>

    /* every eight mpu6500 internal samples one i2c master read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x03);
 80014ba:	2103      	movs	r1, #3
 80014bc:	2034      	movs	r0, #52	; 0x34
 80014be:	f7ff fee1 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f006 faf8 	bl	8007ab8 <HAL_Delay>
    /* enable slave 0 and 1 access delay */
    mpu_write_byte(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 80014c8:	2103      	movs	r1, #3
 80014ca:	2067      	movs	r0, #103	; 0x67
 80014cc:	f7ff feda 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f006 faf1 	bl	8007ab8 <HAL_Delay>
    /* enable slave 1 auto transmit */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 80014d6:	2181      	movs	r1, #129	; 0x81
 80014d8:	202a      	movs	r0, #42	; 0x2a
 80014da:	f7ff fed3 	bl	8001284 <mpu_write_byte>
		/* Wait 6ms (minimum waiting time for 16 times internal average setup) */
    MPU_DELAY(6);
 80014de:	2006      	movs	r0, #6
 80014e0:	f006 faea 	bl	8007ab8 <HAL_Delay>
    /* enable slave 0 with data_num bytes reading */
    mpu_write_byte(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 80014e4:	797b      	ldrb	r3, [r7, #5]
 80014e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4619      	mov	r1, r3
 80014ee:	2027      	movs	r0, #39	; 0x27
 80014f0:	f7ff fec8 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014f4:	2002      	movs	r0, #2
 80014f6:	f006 fadf 	bl	8007ab8 <HAL_Delay>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <ist8310_init>:
	* @param
	* @retval
  * @usage  call in mpu_device_init() function
	*/
uint8_t ist8310_init()
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
	  /* enable iic master mode */
    mpu_write_byte(MPU6500_USER_CTRL, 0x30);
 8001506:	2130      	movs	r1, #48	; 0x30
 8001508:	206a      	movs	r0, #106	; 0x6a
 800150a:	f7ff febb 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 800150e:	200a      	movs	r0, #10
 8001510:	f006 fad2 	bl	8007ab8 <HAL_Delay>
	  /* enable iic 400khz */
    mpu_write_byte(MPU6500_I2C_MST_CTRL, 0x0d);
 8001514:	210d      	movs	r1, #13
 8001516:	2024      	movs	r0, #36	; 0x24
 8001518:	f7ff feb4 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 800151c:	200a      	movs	r0, #10
 800151e:	f006 facb 	bl	8007ab8 <HAL_Delay>

    /* turn on slave 1 for ist write and slave 4 to ist read */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS);
 8001522:	210e      	movs	r1, #14
 8001524:	2028      	movs	r0, #40	; 0x28
 8001526:	f7ff fead 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 800152a:	200a      	movs	r0, #10
 800152c:	f006 fac4 	bl	8007ab8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS);
 8001530:	218e      	movs	r1, #142	; 0x8e
 8001532:	2031      	movs	r0, #49	; 0x31
 8001534:	f7ff fea6 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f006 fabd 	bl	8007ab8 <HAL_Delay>

    /* IST8310_R_CONFB 0x01 = device rst */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800153e:	2101      	movs	r1, #1
 8001540:	200b      	movs	r0, #11
 8001542:	f7ff ff39 	bl	80013b8 <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 8001546:	200a      	movs	r0, #10
 8001548:	f006 fab6 	bl	8007ab8 <HAL_Delay>
    if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff ff5d 	bl	800140c <ist_reg_read_by_mpu>
 8001552:	4603      	mov	r3, r0
 8001554:	2b10      	cmp	r3, #16
 8001556:	d001      	beq.n	800155c <ist8310_init+0x5a>
        return 1;
 8001558:	2301      	movs	r3, #1
 800155a:	e059      	b.n	8001610 <ist8310_init+0x10e>

		/* soft reset */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800155c:	2101      	movs	r1, #1
 800155e:	200b      	movs	r0, #11
 8001560:	f7ff ff2a 	bl	80013b8 <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 8001564:	200a      	movs	r0, #10
 8001566:	f006 faa7 	bl	8007ab8 <HAL_Delay>

		/* config as ready mode to access register */
    ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 800156a:	2100      	movs	r1, #0
 800156c:	200a      	movs	r0, #10
 800156e:	f7ff ff23 	bl	80013b8 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 8001572:	200a      	movs	r0, #10
 8001574:	f7ff ff4a 	bl	800140c <ist_reg_read_by_mpu>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <ist8310_init+0x80>
        return 2;
 800157e:	2302      	movs	r3, #2
 8001580:	e046      	b.n	8001610 <ist8310_init+0x10e>
    MPU_DELAY(10);
 8001582:	200a      	movs	r0, #10
 8001584:	f006 fa98 	bl	8007ab8 <HAL_Delay>

		//interrupts enabled
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x0C);		//1100
 8001588:	210c      	movs	r1, #12
 800158a:	200b      	movs	r0, #11
 800158c:	f7ff ff14 	bl	80013b8 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x0C)	//enables both DRDY and active HIGH interrupt
 8001590:	200b      	movs	r0, #11
 8001592:	f7ff ff3b 	bl	800140c <ist_reg_read_by_mpu>
 8001596:	4603      	mov	r3, r0
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d001      	beq.n	80015a0 <ist8310_init+0x9e>
        return 3;
 800159c:	2303      	movs	r3, #3
 800159e:	e037      	b.n	8001610 <ist8310_init+0x10e>
    MPU_DELAY(10);
 80015a0:	200a      	movs	r0, #10
 80015a2:	f006 fa89 	bl	8007ab8 <HAL_Delay>

    /* config low noise mode, x,y,z axis 16 time 1 avg */
    ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 80015a6:	2124      	movs	r1, #36	; 0x24
 80015a8:	2041      	movs	r0, #65	; 0x41
 80015aa:	f7ff ff05 	bl	80013b8 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 80015ae:	2041      	movs	r0, #65	; 0x41
 80015b0:	f7ff ff2c 	bl	800140c <ist_reg_read_by_mpu>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b24      	cmp	r3, #36	; 0x24
 80015b8:	d001      	beq.n	80015be <ist8310_init+0xbc>
        return 4;
 80015ba:	2304      	movs	r3, #4
 80015bc:	e028      	b.n	8001610 <ist8310_init+0x10e>
    MPU_DELAY(10);
 80015be:	200a      	movs	r0, #10
 80015c0:	f006 fa7a 	bl	8007ab8 <HAL_Delay>

    /* Set/Reset pulse duration setup,normal mode */
    ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 80015c4:	21c0      	movs	r1, #192	; 0xc0
 80015c6:	2042      	movs	r0, #66	; 0x42
 80015c8:	f7ff fef6 	bl	80013b8 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 80015cc:	2042      	movs	r0, #66	; 0x42
 80015ce:	f7ff ff1d 	bl	800140c <ist_reg_read_by_mpu>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2bc0      	cmp	r3, #192	; 0xc0
 80015d6:	d001      	beq.n	80015dc <ist8310_init+0xda>
        return 5;
 80015d8:	2305      	movs	r3, #5
 80015da:	e019      	b.n	8001610 <ist8310_init+0x10e>
    MPU_DELAY(10);
 80015dc:	200a      	movs	r0, #10
 80015de:	f006 fa6b 	bl	8007ab8 <HAL_Delay>

    /* turn off slave1 & slave 4 */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 80015e2:	2100      	movs	r1, #0
 80015e4:	202a      	movs	r0, #42	; 0x2a
 80015e6:	f7ff fe4d 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f006 fa64 	bl	8007ab8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 80015f0:	2100      	movs	r1, #0
 80015f2:	2034      	movs	r0, #52	; 0x34
 80015f4:	f7ff fe46 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 80015f8:	200a      	movs	r0, #10
 80015fa:	f006 fa5d 	bl	8007ab8 <HAL_Delay>



    /* configure and turn on slave 0 */
    mpu_master_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 80015fe:	2206      	movs	r2, #6
 8001600:	2103      	movs	r1, #3
 8001602:	200e      	movs	r0, #14
 8001604:	f7ff ff27 	bl	8001456 <mpu_master_i2c_auto_read_config>
    MPU_DELAY(100);
 8001608:	2064      	movs	r0, #100	; 0x64
 800160a:	f006 fa55 	bl	8007ab8 <HAL_Delay>
    return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}

08001614 <mpu_get_data>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void mpu_get_data()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8001618:	220e      	movs	r2, #14
 800161a:	4903      	ldr	r1, [pc, #12]	; (8001628 <mpu_get_data+0x14>)
 800161c:	203b      	movs	r0, #59	; 0x3b
 800161e:	f7ff fe99 	bl	8001354 <mpu_read_bytes>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200001fc 	.word	0x200001fc

0800162c <mpu_set_gyro_fsr>:
  * @param  fsr: range(0,±250dps;1,±500dps;2,±1000dps;3,±2000dps)
  * @retval
  * @usage  call in mpu_device_init() function
  */
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	201b      	movs	r0, #27
 8001640:	f7ff fe20 	bl	8001284 <mpu_write_byte>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <mpu_set_accel_fsr>:
  * @param  fsr: range(0,±2g;1,±4g;2,±8g;3,±16g)
  * @retval
  * @usage  call in mpu_device_init() function
  */
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	201c      	movs	r0, #28
 8001662:	f7ff fe0f 	bl	8001284 <mpu_write_byte>
 8001666:	4603      	mov	r3, r0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <reset_imu_data>:


void reset_imu_data()
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <imu_config>:
  * @param
  * @retval
  * @usage  call in main() function
	*/
uint8_t imu_config(void)
{
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
	MPU_DELAY(100);
 8001686:	2064      	movs	r0, #100	; 0x64
 8001688:	f006 fa16 	bl	8007ab8 <HAL_Delay>

	id                               = mpu_read_byte(MPU6500_WHO_AM_I);
 800168c:	2075      	movs	r0, #117	; 0x75
 800168e:	f7ff fe2f 	bl	80012f0 <mpu_read_byte>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <imu_config+0xc4>)
 8001698:	701a      	strb	r2, [r3, #0]
	uint8_t i                        = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
	uint8_t MPU6500_Init_Data[9][2] = {{ MPU6500_PWR_MGMT_1, 		0x03 },		// Clock Source - auto select???
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <imu_config+0xc8>)
 80016a0:	1d3c      	adds	r4, r7, #4
 80016a2:	461d      	mov	r5, r3
 80016a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	8023      	strh	r3, [r4, #0]
										{ MPU6500_ACCEL_CONFIG_2, 	0x01 },		// Accl LPF 2 @ 460Hz */
										{ MPU6500_USER_CTRL, 		0x20 },		// Enable AUX */
										{ MPU6500_INT_PIN_CFG,		0x00 },		// Reset interrupt settings
										{ MPU6500_INT_ENABLE,		0x01 },		// Enable interrupts on data ready
										};
	mpu_write_byte(MPU6500_PWR_MGMT_1, 0x80);			//Reset device
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	206b      	movs	r0, #107	; 0x6b
 80016b0:	f7ff fde8 	bl	8001284 <mpu_write_byte>
	HAL_Delay(200);
 80016b4:	20c8      	movs	r0, #200	; 0xc8
 80016b6:	f006 f9ff 	bl	8007ab8 <HAL_Delay>
	mpu_write_byte(MPU6500_PWR_MGMT_1, 0x80);			//Reset device
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	206b      	movs	r0, #107	; 0x6b
 80016be:	f7ff fde1 	bl	8001284 <mpu_write_byte>
	HAL_Delay(200);
 80016c2:	20c8      	movs	r0, #200	; 0xc8
 80016c4:	f006 f9f8 	bl	8007ab8 <HAL_Delay>
	mpu_write_byte(MPU6500_PWR_MGMT_1, 0x80);			//Reset device
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	206b      	movs	r0, #107	; 0x6b
 80016cc:	f7ff fdda 	bl	8001284 <mpu_write_byte>
	HAL_Delay(200);
 80016d0:	20c8      	movs	r0, #200	; 0xc8
 80016d2:	f006 f9f1 	bl	8007ab8 <HAL_Delay>
	mpu_write_byte(MPU6500_SIGNAL_PATH_RESET, 0x07);	//Signal path reset
 80016d6:	2107      	movs	r1, #7
 80016d8:	2068      	movs	r0, #104	; 0x68
 80016da:	f7ff fdd3 	bl	8001284 <mpu_write_byte>
	HAL_Delay(200);
 80016de:	20c8      	movs	r0, #200	; 0xc8
 80016e0:	f006 f9ea 	bl	8007ab8 <HAL_Delay>
	//write configuration registers
	for (i = 0; i < 9; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	75fb      	strb	r3, [r7, #23]
 80016e8:	e015      	b.n	8001716 <imu_config+0x96>
	{
		mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	3318      	adds	r3, #24
 80016f0:	443b      	add	r3, r7
 80016f2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	3318      	adds	r3, #24
 80016fc:	443b      	add	r3, r7
 80016fe:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff fdbd 	bl	8001284 <mpu_write_byte>
		MPU_DELAY(2);
 800170a:	2002      	movs	r0, #2
 800170c:	f006 f9d4 	bl	8007ab8 <HAL_Delay>
	for (i = 0; i < 9; i++)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	3301      	adds	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	2b08      	cmp	r3, #8
 800171a:	d9e6      	bls.n	80016ea <imu_config+0x6a>
	}

	mpu_set_gyro_fsr(3);
 800171c:	2003      	movs	r0, #3
 800171e:	f7ff ff85 	bl	800162c <mpu_set_gyro_fsr>
	mpu_set_accel_fsr(2);
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff ff93 	bl	800164e <mpu_set_accel_fsr>

	ist8310_init();
 8001728:	f7ff feeb 	bl	8001502 <ist8310_init>
	mpu_offset_call();
 800172c:	f000 f810 	bl	8001750 <mpu_offset_call>
	reset_imu_data();
 8001730:	f7ff ff9e 	bl	8001670 <reset_imu_data>
	imu_init_status = 1;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <imu_config+0xcc>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
	return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bdb0      	pop	{r4, r5, r7, pc}
 8001744:	20000212 	.word	0x20000212
 8001748:	08017388 	.word	0x08017388
 800174c:	200001f8 	.word	0x200001f8

08001750 <mpu_offset_call>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void mpu_offset_call(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
	int i;
	for (i=0; i<300;i++)
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	e043      	b.n	80017e4 <mpu_offset_call+0x94>
	{
		mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800175c:	220e      	movs	r2, #14
 800175e:	4937      	ldr	r1, [pc, #220]	; (800183c <mpu_offset_call+0xec>)
 8001760:	203b      	movs	r0, #59	; 0x3b
 8001762:	f7ff fdf7 	bl	8001354 <mpu_read_bytes>
		imu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <mpu_offset_call+0xf0>)
 8001768:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <mpu_offset_call+0xec>)
 8001770:	7a1b      	ldrb	r3, [r3, #8]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b219      	sxth	r1, r3
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <mpu_offset_call+0xec>)
 8001778:	7a5b      	ldrb	r3, [r3, #9]
 800177a:	b21b      	sxth	r3, r3
 800177c:	430b      	orrs	r3, r1
 800177e:	b21b      	sxth	r3, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	4413      	add	r3, r2
 8001784:	b29b      	uxth	r3, r3
 8001786:	b21a      	sxth	r2, r3
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <mpu_offset_call+0xf0>)
 800178a:	865a      	strh	r2, [r3, #50]	; 0x32
		imu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800178c:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <mpu_offset_call+0xf0>)
 800178e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <mpu_offset_call+0xec>)
 8001796:	7a9b      	ldrb	r3, [r3, #10]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b219      	sxth	r1, r3
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <mpu_offset_call+0xec>)
 800179e:	7adb      	ldrb	r3, [r3, #11]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	430b      	orrs	r3, r1
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <mpu_offset_call+0xf0>)
 80017b0:	869a      	strh	r2, [r3, #52]	; 0x34
		imu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <mpu_offset_call+0xf0>)
 80017b4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <mpu_offset_call+0xec>)
 80017bc:	7b1b      	ldrb	r3, [r3, #12]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b219      	sxth	r1, r3
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <mpu_offset_call+0xec>)
 80017c4:	7b5b      	ldrb	r3, [r3, #13]
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	430b      	orrs	r3, r1
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <mpu_offset_call+0xf0>)
 80017d6:	86da      	strh	r2, [r3, #54]	; 0x36

		MPU_DELAY(2);
 80017d8:	2002      	movs	r0, #2
 80017da:	f006 f96d 	bl	8007ab8 <HAL_Delay>
	for (i=0; i<300;i++)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017ea:	dbb7      	blt.n	800175c <mpu_offset_call+0xc>
	}
	imu_data.gx_offset= imu_data.gx_offset / 300;
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <mpu_offset_call+0xf0>)
 80017ee:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <mpu_offset_call+0xf4>)
 80017f4:	fb82 1203 	smull	r1, r2, r2, r3
 80017f8:	1152      	asrs	r2, r2, #5
 80017fa:	17db      	asrs	r3, r3, #31
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	b21a      	sxth	r2, r3
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <mpu_offset_call+0xf0>)
 8001802:	865a      	strh	r2, [r3, #50]	; 0x32
	imu_data.gy_offset= imu_data.gy_offset / 300;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <mpu_offset_call+0xf0>)
 8001806:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <mpu_offset_call+0xf4>)
 800180c:	fb82 1203 	smull	r1, r2, r2, r3
 8001810:	1152      	asrs	r2, r2, #5
 8001812:	17db      	asrs	r3, r3, #31
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b21a      	sxth	r2, r3
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <mpu_offset_call+0xf0>)
 800181a:	869a      	strh	r2, [r3, #52]	; 0x34
	imu_data.gz_offset= imu_data.gz_offset / 300;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <mpu_offset_call+0xf0>)
 800181e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <mpu_offset_call+0xf4>)
 8001824:	fb82 1203 	smull	r1, r2, r2, r3
 8001828:	1152      	asrs	r2, r2, #5
 800182a:	17db      	asrs	r3, r3, #31
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	b21a      	sxth	r2, r3
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <mpu_offset_call+0xf0>)
 8001832:	86da      	strh	r2, [r3, #54]	; 0x36
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200001fc 	.word	0x200001fc
 8001840:	200001c0 	.word	0x200001c0
 8001844:	1b4e81b5 	.word	0x1b4e81b5

08001848 <get_imu_data>:



void get_imu_data(uint16_t trig_pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1)
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <get_imu_data+0x28>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d105      	bne.n	8001866 <get_imu_data+0x1e>
	{
		mpu_get_data();
 800185a:	f7ff fedb 	bl	8001614 <mpu_get_data>
		process_ist_data();
 800185e:	f000 f809 	bl	8001874 <process_ist_data>
		process_mpu_data();
 8001862:	f000 f81b 	bl	800189c <process_mpu_data>
	}
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001f8 	.word	0x200001f8

08001874 <process_ist_data>:

void process_ist_data()
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	memcpy(&imu_data.mag_data.mx, ist_buff, 6);
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <process_ist_data+0x20>)
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <process_ist_data+0x24>)
 800187c:	3320      	adds	r3, #32
 800187e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001882:	6018      	str	r0, [r3, #0]
 8001884:	3304      	adds	r3, #4
 8001886:	8019      	strh	r1, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200001c0 	.word	0x200001c0
 8001898:	2000020c 	.word	0x2000020c

0800189c <process_mpu_data>:

void process_mpu_data()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
	int16_t mpu_temp;
	mpu_temp   			= mpu_buff[0] << 8 | mpu_buff[1];
 80018a2:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <process_mpu_data+0x158>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <process_mpu_data+0x158>)
 80018ac:	785b      	ldrb	r3, [r3, #1]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	80fb      	strh	r3, [r7, #6]
    imu_data.accel_data.ax 	= mpu_temp * 1;
 80018b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <process_mpu_data+0x15c>)
 80018c2:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu_temp   			= mpu_buff[2] << 8 | mpu_buff[3];
 80018c6:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <process_mpu_data+0x158>)
 80018c8:	789b      	ldrb	r3, [r3, #2]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <process_mpu_data+0x158>)
 80018d0:	78db      	ldrb	r3, [r3, #3]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	80fb      	strh	r3, [r7, #6]
    imu_data.accel_data.ay 	= mpu_temp * 1;
 80018d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <process_mpu_data+0x15c>)
 80018e6:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu_temp   			= mpu_buff[4] << 8 | mpu_buff[5];
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <process_mpu_data+0x158>)
 80018ec:	791b      	ldrb	r3, [r3, #4]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <process_mpu_data+0x158>)
 80018f4:	795b      	ldrb	r3, [r3, #5]
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	4313      	orrs	r3, r2
 80018fa:	80fb      	strh	r3, [r7, #6]
    imu_data.accel_data.az 	= mpu_temp * 1;
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <process_mpu_data+0x15c>)
 800190a:	edc3 7a06 	vstr	s15, [r3, #24]
	//temperature = mpu_buff[6] << 8 | mpu_buff[7];
    accel_data_ready(imu_data.accel_data);
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <process_mpu_data+0x15c>)
 8001910:	3310      	adds	r3, #16
 8001912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001914:	f002 feae 	bl	8004674 <accel_data_ready>

	mpu_temp = ((mpu_buff[8]  << 8 | mpu_buff[9])  - imu_data.gx_offset);
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <process_mpu_data+0x158>)
 800191a:	7a1b      	ldrb	r3, [r3, #8]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21a      	sxth	r2, r3
 8001920:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <process_mpu_data+0x158>)
 8001922:	7a5b      	ldrb	r3, [r3, #9]
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b21b      	sxth	r3, r3
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <process_mpu_data+0x15c>)
 800192e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001932:	b29b      	uxth	r3, r3
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	b29b      	uxth	r3, r3
 8001938:	80fb      	strh	r3, [r7, #6]
	imu_data.gyro_data.gx = mpu_temp/ 16.384f / 57.3f;
 800193a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001946:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80019fc <process_mpu_data+0x160>
 800194a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800194e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001a00 <process_mpu_data+0x164>
 8001952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <process_mpu_data+0x15c>)
 8001958:	edc3 7a00 	vstr	s15, [r3]
	mpu_temp = ((mpu_buff[10] << 8 | mpu_buff[11]) - imu_data.gy_offset);
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <process_mpu_data+0x158>)
 800195e:	7a9b      	ldrb	r3, [r3, #10]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <process_mpu_data+0x158>)
 8001966:	7adb      	ldrb	r3, [r3, #11]
 8001968:	b21b      	sxth	r3, r3
 800196a:	4313      	orrs	r3, r2
 800196c:	b21b      	sxth	r3, r3
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <process_mpu_data+0x15c>)
 8001972:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001976:	b29b      	uxth	r3, r3
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	b29b      	uxth	r3, r3
 800197c:	80fb      	strh	r3, [r7, #6]
	imu_data.gyro_data.gy = mpu_temp/ 16.384f / 57.3f;
 800197e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198a:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80019fc <process_mpu_data+0x160>
 800198e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001992:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001a00 <process_mpu_data+0x164>
 8001996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <process_mpu_data+0x15c>)
 800199c:	edc3 7a01 	vstr	s15, [r3, #4]
	mpu_temp = ((mpu_buff[12] << 8 | mpu_buff[13]) - imu_data.gz_offset);
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <process_mpu_data+0x158>)
 80019a2:	7b1b      	ldrb	r3, [r3, #12]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <process_mpu_data+0x158>)
 80019aa:	7b5b      	ldrb	r3, [r3, #13]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <process_mpu_data+0x15c>)
 80019b6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b29b      	uxth	r3, r3
 80019c0:	80fb      	strh	r3, [r7, #6]
	imu_data.gyro_data.gz = mpu_temp/ 16.384f / 57.3f;
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ce:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80019fc <process_mpu_data+0x160>
 80019d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019d6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001a00 <process_mpu_data+0x164>
 80019da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <process_mpu_data+0x15c>)
 80019e0:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_data_ready(imu_data.gyro_data);
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <process_mpu_data+0x15c>)
 80019e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e8:	f002 fe12 	bl	8004610 <gyro_data_ready>
	//imu_heading.temp = 21 + mpu_data.temp / 333.87f;
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200001fc 	.word	0x200001fc
 80019f8:	200001c0 	.word	0x200001c0
 80019fc:	4183126f 	.word	0x4183126f
 8001a00:	42653333 	.word	0x42653333

08001a04 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == IST_INT_Pin) || (GPIO_Pin == MPU_INT_Pin))
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_EXTI_Callback+0x18>
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a1a:	d103      	bne.n	8001a24 <HAL_GPIO_EXTI_Callback+0x20>
	{
		get_imu_data(GPIO_Pin);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff12 	bl	8001848 <get_imu_data>
		//todo: add semaphore so gimbals only react if there's a new IMU reading
	}
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <GPIO_ToggleBits>:
 *      Author: Kai Yang
 */

#include "bsp_led.h"

void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
  GPIOx->ODR ^= GPIO_Pin;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	405a      	eors	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	615a      	str	r2, [r3, #20]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <led_green_off>:

/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a5a:	4802      	ldr	r0, [pc, #8]	; (8001a64 <led_green_off+0x14>)
 8001a5c:	f007 fd60 	bl	8009520 <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021400 	.word	0x40021400

08001a68 <led_on>:

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
}

void led_on(void){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <led_on+0x20>)
 8001a74:	f007 fd54 	bl	8009520 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <led_on+0x24>)
 8001a80:	f007 fd4e 	bl	8009520 <HAL_GPIO_WritePin>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40021400 	.word	0x40021400

08001a90 <led_toggle>:
void led_toggle(void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	GPIO_ToggleBits(GPIOE, GPIO_PIN_11);
 8001a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <led_toggle+0x1c>)
 8001a9a:	f7ff ffc7 	bl	8001a2c <GPIO_ToggleBits>
	GPIO_ToggleBits(GPIOF, GPIO_PIN_14);
 8001a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa2:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <led_toggle+0x20>)
 8001aa4:	f7ff ffc2 	bl	8001a2c <GPIO_ToggleBits>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40021400 	.word	0x40021400

08001ab4 <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	80fb      	strh	r3, [r7, #6]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));

	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */

	if (led_no > 0 && led_no <= 8)
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d02f      	beq.n	8001b2a <status_led+0x76>
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d82c      	bhi.n	8001b2a <status_led+0x76>
	{
		if (led_state == toggle_led)
 8001ad0:	797b      	ldrb	r3, [r7, #5]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d10d      	bne.n	8001af2 <status_led+0x3e>
		{
			GPIOG->ODR ^= 1 << (1 << led_no);
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <status_led+0xc4>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <status_led+0xc4>)
 8001aec:	404b      	eors	r3, r1
 8001aee:	6153      	str	r3, [r2, #20]
 8001af0:	e01b      	b.n	8001b2a <status_led+0x76>
		}
		else if (led_state == on_led)
 8001af2:	797b      	ldrb	r3, [r7, #5]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10b      	bne.n	8001b10 <status_led+0x5c>
		{
			GPIOG->ODR &= ~(1 << led_no);
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <status_led+0xc4>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	88fa      	ldrh	r2, [r7, #6]
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	43d2      	mvns	r2, r2
 8001b06:	4611      	mov	r1, r2
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <status_led+0xc4>)
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	6153      	str	r3, [r2, #20]
 8001b0e:	e00c      	b.n	8001b2a <status_led+0x76>
		}
		else if (led_state == off_led)
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d109      	bne.n	8001b2a <status_led+0x76>
		{
			GPIOG->ODR |= (1 << led_no);
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <status_led+0xc4>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	4611      	mov	r1, r2
 8001b24:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <status_led+0xc4>)
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6153      	str	r3, [r2, #20]
		}
	}
	if (led_no == 9)
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	2b09      	cmp	r3, #9
 8001b2e:	d11c      	bne.n	8001b6a <status_led+0xb6>
	{
		if (led_state == toggle_led)
 8001b30:	797b      	ldrb	r3, [r7, #5]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d106      	bne.n	8001b44 <status_led+0x90>
		{
			GPIOG->ODR ^= 0xFF;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <status_led+0xc4>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <status_led+0xc4>)
 8001b3c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001b40:	6153      	str	r3, [r2, #20]
		{
			GPIOG->ODR |= (0xFF);
		}
	}

}
 8001b42:	e012      	b.n	8001b6a <status_led+0xb6>
		else if (led_state == on_led)
 8001b44:	797b      	ldrb	r3, [r7, #5]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <status_led+0xa4>
			GPIOG->ODR &= ~(0xFF);
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <status_led+0xc4>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <status_led+0xc4>)
 8001b50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b54:	6153      	str	r3, [r2, #20]
}
 8001b56:	e008      	b.n	8001b6a <status_led+0xb6>
		else if (led_state == off_led)
 8001b58:	797b      	ldrb	r3, [r7, #5]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <status_led+0xb6>
			GPIOG->ODR |= (0xFF);
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <status_led+0xc4>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <status_led+0xc4>)
 8001b64:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001b68:	6153      	str	r3, [r2, #20]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021800 	.word	0x40021800

08001b7c <micros_tick>:
#include "robot_config.h"

uint32_t gv_curr_micros = 0;
uint32_t gv_overflow_times = 0;

void micros_tick(){
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
	if (gv_curr_micros == 0xFFFFFFFF) //2^32 - 1
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <micros_tick+0x2c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d104      	bne.n	8001b94 <micros_tick+0x18>
		gv_overflow_times ++;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <micros_tick+0x30>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <micros_tick+0x30>)
 8001b92:	6013      	str	r3, [r2, #0]
	gv_curr_micros ++;
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <micros_tick+0x2c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <micros_tick+0x2c>)
 8001b9c:	6013      	str	r3, [r2, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	20000214 	.word	0x20000214
 8001bac:	20000218 	.word	0x20000218

08001bb0 <start_micros_timer>:

void start_micros_timer()
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	configASSERT(TIMER_FREQ <= 1000000);
	__HAL_TIM_SET_AUTORELOAD(&htim1, (999999/TIMER_FREQ) + 1);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <start_micros_timer+0x2c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2264      	movs	r2, #100	; 0x64
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <start_micros_timer+0x2c>)
 8001bbe:	2264      	movs	r2, #100	; 0x64
 8001bc0:	60da      	str	r2, [r3, #12]
	htim1.Instance->DIER |= TIM_DIER_UIE; //enable update interrupt
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <start_micros_timer+0x2c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <start_micros_timer+0x2c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim1);
 8001bd2:	4802      	ldr	r0, [pc, #8]	; (8001bdc <start_micros_timer+0x2c>)
 8001bd4:	f00a f9ac 	bl	800bf30 <HAL_TIM_Base_Start>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000b54 	.word	0x20000b54

08001be0 <get_microseconds>:



uint32_t get_microseconds()
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
	return gv_curr_micros;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <get_microseconds+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000214 	.word	0x20000214

08001bf8 <xavier_usart_start>:
	return HAL_OK;
}


HAL_StatusTypeDef xavier_usart_start(uint8_t *pData, uint16_t Size)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
	UART_HandleTypeDef *huart = &XAVIER_UART;
 8001c04:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <xavier_usart_start+0xec>)
 8001c06:	617b      	str	r3, [r7, #20]
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d161      	bne.n	8001cd8 <xavier_usart_start+0xe0>
		if ((pData == NULL) || (Size == 0U))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <xavier_usart_start+0x28>
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <xavier_usart_start+0x2c>
		{
			return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e05a      	b.n	8001cda <xavier_usart_start+0xe2>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <xavier_usart_start+0x3a>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e053      	b.n	8001cda <xavier_usart_start+0xe2>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2222      	movs	r2, #34	; 0x22
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = aimbot_ISR;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <xavier_usart_start+0xf0>)
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = aimbot_hlf_ISR;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <xavier_usart_start+0xf4>)
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	2200      	movs	r2, #0
 8001c6a:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	613b      	str	r3, [r7, #16]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	f006 ff4d 	bl	8008b20 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb2:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd2:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e000      	b.n	8001cda <xavier_usart_start+0xe2>
	} else {
		return HAL_BUSY;
 8001cd8:	2302      	movs	r3, #2
	}
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000d44 	.word	0x20000d44
 8001ce8:	08003f75 	.word	0x08003f75
 8001cec:	08003ef5 	.word	0x08003ef5

08001cf0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <MX_CAN1_Init+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d12:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d16:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001d1a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d42:	f005 fedd 	bl	8007b00 <HAL_CAN_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d4c:	f000 fc32 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2000021c 	.word	0x2000021c
 8001d58:	40006400 	.word	0x40006400

08001d5c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <MX_CAN2_Init+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d68:	2203      	movs	r2, #3
 8001d6a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d7e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d82:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001d86:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001dae:	f005 fea7 	bl	8007b00 <HAL_CAN_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001db8:	f000 fbfc 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000244 	.word	0x20000244
 8001dc4:	40006800 	.word	0x40006800

08001dc8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a4e      	ldr	r2, [pc, #312]	; (8001f20 <HAL_CAN_MspInit+0x158>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d13d      	bne.n	8001e66 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001dea:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001df2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001df4:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d10d      	bne.n	8001e18 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a48      	ldr	r2, [pc, #288]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a41      	ldr	r2, [pc, #260]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e34:	2303      	movs	r3, #3
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e44:	2309      	movs	r3, #9
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4837      	ldr	r0, [pc, #220]	; (8001f2c <HAL_CAN_MspInit+0x164>)
 8001e50:	f007 f9ba 	bl	80091c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2105      	movs	r1, #5
 8001e58:	2014      	movs	r0, #20
 8001e5a:	f006 fd89 	bl	8008970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e5e:	2014      	movs	r0, #20
 8001e60:	f006 fda2 	bl	80089a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001e64:	e058      	b.n	8001f18 <HAL_CAN_MspInit+0x150>
  else if(canHandle->Instance==CAN2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_CAN_MspInit+0x168>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d153      	bne.n	8001f18 <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001e94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d10d      	bne.n	8001eba <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ed6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001ee8:	2309      	movs	r3, #9
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4810      	ldr	r0, [pc, #64]	; (8001f34 <HAL_CAN_MspInit+0x16c>)
 8001ef4:	f007 f968 	bl	80091c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2105      	movs	r1, #5
 8001efc:	2040      	movs	r0, #64	; 0x40
 8001efe:	f006 fd37 	bl	8008970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001f02:	2040      	movs	r0, #64	; 0x40
 8001f04:	f006 fd50 	bl	80089a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2105      	movs	r1, #5
 8001f0c:	2041      	movs	r0, #65	; 0x41
 8001f0e:	f006 fd2f 	bl	8008970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001f12:	2041      	movs	r0, #65	; 0x41
 8001f14:	f006 fd48 	bl	80089a8 <HAL_NVIC_EnableIRQ>
}
 8001f18:	bf00      	nop
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40006400 	.word	0x40006400
 8001f24:	2000026c 	.word	0x2000026c
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40006800 	.word	0x40006800
 8001f34:	40020400 	.word	0x40020400

08001f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2105      	movs	r1, #5
 8001f7a:	200e      	movs	r0, #14
 8001f7c:	f006 fcf8 	bl	8008970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001f80:	200e      	movs	r0, #14
 8001f82:	f006 fd11 	bl	80089a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2105      	movs	r1, #5
 8001f8a:	2039      	movs	r0, #57	; 0x39
 8001f8c:	f006 fcf0 	bl	8008970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001f90:	2039      	movs	r0, #57	; 0x39
 8001f92:	f006 fd09 	bl	80089a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2105      	movs	r1, #5
 8001f9a:	203a      	movs	r0, #58	; 0x3a
 8001f9c:	f006 fce8 	bl	8008970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001fa0:	203a      	movs	r0, #58	; 0x3a
 8001fa2:	f006 fd01 	bl	80089a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2105      	movs	r1, #5
 8001faa:	203b      	movs	r0, #59	; 0x3b
 8001fac:	f006 fce0 	bl	8008970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001fb0:	203b      	movs	r0, #59	; 0x3b
 8001fb2:	f006 fcf9 	bl	80089a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2105      	movs	r1, #5
 8001fba:	203c      	movs	r0, #60	; 0x3c
 8001fbc:	f006 fcd8 	bl	8008970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001fc0:	203c      	movs	r0, #60	; 0x3c
 8001fc2:	f006 fcf1 	bl	80089a8 <HAL_NVIC_EnableIRQ>

}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
return 0;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a07      	ldr	r2, [pc, #28]	; (8002020 <vApplicationGetIdleTaskMemory+0x2c>)
 8002004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <vApplicationGetIdleTaskMemory+0x30>)
 800200a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200002ac 	.word	0x200002ac
 8002024:	20000350 	.word	0x20000350

08002028 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a07      	ldr	r2, [pc, #28]	; (8002054 <vApplicationGetTimerTaskMemory+0x2c>)
 8002038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <vApplicationGetTimerTaskMemory+0x30>)
 800203e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002046:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	20000550 	.word	0x20000550
 8002058:	200005f4 	.word	0x200005f4

0800205c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af02      	add	r7, sp, #8
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	gimbal_event_group = xEventGroupCreate();
 8002062:	f00f fcd3 	bl	8011a0c <xEventGroupCreate>
 8002066:	4603      	mov	r3, r0
 8002068:	4a44      	ldr	r2, [pc, #272]	; (800217c <MX_FREERTOS_Init+0x120>)
 800206a:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 800206c:	f00f fcce 	bl	8011a0c <xEventGroupCreate>
 8002070:	4603      	mov	r3, r0
 8002072:	4a43      	ldr	r2, [pc, #268]	; (8002180 <MX_FREERTOS_Init+0x124>)
 8002074:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 8002076:	f00f fcc9 	bl	8011a0c <xEventGroupCreate>
 800207a:	4603      	mov	r3, r0
 800207c:	4a41      	ldr	r2, [pc, #260]	; (8002184 <MX_FREERTOS_Init+0x128>)
 800207e:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 8002080:	2203      	movs	r2, #3
 8002082:	2100      	movs	r1, #0
 8002084:	2001      	movs	r0, #1
 8002086:	f010 f82f 	bl	80120e8 <xQueueGenericCreate>
 800208a:	4603      	mov	r3, r0
 800208c:	4a3e      	ldr	r2, [pc, #248]	; (8002188 <MX_FREERTOS_Init+0x12c>)
 800208e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 8002090:	2200      	movs	r2, #0
 8002092:	2110      	movs	r1, #16
 8002094:	2005      	movs	r0, #5
 8002096:	f010 f827 	bl	80120e8 <xQueueGenericCreate>
 800209a:	4603      	mov	r3, r0
 800209c:	4a3b      	ldr	r2, [pc, #236]	; (800218c <MX_FREERTOS_Init+0x130>)
 800209e:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 80020a0:	2200      	movs	r2, #0
 80020a2:	2110      	movs	r1, #16
 80020a4:	2005      	movs	r0, #5
 80020a6:	f010 f81f 	bl	80120e8 <xQueueGenericCreate>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a38      	ldr	r2, [pc, #224]	; (8002190 <MX_FREERTOS_Init+0x134>)
 80020ae:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 80020b0:	2200      	movs	r2, #0
 80020b2:	210c      	movs	r1, #12
 80020b4:	2005      	movs	r0, #5
 80020b6:	f010 f817 	bl	80120e8 <xQueueGenericCreate>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a35      	ldr	r2, [pc, #212]	; (8002194 <MX_FREERTOS_Init+0x138>)
 80020be:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	buzzing_task_msg = xQueueCreate(5, sizeof(uint8_t));
 80020c0:	2200      	movs	r2, #0
 80020c2:	2101      	movs	r1, #1
 80020c4:	2005      	movs	r0, #5
 80020c6:	f010 f80f 	bl	80120e8 <xQueueGenericCreate>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a32      	ldr	r2, [pc, #200]	; (8002198 <MX_FREERTOS_Init+0x13c>)
 80020ce:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80020d0:	4b32      	ldr	r3, [pc, #200]	; (800219c <MX_FREERTOS_Init+0x140>)
 80020d2:	1d3c      	adds	r4, r7, #4
 80020d4:	461d      	mov	r5, r3
 80020d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f00f fc30 	bl	801194c <osThreadCreate>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a2c      	ldr	r2, [pc, #176]	; (80021a0 <MX_FREERTOS_Init+0x144>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //todo: adjust priorities
  //Threads creation
  xTaskCreate(imu_processing_task		, "IMU_task" 		,
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <MX_FREERTOS_Init+0x148>)
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	230f      	movs	r3, #15
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	492a      	ldr	r1, [pc, #168]	; (80021a8 <MX_FREERTOS_Init+0x14c>)
 8002100:	482a      	ldr	r0, [pc, #168]	; (80021ac <MX_FREERTOS_Init+0x150>)
 8002102:	f010 fc90 	bl	8012a26 <xTaskCreate>
		  configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)15, &imu_processing_task_handle);

  xTaskCreate(motor_calib_task			, "motor_calib_task" ,
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <MX_FREERTOS_Init+0x154>)
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2309      	movs	r3, #9
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	4928      	ldr	r1, [pc, #160]	; (80021b4 <MX_FREERTOS_Init+0x158>)
 8002114:	4828      	ldr	r0, [pc, #160]	; (80021b8 <MX_FREERTOS_Init+0x15c>)
 8002116:	f010 fc86 	bl	8012a26 <xTaskCreate>
		  configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)9, &motor_calib_task_handle);


  if (chassis_event_group == NULL) {
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_FREERTOS_Init+0x124>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <MX_FREERTOS_Init+0xda>
 	  //error handler
   }
   else {
	   xTaskCreate(movement_control_task, "chassis_task" 	,
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <MX_FREERTOS_Init+0x160>)
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2304      	movs	r3, #4
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2301      	movs	r3, #1
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	4924      	ldr	r1, [pc, #144]	; (80021c0 <MX_FREERTOS_Init+0x164>)
 8002130:	4824      	ldr	r0, [pc, #144]	; (80021c4 <MX_FREERTOS_Init+0x168>)
 8002132:	f010 fc78 	bl	8012a26 <xTaskCreate>
			   configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)4, &movement_control_task_handle);
   }
  xTaskCreate(motor_feedback_task, "feedback_loop_task" 	,
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <MX_FREERTOS_Init+0x16c>)
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	2304      	movs	r3, #4
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	4922      	ldr	r1, [pc, #136]	; (80021cc <MX_FREERTOS_Init+0x170>)
 8002144:	4822      	ldr	r0, [pc, #136]	; (80021d0 <MX_FREERTOS_Init+0x174>)
 8002146:	f010 fc6e 	bl	8012a26 <xTaskCreate>
  			   configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)4, &motor_feedback_task_handle);


  xTaskCreate(control_input_task		, "RC_task" 		,
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <MX_FREERTOS_Init+0x178>)
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2304      	movs	r3, #4
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	4920      	ldr	r1, [pc, #128]	; (80021d8 <MX_FREERTOS_Init+0x17c>)
 8002158:	4820      	ldr	r0, [pc, #128]	; (80021dc <MX_FREERTOS_Init+0x180>)
 800215a:	f010 fc64 	bl	8012a26 <xTaskCreate>
		  configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)4, &control_input_task_handle);
  xTaskCreate(buzzing_task				, "buzzer_task" 	,
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <MX_FREERTOS_Init+0x184>)
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	2301      	movs	r3, #1
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2301      	movs	r3, #1
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	491e      	ldr	r1, [pc, #120]	; (80021e4 <MX_FREERTOS_Init+0x188>)
 800216c:	481e      	ldr	r0, [pc, #120]	; (80021e8 <MX_FREERTOS_Init+0x18c>)
 800216e:	f010 fc5a 	bl	8012a26 <xTaskCreate>
		  configMINIMAL_STACK_SIZE ,(void *) 1,(UBaseType_t) 1, &buzzing_task_handle);

  /* USER CODE END RTOS_THREADS */

}
 8002172:	bf00      	nop
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bdb0      	pop	{r4, r5, r7, pc}
 800217a:	bf00      	nop
 800217c:	20000288 	.word	0x20000288
 8002180:	2000028c 	.word	0x2000028c
 8002184:	20000290 	.word	0x20000290
 8002188:	20000294 	.word	0x20000294
 800218c:	20000298 	.word	0x20000298
 8002190:	2000029c 	.word	0x2000029c
 8002194:	200002a0 	.word	0x200002a0
 8002198:	200002a4 	.word	0x200002a4
 800219c:	08017400 	.word	0x08017400
 80021a0:	200002a8 	.word	0x200002a8
 80021a4:	20000280 	.word	0x20000280
 80021a8:	0801739c 	.word	0x0801739c
 80021ac:	080046d9 	.word	0x080046d9
 80021b0:	2000027c 	.word	0x2000027c
 80021b4:	080173a8 	.word	0x080173a8
 80021b8:	08006811 	.word	0x08006811
 80021bc:	20000270 	.word	0x20000270
 80021c0:	080173bc 	.word	0x080173bc
 80021c4:	0800730d 	.word	0x0800730d
 80021c8:	20000284 	.word	0x20000284
 80021cc:	080173cc 	.word	0x080173cc
 80021d0:	08007089 	.word	0x08007089
 80021d4:	20000274 	.word	0x20000274
 80021d8:	080173e0 	.word	0x080173e0
 80021dc:	08004351 	.word	0x08004351
 80021e0:	20000278 	.word	0x20000278
 80021e4:	080173e8 	.word	0x080173e8
 80021e8:	080035d9 	.word	0x080035d9

080021ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80021f4:	f012 fcd2 	bl	8014b9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80021f8:	2001      	movs	r0, #1
 80021fa:	f00f fbf3 	bl	80119e4 <osDelay>
 80021fe:	e7fb      	b.n	80021f8 <StartDefaultTask+0xc>

08002200 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA7   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	4b8c      	ldr	r3, [pc, #560]	; (800244c <MX_GPIO_Init+0x24c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a8b      	ldr	r2, [pc, #556]	; (800244c <MX_GPIO_Init+0x24c>)
 8002220:	f043 0310 	orr.w	r3, r3, #16
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <MX_GPIO_Init+0x24c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	4b85      	ldr	r3, [pc, #532]	; (800244c <MX_GPIO_Init+0x24c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a84      	ldr	r2, [pc, #528]	; (800244c <MX_GPIO_Init+0x24c>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b82      	ldr	r3, [pc, #520]	; (800244c <MX_GPIO_Init+0x24c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b7e      	ldr	r3, [pc, #504]	; (800244c <MX_GPIO_Init+0x24c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a7d      	ldr	r2, [pc, #500]	; (800244c <MX_GPIO_Init+0x24c>)
 8002258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b7b      	ldr	r3, [pc, #492]	; (800244c <MX_GPIO_Init+0x24c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b77      	ldr	r3, [pc, #476]	; (800244c <MX_GPIO_Init+0x24c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a76      	ldr	r2, [pc, #472]	; (800244c <MX_GPIO_Init+0x24c>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b74      	ldr	r3, [pc, #464]	; (800244c <MX_GPIO_Init+0x24c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b70      	ldr	r3, [pc, #448]	; (800244c <MX_GPIO_Init+0x24c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a6f      	ldr	r2, [pc, #444]	; (800244c <MX_GPIO_Init+0x24c>)
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b6d      	ldr	r3, [pc, #436]	; (800244c <MX_GPIO_Init+0x24c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b69      	ldr	r3, [pc, #420]	; (800244c <MX_GPIO_Init+0x24c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a68      	ldr	r2, [pc, #416]	; (800244c <MX_GPIO_Init+0x24c>)
 80022ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b66      	ldr	r3, [pc, #408]	; (800244c <MX_GPIO_Init+0x24c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4b62      	ldr	r3, [pc, #392]	; (800244c <MX_GPIO_Init+0x24c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a61      	ldr	r2, [pc, #388]	; (800244c <MX_GPIO_Init+0x24c>)
 80022c8:	f043 0320 	orr.w	r3, r3, #32
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b5f      	ldr	r3, [pc, #380]	; (800244c <MX_GPIO_Init+0x24c>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_Port, LASER_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e0:	485b      	ldr	r0, [pc, #364]	; (8002450 <MX_GPIO_Init+0x250>)
 80022e2:	f007 f91d 	bl	8009520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin, GPIO_PIN_SET);
 80022e6:	2201      	movs	r2, #1
 80022e8:	213c      	movs	r1, #60	; 0x3c
 80022ea:	485a      	ldr	r0, [pc, #360]	; (8002454 <MX_GPIO_Init+0x254>)
 80022ec:	f007 f918 	bl	8009520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED8_Pin|LED7_Pin|LED6_Pin|LED5_Pin
 80022f0:	2201      	movs	r2, #1
 80022f2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80022f6:	4856      	ldr	r0, [pc, #344]	; (8002450 <MX_GPIO_Init+0x250>)
 80022f8:	f007 f912 	bl	8009520 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	4855      	ldr	r0, [pc, #340]	; (8002458 <MX_GPIO_Init+0x258>)
 8002302:	f007 f90d 	bl	8009520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230c:	4853      	ldr	r0, [pc, #332]	; (800245c <MX_GPIO_Init+0x25c>)
 800230e:	f007 f907 	bl	8009520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002318:	484f      	ldr	r0, [pc, #316]	; (8002458 <MX_GPIO_Init+0x258>)
 800231a:	f007 f901 	bl	8009520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 800231e:	2308      	movs	r3, #8
 8002320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002322:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002328:	2302      	movs	r3, #2
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	484a      	ldr	r0, [pc, #296]	; (800245c <MX_GPIO_Init+0x25c>)
 8002334:	f006 ff48 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8002338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002344:	2302      	movs	r3, #2
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	4619      	mov	r1, r3
 800234e:	4844      	ldr	r0, [pc, #272]	; (8002460 <MX_GPIO_Init+0x260>)
 8002350:	f006 ff3a 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_Pin;
 8002354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LASER_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4838      	ldr	r0, [pc, #224]	; (8002450 <MX_GPIO_Init+0x250>)
 800236e:	f006 ff2b 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin;
 8002372:	233c      	movs	r3, #60	; 0x3c
 8002374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800237a:	2301      	movs	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4619      	mov	r1, r3
 8002388:	4832      	ldr	r0, [pc, #200]	; (8002454 <MX_GPIO_Init+0x254>)
 800238a:	f006 ff1d 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED8_Pin|LED7_Pin|LED6_Pin|LED5_Pin
 800238e:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8002392:	61fb      	str	r3, [r7, #28]
                          |LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	482a      	ldr	r0, [pc, #168]	; (8002450 <MX_GPIO_Init+0x250>)
 80023a8:	f006 ff0e 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ac:	2340      	movs	r3, #64	; 0x40
 80023ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023b4:	2302      	movs	r3, #2
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	4825      	ldr	r0, [pc, #148]	; (8002458 <MX_GPIO_Init+0x258>)
 80023c4:	f006 ff00 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80023c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	4619      	mov	r1, r3
 80023e0:	481e      	ldr	r0, [pc, #120]	; (800245c <MX_GPIO_Init+0x25c>)
 80023e2:	f006 fef1 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023f6:	2305      	movs	r3, #5
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	4818      	ldr	r0, [pc, #96]	; (8002464 <MX_GPIO_Init+0x264>)
 8002402:	f006 fee1 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8002406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800240a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	2301      	movs	r3, #1
 800240e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4619      	mov	r1, r3
 800241e:	480e      	ldr	r0, [pc, #56]	; (8002458 <MX_GPIO_Init+0x258>)
 8002420:	f006 fed2 	bl	80091c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2105      	movs	r1, #5
 8002428:	2009      	movs	r0, #9
 800242a:	f006 faa1 	bl	8008970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800242e:	2009      	movs	r0, #9
 8002430:	f006 faba 	bl	80089a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2105      	movs	r1, #5
 8002438:	2017      	movs	r0, #23
 800243a:	f006 fa99 	bl	8008970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800243e:	2017      	movs	r0, #23
 8002440:	f006 fab2 	bl	80089a8 <HAL_NVIC_EnableIRQ>

}
 8002444:	bf00      	nop
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	40021800 	.word	0x40021800
 8002454:	40021c00 	.word	0x40021c00
 8002458:	40021400 	.word	0x40021400
 800245c:	40021000 	.word	0x40021000
 8002460:	40020400 	.word	0x40020400
 8002464:	40020000 	.word	0x40020000

08002468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800246c:	f005 fae2 	bl	8007a34 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002470:	f000 f824 	bl	80024bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002474:	f7ff fec4 	bl	8002200 <MX_GPIO_Init>
  MX_DMA_Init();
 8002478:	f7ff fd5e 	bl	8001f38 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800247c:	f000 fe96 	bl	80031ac <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8002480:	f7ff fc36 	bl	8001cf0 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8002484:	f000 febe 	bl	8003204 <MX_USART6_UART_Init>
  MX_SPI5_Init();
 8002488:	f000 f89a 	bl	80025c0 <MX_SPI5_Init>
  MX_TIM12_Init();
 800248c:	f000 fd08 	bl	8002ea0 <MX_TIM12_Init>
  MX_CAN2_Init();
 8002490:	f7ff fc64 	bl	8001d5c <MX_CAN2_Init>
  MX_TIM4_Init();
 8002494:	f000 fbd4 	bl	8002c40 <MX_TIM4_Init>
  MX_UART7_Init();
 8002498:	f000 fe5e 	bl	8003158 <MX_UART7_Init>
  MX_FATFS_Init();
 800249c:	f00d f9f0 	bl	800f880 <MX_FATFS_Init>
  MX_TIM5_Init();
 80024a0:	f000 fc28 	bl	8002cf4 <MX_TIM5_Init>
  MX_TIM8_Init();
 80024a4:	f000 fc7c 	bl	8002da0 <MX_TIM8_Init>
  MX_TIM1_Init();
 80024a8:	f000 fb4a 	bl	8002b40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  startup_task();
 80024ac:	f005 fa66 	bl	800797c <startup_task>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80024b0:	f7ff fdd4 	bl	800205c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80024b4:	f00f fa43 	bl	801193e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <main+0x50>
	...

080024bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b094      	sub	sp, #80	; 0x50
 80024c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024c2:	f107 0320 	add.w	r3, r7, #32
 80024c6:	2230      	movs	r2, #48	; 0x30
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f013 f85a 	bl	8015584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <SystemClock_Config+0xcc>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	4a27      	ldr	r2, [pc, #156]	; (8002588 <SystemClock_Config+0xcc>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6413      	str	r3, [r2, #64]	; 0x40
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <SystemClock_Config+0xcc>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <SystemClock_Config+0xd0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <SystemClock_Config+0xd0>)
 8002506:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <SystemClock_Config+0xd0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002518:	2301      	movs	r3, #1
 800251a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800251c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002522:	2302      	movs	r3, #2
 8002524:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002526:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800252a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800252c:	2306      	movs	r3, #6
 800252e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002530:	23a8      	movs	r3, #168	; 0xa8
 8002532:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002534:	2302      	movs	r3, #2
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002538:	2307      	movs	r3, #7
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253c:	f107 0320 	add.w	r3, r7, #32
 8002540:	4618      	mov	r0, r3
 8002542:	f008 fa9d 	bl	800aa80 <HAL_RCC_OscConfig>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800254c:	f000 f832 	bl	80025b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002550:	230f      	movs	r3, #15
 8002552:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002554:	2302      	movs	r3, #2
 8002556:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800255c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002566:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	2105      	movs	r1, #5
 800256e:	4618      	mov	r0, r3
 8002570:	f008 fcfe 	bl	800af70 <HAL_RCC_ClockConfig>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800257a:	f000 f81b 	bl	80025b4 <Error_Handler>
  }
}
 800257e:	bf00      	nop
 8002580:	3750      	adds	r7, #80	; 0x50
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40007000 	.word	0x40007000

08002590 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025a2:	f005 fa69 	bl	8007a78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40000400 	.word	0x40000400

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	e7fe      	b.n	80025bc <Error_Handler+0x8>
	...

080025c0 <MX_SPI5_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <MX_SPI5_Init+0x64>)
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <MX_SPI5_Init+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <MX_SPI5_Init+0x64>)
 80025cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_SPI5_Init+0x64>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <MX_SPI5_Init+0x64>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_SPI5_Init+0x64>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MX_SPI5_Init+0x64>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_SPI5_Init+0x64>)
 80025ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_SPI5_Init+0x64>)
 80025f4:	2238      	movs	r2, #56	; 0x38
 80025f6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <MX_SPI5_Init+0x64>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_SPI5_Init+0x64>)
 8002600:	2200      	movs	r2, #0
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <MX_SPI5_Init+0x64>)
 8002606:	2200      	movs	r2, #0
 8002608:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_SPI5_Init+0x64>)
 800260c:	220a      	movs	r2, #10
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002610:	4804      	ldr	r0, [pc, #16]	; (8002624 <MX_SPI5_Init+0x64>)
 8002612:	f008 febf 	bl	800b394 <HAL_SPI_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800261c:	f7ff ffca 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200009f4 	.word	0x200009f4
 8002628:	40015000 	.word	0x40015000

0800262c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a51      	ldr	r2, [pc, #324]	; (8002790 <HAL_SPI_MspInit+0x164>)
 800264a:	4293      	cmp	r3, r2
 800264c:	f040 809c 	bne.w	8002788 <HAL_SPI_MspInit+0x15c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_SPI_MspInit+0x168>)
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	4a4e      	ldr	r2, [pc, #312]	; (8002794 <HAL_SPI_MspInit+0x168>)
 800265a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265e:	6453      	str	r3, [r2, #68]	; 0x44
 8002660:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <HAL_SPI_MspInit+0x168>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	4b48      	ldr	r3, [pc, #288]	; (8002794 <HAL_SPI_MspInit+0x168>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4a47      	ldr	r2, [pc, #284]	; (8002794 <HAL_SPI_MspInit+0x168>)
 8002676:	f043 0320 	orr.w	r3, r3, #32
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
 800267c:	4b45      	ldr	r3, [pc, #276]	; (8002794 <HAL_SPI_MspInit+0x168>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8002688:	f44f 7360 	mov.w	r3, #896	; 0x380
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800269a:	2305      	movs	r3, #5
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	483c      	ldr	r0, [pc, #240]	; (8002798 <HAL_SPI_MspInit+0x16c>)
 80026a6:	f006 fd8f 	bl	80091c8 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 80026aa:	4b3c      	ldr	r3, [pc, #240]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026ac:	4a3c      	ldr	r2, [pc, #240]	; (80027a0 <HAL_SPI_MspInit+0x174>)
 80026ae:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026b6:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b8:	4b38      	ldr	r3, [pc, #224]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026be:	4b37      	ldr	r3, [pc, #220]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c4:	4b35      	ldr	r3, [pc, #212]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ca:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026cc:	4b33      	ldr	r3, [pc, #204]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d2:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026de:	4b2f      	ldr	r3, [pc, #188]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026e4:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026e8:	2204      	movs	r2, #4
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026ee:	2203      	movs	r2, #3
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80026fe:	4827      	ldr	r0, [pc, #156]	; (800279c <HAL_SPI_MspInit+0x170>)
 8002700:	f006 f960 	bl	80089c4 <HAL_DMA_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 800270a:	f7ff ff53 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a22      	ldr	r2, [pc, #136]	; (800279c <HAL_SPI_MspInit+0x170>)
 8002712:	64da      	str	r2, [r3, #76]	; 0x4c
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_SPI_MspInit+0x170>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800271c:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <HAL_SPI_MspInit+0x17c>)
 800271e:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8002720:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002722:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002726:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002728:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800273a:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8002748:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002750:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002754:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002758:	2200      	movs	r2, #0
 800275a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 800275c:	4811      	ldr	r0, [pc, #68]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800275e:	f006 f931 	bl	80089c4 <HAL_DMA_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 8002768:	f7ff ff24 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002770:	649a      	str	r2, [r3, #72]	; 0x48
 8002772:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2105      	movs	r1, #5
 800277c:	2055      	movs	r0, #85	; 0x55
 800277e:	f006 f8f7 	bl	8008970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8002782:	2055      	movs	r0, #85	; 0x55
 8002784:	f006 f910 	bl	80089a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40015000 	.word	0x40015000
 8002794:	40023800 	.word	0x40023800
 8002798:	40021400 	.word	0x40021400
 800279c:	20000a4c 	.word	0x20000a4c
 80027a0:	40026458 	.word	0x40026458
 80027a4:	20000aac 	.word	0x20000aac
 80027a8:	40026470 	.word	0x40026470

080027ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_MspInit+0x90>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_MspInit+0x90>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <HAL_MspInit+0x90>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_MspInit+0x90>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a19      	ldr	r2, [pc, #100]	; (800283c <HAL_MspInit+0x90>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <HAL_MspInit+0x90>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2101      	movs	r1, #1
 80027ee:	f06f 000b 	mvn.w	r0, #11
 80027f2:	f006 f8bd 	bl	8008970 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2102      	movs	r1, #2
 80027fa:	f06f 000a 	mvn.w	r0, #10
 80027fe:	f006 f8b7 	bl	8008970 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2103      	movs	r1, #3
 8002806:	f06f 0009 	mvn.w	r0, #9
 800280a:	f006 f8b1 	bl	8008970 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2104      	movs	r1, #4
 8002812:	f06f 0004 	mvn.w	r0, #4
 8002816:	f006 f8ab 	bl	8008970 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2105      	movs	r1, #5
 800281e:	f06f 0003 	mvn.w	r0, #3
 8002822:	f006 f8a5 	bl	8008970 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	210f      	movs	r1, #15
 800282a:	f06f 0001 	mvn.w	r0, #1
 800282e:	f006 f89f 	bl	8008970 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800

08002840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08e      	sub	sp, #56	; 0x38
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	4b33      	ldr	r3, [pc, #204]	; (8002924 <HAL_InitTick+0xe4>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4a32      	ldr	r2, [pc, #200]	; (8002924 <HAL_InitTick+0xe4>)
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	6413      	str	r3, [r2, #64]	; 0x40
 8002860:	4b30      	ldr	r3, [pc, #192]	; (8002924 <HAL_InitTick+0xe4>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800286c:	f107 0210 	add.w	r2, r7, #16
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f008 fd5a 	bl	800b330 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002886:	f008 fd2b 	bl	800b2e0 <HAL_RCC_GetPCLK1Freq>
 800288a:	6378      	str	r0, [r7, #52]	; 0x34
 800288c:	e004      	b.n	8002898 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800288e:	f008 fd27 	bl	800b2e0 <HAL_RCC_GetPCLK1Freq>
 8002892:	4603      	mov	r3, r0
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289a:	4a23      	ldr	r2, [pc, #140]	; (8002928 <HAL_InitTick+0xe8>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	0c9b      	lsrs	r3, r3, #18
 80028a2:	3b01      	subs	r3, #1
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80028a6:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_InitTick+0xec>)
 80028a8:	4a21      	ldr	r2, [pc, #132]	; (8002930 <HAL_InitTick+0xf0>)
 80028aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80028ac:	4b1f      	ldr	r3, [pc, #124]	; (800292c <HAL_InitTick+0xec>)
 80028ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028b2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80028b4:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_InitTick+0xec>)
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_InitTick+0xec>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_InitTick+0xec>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_InitTick+0xec>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80028cc:	4817      	ldr	r0, [pc, #92]	; (800292c <HAL_InitTick+0xec>)
 80028ce:	f009 fadf 	bl	800be90 <HAL_TIM_Base_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80028d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d11b      	bne.n	8002918 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80028e0:	4812      	ldr	r0, [pc, #72]	; (800292c <HAL_InitTick+0xec>)
 80028e2:	f009 fb8d 	bl	800c000 <HAL_TIM_Base_Start_IT>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80028ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d111      	bne.n	8002918 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028f4:	201d      	movs	r0, #29
 80028f6:	f006 f857 	bl	80089a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d808      	bhi.n	8002912 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002900:	2200      	movs	r2, #0
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	201d      	movs	r0, #29
 8002906:	f006 f833 	bl	8008970 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_InitTick+0xf4>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	e002      	b.n	8002918 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002918:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800291c:	4618      	mov	r0, r3
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	431bde83 	.word	0x431bde83
 800292c:	20000b0c 	.word	0x20000b0c
 8002930:	40000400 	.word	0x40000400
 8002934:	20000020 	.word	0x20000020

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800293c:	e7fe      	b.n	800293c <NMI_Handler+0x4>

0800293e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <HardFault_Handler+0x4>

08002944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <MemManage_Handler+0x4>

0800294a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <BusFault_Handler+0x4>

08002950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <UsageFault_Handler+0x4>

08002956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8002968:	2008      	movs	r0, #8
 800296a:	f006 fdf3 	bl	8009554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <DMA1_Stream3_IRQHandler+0x10>)
 800297a:	f006 f9bb 	bl	8008cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000d88 	.word	0x20000d88

08002988 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <CAN1_RX0_IRQHandler+0x10>)
 800298e:	f005 fd11 	bl	80083b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2000021c 	.word	0x2000021c

0800299c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU_INT_Pin);
 80029a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029a4:	f006 fdd6 	bl	8009554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}

080029ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029b0:	4803      	ldr	r0, [pc, #12]	; (80029c0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80029b2:	f009 fcfb 	bl	800c3ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  micros_tick();
 80029b6:	f7ff f8e1 	bl	8001b7c <micros_tick>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000b54 	.word	0x20000b54

080029c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <TIM3_IRQHandler+0x10>)
 80029ca:	f009 fcef 	bl	800c3ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000b0c 	.word	0x20000b0c

080029d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <USART1_IRQHandler+0x6c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d123      	bne.n	8002a34 <USART1_IRQHandler+0x5c>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80029ec:	2300      	movs	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <USART1_IRQHandler+0x6c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <USART1_IRQHandler+0x6c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
		if (hdma_usart1_rx.Instance->NDTR != 18)
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <USART1_IRQHandler+0x70>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b12      	cmp	r3, #18
 8002a0a:	d013      	beq.n	8002a34 <USART1_IRQHandler+0x5c>
		{
		__HAL_DMA_DISABLE(&hdma_usart1_rx);
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <USART1_IRQHandler+0x70>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <USART1_IRQHandler+0x70>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
		hdma_usart1_rx.Instance->NDTR = 18;
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <USART1_IRQHandler+0x70>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2212      	movs	r2, #18
 8002a22:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(&hdma_usart1_rx);
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <USART1_IRQHandler+0x70>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <USART1_IRQHandler+0x70>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a34:	4803      	ldr	r0, [pc, #12]	; (8002a44 <USART1_IRQHandler+0x6c>)
 8002a36:	f00a fc0f 	bl	800d258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000d00 	.word	0x20000d00
 8002a48:	20000de8 	.word	0x20000de8

08002a4c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <DMA2_Stream1_IRQHandler+0x10>)
 8002a52:	f006 f94f 	bl	8008cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000e48 	.word	0x20000e48

08002a60 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <DMA2_Stream2_IRQHandler+0x10>)
 8002a66:	f006 f945 	bl	8008cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000de8 	.word	0x20000de8

08002a74 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <DMA2_Stream3_IRQHandler+0x10>)
 8002a7a:	f006 f93b 	bl	8008cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000a4c 	.word	0x20000a4c

08002a88 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <DMA2_Stream4_IRQHandler+0x10>)
 8002a8e:	f006 f931 	bl	8008cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000aac 	.word	0x20000aac

08002a9c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <CAN2_RX0_IRQHandler+0x10>)
 8002aa2:	f005 fc87 	bl	80083b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000244 	.word	0x20000244

08002ab0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <CAN2_RX1_IRQHandler+0x10>)
 8002ab6:	f005 fc7d 	bl	80083b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000244 	.word	0x20000244

08002ac4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <OTG_FS_IRQHandler+0x10>)
 8002aca:	f006 feab 	bl	8009824 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200074a0 	.word	0x200074a0

08002ad8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <USART6_IRQHandler+0x10>)
 8002ade:	f00a fbbb 	bl	800d258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000d44 	.word	0x20000d44

08002aec <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <UART7_IRQHandler+0x10>)
 8002af2:	f00a fbb1 	bl	800d258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000cbc 	.word	0x20000cbc

08002b00 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <SPI5_IRQHandler+0x10>)
 8002b06:	f008 ff81 	bl	800ba0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200009f4 	.word	0x200009f4

08002b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <SystemInit+0x28>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <SystemInit+0x28>)
 8002b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <SystemInit+0x28>)
 8002b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b092      	sub	sp, #72	; 0x48
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
 8002b60:	615a      	str	r2, [r3, #20]
 8002b62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	2220      	movs	r2, #32
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f012 fd0a 	bl	8015584 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b70:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002b72:	4a32      	ldr	r2, [pc, #200]	; (8002c3c <MX_TIM1_Init+0xfc>)
 8002b74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8002b76:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002b78:	22a7      	movs	r2, #167	; 0xa7
 8002b7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8002b82:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b88:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b8e:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b94:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002b9a:	4827      	ldr	r0, [pc, #156]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002b9c:	f009 faa0 	bl	800c0e0 <HAL_TIM_OC_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8002ba6:	f7ff fd05 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	481f      	ldr	r0, [pc, #124]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002bba:	f00a fa1d 	bl	800cff8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002bc4:	f7ff fcf6 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be8:	2200      	movs	r2, #0
 8002bea:	4619      	mov	r1, r3
 8002bec:	4812      	ldr	r0, [pc, #72]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002bee:	f009 fce5 	bl	800c5bc <HAL_TIM_OC_ConfigChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002bf8:	f7ff fcdc 	bl	80025b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4806      	ldr	r0, [pc, #24]	; (8002c38 <MX_TIM1_Init+0xf8>)
 8002c20:	f00a fa66 	bl	800d0f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002c2a:	f7ff fcc3 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	3748      	adds	r7, #72	; 0x48
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000b54 	.word	0x20000b54
 8002c3c:	40010000 	.word	0x40010000

08002c40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c46:	f107 0320 	add.w	r3, r7, #32
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	615a      	str	r2, [r3, #20]
 8002c60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c64:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <MX_TIM4_Init+0xb0>)
 8002c66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8002c68:	4b20      	ldr	r3, [pc, #128]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c6a:	2254      	movs	r2, #84	; 0x54
 8002c6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c88:	4818      	ldr	r0, [pc, #96]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c8a:	f009 fa78 	bl	800c17e <HAL_TIM_PWM_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002c94:	f7ff fc8e 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ca0:	f107 0320 	add.w	r3, r7, #32
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4811      	ldr	r0, [pc, #68]	; (8002cec <MX_TIM4_Init+0xac>)
 8002ca8:	f00a f9a6 	bl	800cff8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002cb2:	f7ff fc7f 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb6:	2360      	movs	r3, #96	; 0x60
 8002cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4807      	ldr	r0, [pc, #28]	; (8002cec <MX_TIM4_Init+0xac>)
 8002cce:	f009 fcd1 	bl	800c674 <HAL_TIM_PWM_ConfigChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002cd8:	f7ff fc6c 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002cdc:	4803      	ldr	r0, [pc, #12]	; (8002cec <MX_TIM4_Init+0xac>)
 8002cde:	f000 f9d9 	bl	8003094 <HAL_TIM_MspPostInit>

}
 8002ce2:	bf00      	nop
 8002ce4:	3728      	adds	r7, #40	; 0x28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000b9c 	.word	0x20000b9c
 8002cf0:	40000800 	.word	0x40000800

08002cf4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfa:	f107 0320 	add.w	r3, r7, #32
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	611a      	str	r2, [r3, #16]
 8002d12:	615a      	str	r2, [r3, #20]
 8002d14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <MX_TIM5_Init+0xa4>)
 8002d18:	4a20      	ldr	r2, [pc, #128]	; (8002d9c <MX_TIM5_Init+0xa8>)
 8002d1a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <MX_TIM5_Init+0xa4>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <MX_TIM5_Init+0xa4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <MX_TIM5_Init+0xa4>)
 8002d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <MX_TIM5_Init+0xa4>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <MX_TIM5_Init+0xa4>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002d3c:	4816      	ldr	r0, [pc, #88]	; (8002d98 <MX_TIM5_Init+0xa4>)
 8002d3e:	f009 fa1e 	bl	800c17e <HAL_TIM_PWM_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002d48:	f7ff fc34 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d54:	f107 0320 	add.w	r3, r7, #32
 8002d58:	4619      	mov	r1, r3
 8002d5a:	480f      	ldr	r0, [pc, #60]	; (8002d98 <MX_TIM5_Init+0xa4>)
 8002d5c:	f00a f94c 	bl	800cff8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002d66:	f7ff fc25 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d6a:	2360      	movs	r3, #96	; 0x60
 8002d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4805      	ldr	r0, [pc, #20]	; (8002d98 <MX_TIM5_Init+0xa4>)
 8002d82:	f009 fc77 	bl	800c674 <HAL_TIM_PWM_ConfigChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002d8c:	f7ff fc12 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d90:	bf00      	nop
 8002d92:	3728      	adds	r7, #40	; 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000be4 	.word	0x20000be4
 8002d9c:	40000c00 	.word	0x40000c00

08002da0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b092      	sub	sp, #72	; 0x48
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
 8002dc0:	615a      	str	r2, [r3, #20]
 8002dc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f012 fbda 	bl	8015584 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002dd0:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002dd2:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <MX_TIM8_Init+0xfc>)
 8002dd4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002de8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002dfc:	4826      	ldr	r0, [pc, #152]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002dfe:	f009 f96f 	bl	800c0e0 <HAL_TIM_OC_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002e08:	f7ff fbd4 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481f      	ldr	r0, [pc, #124]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002e1c:	f00a f8ec 	bl	800cff8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002e26:	f7ff fbc5 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e32:	2300      	movs	r3, #0
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e36:	2300      	movs	r3, #0
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4812      	ldr	r0, [pc, #72]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002e50:	f009 fbb4 	bl	800c5bc <HAL_TIM_OC_ConfigChannel>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002e5a:	f7ff fbab 	bl	80025b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4805      	ldr	r0, [pc, #20]	; (8002e98 <MX_TIM8_Init+0xf8>)
 8002e82:	f00a f935 	bl	800d0f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002e8c:	f7ff fb92 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002e90:	bf00      	nop
 8002e92:	3748      	adds	r7, #72	; 0x48
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000c2c 	.word	0x20000c2c
 8002e9c:	40010400 	.word	0x40010400

08002ea0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	; 0x30
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea6:	f107 0320 	add.w	r3, r7, #32
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
 8002ec0:	611a      	str	r2, [r3, #16]
 8002ec2:	615a      	str	r2, [r3, #20]
 8002ec4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002ec6:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002ec8:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <MX_TIM12_Init+0xc0>)
 8002eca:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84;
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002ece:	2254      	movs	r2, #84	; 0x54
 8002ed0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed2:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8002ed8:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ede:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002eec:	481b      	ldr	r0, [pc, #108]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002eee:	f008 ffcf 	bl	800be90 <HAL_TIM_Base_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002ef8:	f7ff fb5c 	bl	80025b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f00:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002f02:	f107 0320 	add.w	r3, r7, #32
 8002f06:	4619      	mov	r1, r3
 8002f08:	4814      	ldr	r0, [pc, #80]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002f0a:	f009 fc75 	bl	800c7f8 <HAL_TIM_ConfigClockSource>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002f14:	f7ff fb4e 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002f18:	4810      	ldr	r0, [pc, #64]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002f1a:	f009 f930 	bl	800c17e <HAL_TIM_PWM_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002f24:	f7ff fb46 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f28:	2360      	movs	r3, #96	; 0x60
 8002f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4807      	ldr	r0, [pc, #28]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002f40:	f009 fb98 	bl	800c674 <HAL_TIM_PWM_ConfigChannel>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002f4a:	f7ff fb33 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002f4e:	4803      	ldr	r0, [pc, #12]	; (8002f5c <MX_TIM12_Init+0xbc>)
 8002f50:	f000 f8a0 	bl	8003094 <HAL_TIM_MspPostInit>

}
 8002f54:	bf00      	nop
 8002f56:	3730      	adds	r7, #48	; 0x30
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000c74 	.word	0x20000c74
 8002f60:	40001800 	.word	0x40001800

08002f64 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_TIM_OC_MspInit+0x70>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d116      	bne.n	8002fa4 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_TIM_OC_MspInit+0x74>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_TIM_OC_MspInit+0x74>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6453      	str	r3, [r2, #68]	; 0x44
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_TIM_OC_MspInit+0x74>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2105      	movs	r1, #5
 8002f96:	2019      	movs	r0, #25
 8002f98:	f005 fcea 	bl	8008970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f9c:	2019      	movs	r0, #25
 8002f9e:	f005 fd03 	bl	80089a8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002fa2:	e012      	b.n	8002fca <HAL_TIM_OC_MspInit+0x66>
  else if(tim_ocHandle->Instance==TIM8)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <HAL_TIM_OC_MspInit+0x78>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10d      	bne.n	8002fca <HAL_TIM_OC_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_TIM_OC_MspInit+0x74>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <HAL_TIM_OC_MspInit+0x74>)
 8002fb8:	f043 0302 	orr.w	r3, r3, #2
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_TIM_OC_MspInit+0x74>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_TIM_PWM_MspInit+0x64>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_TIM_PWM_MspInit+0x68>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a13      	ldr	r2, [pc, #76]	; (8003048 <HAL_TIM_PWM_MspInit+0x68>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_TIM_PWM_MspInit+0x68>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800300e:	e012      	b.n	8003036 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0d      	ldr	r2, [pc, #52]	; (800304c <HAL_TIM_PWM_MspInit+0x6c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10d      	bne.n	8003036 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_TIM_PWM_MspInit+0x68>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_TIM_PWM_MspInit+0x68>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_TIM_PWM_MspInit+0x68>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40000800 	.word	0x40000800
 8003048:	40023800 	.word	0x40023800
 800304c:	40000c00 	.word	0x40000c00

08003050 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <HAL_TIM_Base_MspInit+0x3c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10d      	bne.n	800307e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_TIM_Base_MspInit+0x40>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_TIM_Base_MspInit+0x40>)
 800306c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_TIM_Base_MspInit+0x40>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40001800 	.word	0x40001800
 8003090:	40023800 	.word	0x40023800

08003094 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a24      	ldr	r2, [pc, #144]	; (8003144 <HAL_TIM_MspPostInit+0xb0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11f      	bne.n	80030f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	4b23      	ldr	r3, [pc, #140]	; (8003148 <HAL_TIM_MspPostInit+0xb4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a22      	ldr	r2, [pc, #136]	; (8003148 <HAL_TIM_MspPostInit+0xb4>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_TIM_MspPostInit+0xb4>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030e4:	2302      	movs	r3, #2
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4619      	mov	r1, r3
 80030ee:	4817      	ldr	r0, [pc, #92]	; (800314c <HAL_TIM_MspPostInit+0xb8>)
 80030f0:	f006 f86a 	bl	80091c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80030f4:	e022      	b.n	800313c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a15      	ldr	r2, [pc, #84]	; (8003150 <HAL_TIM_MspPostInit+0xbc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d11d      	bne.n	800313c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_TIM_MspPostInit+0xb4>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <HAL_TIM_MspPostInit+0xb4>)
 800310a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310e:	6313      	str	r3, [r2, #48]	; 0x30
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_TIM_MspPostInit+0xb4>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800311c:	2340      	movs	r3, #64	; 0x40
 800311e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800312c:	2309      	movs	r3, #9
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4619      	mov	r1, r3
 8003136:	4807      	ldr	r0, [pc, #28]	; (8003154 <HAL_TIM_MspPostInit+0xc0>)
 8003138:	f006 f846 	bl	80091c8 <HAL_GPIO_Init>
}
 800313c:	bf00      	nop
 800313e:	3728      	adds	r7, #40	; 0x28
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40000800 	.word	0x40000800
 8003148:	40023800 	.word	0x40023800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40001800 	.word	0x40001800
 8003154:	40021c00 	.word	0x40021c00

08003158 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_UART7_Init+0x4c>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <MX_UART7_Init+0x50>)
 8003160:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <MX_UART7_Init+0x4c>)
 8003164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003168:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <MX_UART7_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <MX_UART7_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <MX_UART7_Init+0x4c>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <MX_UART7_Init+0x4c>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <MX_UART7_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <MX_UART7_Init+0x4c>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <MX_UART7_Init+0x4c>)
 8003190:	f00a f814 	bl	800d1bc <HAL_UART_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800319a:	f7ff fa0b 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000cbc 	.word	0x20000cbc
 80031a8:	40007800 	.word	0x40007800

080031ac <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <MX_USART1_UART_Init+0x4c>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <MX_USART1_UART_Init+0x50>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <MX_USART1_UART_Init+0x4c>)
 80031b8:	4a11      	ldr	r2, [pc, #68]	; (8003200 <MX_USART1_UART_Init+0x54>)
 80031ba:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <MX_USART1_UART_Init+0x4c>)
 80031be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <MX_USART1_UART_Init+0x4c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <MX_USART1_UART_Init+0x4c>)
 80031cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <MX_USART1_UART_Init+0x4c>)
 80031d4:	2204      	movs	r2, #4
 80031d6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <MX_USART1_UART_Init+0x4c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <MX_USART1_UART_Init+0x4c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031e4:	4804      	ldr	r0, [pc, #16]	; (80031f8 <MX_USART1_UART_Init+0x4c>)
 80031e6:	f009 ffe9 	bl	800d1bc <HAL_UART_Init>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80031f0:	f7ff f9e0 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000d00 	.word	0x20000d00
 80031fc:	40011000 	.word	0x40011000
 8003200:	000186a0 	.word	0x000186a0

08003204 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <MX_USART6_UART_Init+0x4c>)
 800320a:	4a12      	ldr	r2, [pc, #72]	; (8003254 <MX_USART6_UART_Init+0x50>)
 800320c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <MX_USART6_UART_Init+0x4c>)
 8003210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003214:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <MX_USART6_UART_Init+0x4c>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <MX_USART6_UART_Init+0x4c>)
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <MX_USART6_UART_Init+0x4c>)
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <MX_USART6_UART_Init+0x4c>)
 800322a:	2204      	movs	r2, #4
 800322c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <MX_USART6_UART_Init+0x4c>)
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <MX_USART6_UART_Init+0x4c>)
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800323a:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_USART6_UART_Init+0x4c>)
 800323c:	f009 ffbe 	bl	800d1bc <HAL_UART_Init>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003246:	f7ff f9b5 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000d44 	.word	0x20000d44
 8003254:	40011400 	.word	0x40011400

08003258 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08e      	sub	sp, #56	; 0x38
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7c      	ldr	r2, [pc, #496]	; (8003468 <HAL_UART_MspInit+0x210>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d164      	bne.n	8003344 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	623b      	str	r3, [r7, #32]
 800327e:	4b7b      	ldr	r3, [pc, #492]	; (800346c <HAL_UART_MspInit+0x214>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a7a      	ldr	r2, [pc, #488]	; (800346c <HAL_UART_MspInit+0x214>)
 8003284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b78      	ldr	r3, [pc, #480]	; (800346c <HAL_UART_MspInit+0x214>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003292:	623b      	str	r3, [r7, #32]
 8003294:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	4b74      	ldr	r3, [pc, #464]	; (800346c <HAL_UART_MspInit+0x214>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a73      	ldr	r2, [pc, #460]	; (800346c <HAL_UART_MspInit+0x214>)
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b71      	ldr	r3, [pc, #452]	; (800346c <HAL_UART_MspInit+0x214>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80032b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	2303      	movs	r3, #3
 80032c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80032c4:	2308      	movs	r3, #8
 80032c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032cc:	4619      	mov	r1, r3
 80032ce:	4868      	ldr	r0, [pc, #416]	; (8003470 <HAL_UART_MspInit+0x218>)
 80032d0:	f005 ff7a 	bl	80091c8 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80032d4:	4b67      	ldr	r3, [pc, #412]	; (8003474 <HAL_UART_MspInit+0x21c>)
 80032d6:	4a68      	ldr	r2, [pc, #416]	; (8003478 <HAL_UART_MspInit+0x220>)
 80032d8:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80032da:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_UART_MspInit+0x21c>)
 80032dc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80032e0:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032e2:	4b64      	ldr	r3, [pc, #400]	; (8003474 <HAL_UART_MspInit+0x21c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e8:	4b62      	ldr	r3, [pc, #392]	; (8003474 <HAL_UART_MspInit+0x21c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032ee:	4b61      	ldr	r3, [pc, #388]	; (8003474 <HAL_UART_MspInit+0x21c>)
 80032f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032f4:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f6:	4b5f      	ldr	r3, [pc, #380]	; (8003474 <HAL_UART_MspInit+0x21c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032fc:	4b5d      	ldr	r3, [pc, #372]	; (8003474 <HAL_UART_MspInit+0x21c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8003302:	4b5c      	ldr	r3, [pc, #368]	; (8003474 <HAL_UART_MspInit+0x21c>)
 8003304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003308:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800330a:	4b5a      	ldr	r3, [pc, #360]	; (8003474 <HAL_UART_MspInit+0x21c>)
 800330c:	2200      	movs	r2, #0
 800330e:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003310:	4b58      	ldr	r3, [pc, #352]	; (8003474 <HAL_UART_MspInit+0x21c>)
 8003312:	2200      	movs	r2, #0
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8003316:	4857      	ldr	r0, [pc, #348]	; (8003474 <HAL_UART_MspInit+0x21c>)
 8003318:	f005 fb54 	bl	80089c4 <HAL_DMA_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003322:	f7ff f947 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a52      	ldr	r2, [pc, #328]	; (8003474 <HAL_UART_MspInit+0x21c>)
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
 800332c:	4a51      	ldr	r2, [pc, #324]	; (8003474 <HAL_UART_MspInit+0x21c>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2105      	movs	r1, #5
 8003336:	2052      	movs	r0, #82	; 0x52
 8003338:	f005 fb1a 	bl	8008970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800333c:	2052      	movs	r0, #82	; 0x52
 800333e:	f005 fb33 	bl	80089a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003342:	e110      	b.n	8003566 <HAL_UART_MspInit+0x30e>
  else if(uartHandle->Instance==USART1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a4c      	ldr	r2, [pc, #304]	; (800347c <HAL_UART_MspInit+0x224>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f040 80a2 	bne.w	8003494 <HAL_UART_MspInit+0x23c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	4b45      	ldr	r3, [pc, #276]	; (800346c <HAL_UART_MspInit+0x214>)
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	4a44      	ldr	r2, [pc, #272]	; (800346c <HAL_UART_MspInit+0x214>)
 800335a:	f043 0310 	orr.w	r3, r3, #16
 800335e:	6453      	str	r3, [r2, #68]	; 0x44
 8003360:	4b42      	ldr	r3, [pc, #264]	; (800346c <HAL_UART_MspInit+0x214>)
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	4b3e      	ldr	r3, [pc, #248]	; (800346c <HAL_UART_MspInit+0x214>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	4a3d      	ldr	r2, [pc, #244]	; (800346c <HAL_UART_MspInit+0x214>)
 8003376:	f043 0302 	orr.w	r3, r3, #2
 800337a:	6313      	str	r3, [r2, #48]	; 0x30
 800337c:	4b3b      	ldr	r3, [pc, #236]	; (800346c <HAL_UART_MspInit+0x214>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_UART_MspInit+0x214>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	4a36      	ldr	r2, [pc, #216]	; (800346c <HAL_UART_MspInit+0x214>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6313      	str	r3, [r2, #48]	; 0x30
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_UART_MspInit+0x214>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b0:	2303      	movs	r3, #3
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033b4:	2307      	movs	r3, #7
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033bc:	4619      	mov	r1, r3
 80033be:	4830      	ldr	r0, [pc, #192]	; (8003480 <HAL_UART_MspInit+0x228>)
 80033c0:	f005 ff02 	bl	80091c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d2:	2303      	movs	r3, #3
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033d6:	2307      	movs	r3, #7
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033de:	4619      	mov	r1, r3
 80033e0:	4828      	ldr	r0, [pc, #160]	; (8003484 <HAL_UART_MspInit+0x22c>)
 80033e2:	f005 fef1 	bl	80091c8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80033e6:	4b28      	ldr	r3, [pc, #160]	; (8003488 <HAL_UART_MspInit+0x230>)
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_UART_MspInit+0x234>)
 80033ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80033ec:	4b26      	ldr	r3, [pc, #152]	; (8003488 <HAL_UART_MspInit+0x230>)
 80033ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_UART_MspInit+0x230>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033fa:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_UART_MspInit+0x230>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003400:	4b21      	ldr	r3, [pc, #132]	; (8003488 <HAL_UART_MspInit+0x230>)
 8003402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003406:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_UART_MspInit+0x230>)
 800340a:	2200      	movs	r2, #0
 800340c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800340e:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <HAL_UART_MspInit+0x230>)
 8003410:	2200      	movs	r2, #0
 8003412:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003414:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <HAL_UART_MspInit+0x230>)
 8003416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800341a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800341c:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_UART_MspInit+0x230>)
 800341e:	2200      	movs	r2, #0
 8003420:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003422:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_UART_MspInit+0x230>)
 8003424:	2200      	movs	r2, #0
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003428:	4817      	ldr	r0, [pc, #92]	; (8003488 <HAL_UART_MspInit+0x230>)
 800342a:	f005 facb 	bl	80089c4 <HAL_DMA_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8003434:	f7ff f8be 	bl	80025b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a13      	ldr	r2, [pc, #76]	; (8003488 <HAL_UART_MspInit+0x230>)
 800343c:	639a      	str	r2, [r3, #56]	; 0x38
 800343e:	4a12      	ldr	r2, [pc, #72]	; (8003488 <HAL_UART_MspInit+0x230>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003444:	2200      	movs	r2, #0
 8003446:	2105      	movs	r1, #5
 8003448:	2025      	movs	r0, #37	; 0x25
 800344a:	f005 fa91 	bl	8008970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800344e:	2025      	movs	r0, #37	; 0x25
 8003450:	f005 faaa 	bl	80089a8 <HAL_NVIC_EnableIRQ>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_UART_MspInit+0x238>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_UART_MspInit+0x238>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0210 	orr.w	r2, r2, #16
 8003462:	60da      	str	r2, [r3, #12]
}
 8003464:	e07f      	b.n	8003566 <HAL_UART_MspInit+0x30e>
 8003466:	bf00      	nop
 8003468:	40007800 	.word	0x40007800
 800346c:	40023800 	.word	0x40023800
 8003470:	40021000 	.word	0x40021000
 8003474:	20000d88 	.word	0x20000d88
 8003478:	40026058 	.word	0x40026058
 800347c:	40011000 	.word	0x40011000
 8003480:	40020400 	.word	0x40020400
 8003484:	40020000 	.word	0x40020000
 8003488:	20000de8 	.word	0x20000de8
 800348c:	40026440 	.word	0x40026440
 8003490:	20000d00 	.word	0x20000d00
  else if(uartHandle->Instance==USART6)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a35      	ldr	r2, [pc, #212]	; (8003570 <HAL_UART_MspInit+0x318>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d163      	bne.n	8003566 <HAL_UART_MspInit+0x30e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	4b34      	ldr	r3, [pc, #208]	; (8003574 <HAL_UART_MspInit+0x31c>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4a33      	ldr	r2, [pc, #204]	; (8003574 <HAL_UART_MspInit+0x31c>)
 80034a8:	f043 0320 	orr.w	r3, r3, #32
 80034ac:	6453      	str	r3, [r2, #68]	; 0x44
 80034ae:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_UART_MspInit+0x31c>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <HAL_UART_MspInit+0x31c>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4a2c      	ldr	r2, [pc, #176]	; (8003574 <HAL_UART_MspInit+0x31c>)
 80034c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ca:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_UART_MspInit+0x31c>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80034d6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e4:	2303      	movs	r3, #3
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80034e8:	2308      	movs	r3, #8
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f0:	4619      	mov	r1, r3
 80034f2:	4821      	ldr	r0, [pc, #132]	; (8003578 <HAL_UART_MspInit+0x320>)
 80034f4:	f005 fe68 	bl	80091c8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <HAL_UART_MspInit+0x324>)
 80034fa:	4a21      	ldr	r2, [pc, #132]	; (8003580 <HAL_UART_MspInit+0x328>)
 80034fc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80034fe:	4b1f      	ldr	r3, [pc, #124]	; (800357c <HAL_UART_MspInit+0x324>)
 8003500:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003504:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_UART_MspInit+0x324>)
 8003508:	2200      	movs	r2, #0
 800350a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_UART_MspInit+0x324>)
 800350e:	2200      	movs	r2, #0
 8003510:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_UART_MspInit+0x324>)
 8003514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003518:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_UART_MspInit+0x324>)
 800351c:	2200      	movs	r2, #0
 800351e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003520:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_UART_MspInit+0x324>)
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <HAL_UART_MspInit+0x324>)
 8003528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800352c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_UART_MspInit+0x324>)
 8003530:	2200      	movs	r2, #0
 8003532:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_UART_MspInit+0x324>)
 8003536:	2200      	movs	r2, #0
 8003538:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800353a:	4810      	ldr	r0, [pc, #64]	; (800357c <HAL_UART_MspInit+0x324>)
 800353c:	f005 fa42 	bl	80089c4 <HAL_DMA_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 8003546:	f7ff f835 	bl	80025b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a0b      	ldr	r2, [pc, #44]	; (800357c <HAL_UART_MspInit+0x324>)
 800354e:	639a      	str	r2, [r3, #56]	; 0x38
 8003550:	4a0a      	ldr	r2, [pc, #40]	; (800357c <HAL_UART_MspInit+0x324>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003556:	2200      	movs	r2, #0
 8003558:	2105      	movs	r1, #5
 800355a:	2047      	movs	r0, #71	; 0x47
 800355c:	f005 fa08 	bl	8008970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003560:	2047      	movs	r0, #71	; 0x47
 8003562:	f005 fa21 	bl	80089a8 <HAL_NVIC_EnableIRQ>
}
 8003566:	bf00      	nop
 8003568:	3738      	adds	r7, #56	; 0x38
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40011400 	.word	0x40011400
 8003574:	40023800 	.word	0x40023800
 8003578:	40021800 	.word	0x40021800
 800357c:	20000e48 	.word	0x20000e48
 8003580:	40026428 	.word	0x40026428

08003584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003588:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800358a:	e003      	b.n	8003594 <LoopCopyDataInit>

0800358c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800358e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003590:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003592:	3104      	adds	r1, #4

08003594 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003594:	480b      	ldr	r0, [pc, #44]	; (80035c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003598:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800359a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800359c:	d3f6      	bcc.n	800358c <CopyDataInit>
  ldr  r2, =_sbss
 800359e:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035a0:	e002      	b.n	80035a8 <LoopFillZerobss>

080035a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035a4:	f842 3b04 	str.w	r3, [r2], #4

080035a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035ac:	d3f9      	bcc.n	80035a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035ae:	f7ff fab1 	bl	8002b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035b2:	f012 f845 	bl	8015640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035b6:	f7fe ff57 	bl	8002468 <main>
  bx  lr    
 80035ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035bc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80035c0:	080179e8 	.word	0x080179e8
  ldr  r0, =_sdata
 80035c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035c8:	20000190 	.word	0x20000190
  ldr  r2, =_sbss
 80035cc:	20000190 	.word	0x20000190
  ldr  r3, = _ebss
 80035d0:	20007d0c 	.word	0x20007d0c

080035d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035d4:	e7fe      	b.n	80035d4 <ADC_IRQHandler>
	...

080035d8 <buzzing_task>:
 4, 3, 1, 8
 };
 */

//fun
void buzzing_task(void *argument) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000 / (4 * TEMPO);
 80035e0:	4b8b      	ldr	r3, [pc, #556]	; (8003810 <buzzing_task+0x238>)
 80035e2:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 80035e4:	4b8b      	ldr	r3, [pc, #556]	; (8003814 <buzzing_task+0x23c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f107 010d 	add.w	r1, r7, #13
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295
 80035f0:	4618      	mov	r0, r3
 80035f2:	f00e ff6d 	bl	80124d0 <xQueueReceive>
		switch (buzzing_type) {
 80035f6:	7b7b      	ldrb	r3, [r7, #13]
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d8f3      	bhi.n	80035e4 <buzzing_task+0xc>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <buzzing_task+0x2c>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003619 	.word	0x08003619
 8003608:	080036bf 	.word	0x080036bf
 800360c:	0800370d 	.word	0x0800370d
 8003610:	080037a9 	.word	0x080037a9
 8003614:	0800375b 	.word	0x0800375b
		case song:

			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8003618:	2300      	movs	r3, #0
 800361a:	82fb      	strh	r3, [r7, #22]
 800361c:	e04b      	b.n	80036b6 <buzzing_task+0xde>
				last_wake_time = xTaskGetTickCount();
 800361e:	f00f fd21 	bl	8013064 <xTaskGetTickCount>
 8003622:	4603      	mov	r3, r0
 8003624:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 8003626:	8afb      	ldrh	r3, [r7, #22]
 8003628:	4a7b      	ldr	r2, [pc, #492]	; (8003818 <buzzing_task+0x240>)
 800362a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fd fca6 	bl	8000f80 <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 8003634:	8afb      	ldrh	r3, [r7, #22]
 8003636:	4a79      	ldr	r2, [pc, #484]	; (800381c <buzzing_task+0x244>)
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	ed93 7a00 	vldr	s14, [r3]
 8003640:	edd7 7a04 	vldr	s15, [r7, #16]
 8003644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364c:	ee17 3a90 	vmov	r3, s15
 8003650:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time * 0.95);
 8003652:	89fb      	ldrh	r3, [r7, #14]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff1d 	bl	8000494 <__aeabi_i2d>
 800365a:	a369      	add	r3, pc, #420	; (adr r3, 8003800 <buzzing_task+0x228>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc ff82 	bl	8000568 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	f7fd fa54 	bl	8000b18 <__aeabi_d2uiz>
 8003670:	4602      	mov	r2, r0
 8003672:	f107 0308 	add.w	r3, r7, #8
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f00f fb25 	bl	8012cc8 <vTaskDelayUntil>
				buzzer(0);
 800367e:	2000      	movs	r0, #0
 8003680:	f7fd fc7e 	bl	8000f80 <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time * 0.05);
 8003684:	89fb      	ldrh	r3, [r7, #14]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff04 	bl	8000494 <__aeabi_i2d>
 800368c:	a35e      	add	r3, pc, #376	; (adr r3, 8003808 <buzzing_task+0x230>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f7fc ff69 	bl	8000568 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	f7fd fa3b 	bl	8000b18 <__aeabi_d2uiz>
 80036a2:	4602      	mov	r2, r0
 80036a4:	f107 0308 	add.w	r3, r7, #8
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f00f fb0c 	bl	8012cc8 <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 80036b0:	8afb      	ldrh	r3, [r7, #22]
 80036b2:	3301      	adds	r3, #1
 80036b4:	82fb      	strh	r3, [r7, #22]
 80036b6:	8afb      	ldrh	r3, [r7, #22]
 80036b8:	2b7c      	cmp	r3, #124	; 0x7c
 80036ba:	d9b0      	bls.n	800361e <buzzing_task+0x46>

			}
			break;
 80036bc:	e09c      	b.n	80037f8 <buzzing_task+0x220>
		case ok:
			last_wake_time = xTaskGetTickCount();
 80036be:	f00f fcd1 	bl	8013064 <xTaskGetTickCount>
 80036c2:	4603      	mov	r3, r0
 80036c4:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 80036c6:	f44f 705c 	mov.w	r0, #880	; 0x370
 80036ca:	f7fd fc59 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 400);
 80036ce:	f107 0308 	add.w	r3, r7, #8
 80036d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80036d6:	4618      	mov	r0, r3
 80036d8:	f00f faf6 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(0);
 80036dc:	2000      	movs	r0, #0
 80036de:	f7fd fc4f 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 100);
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	2164      	movs	r1, #100	; 0x64
 80036e8:	4618      	mov	r0, r3
 80036ea:	f00f faed 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(BUZZER_LOW);
 80036ee:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80036f2:	f7fd fc45 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 400);
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80036fe:	4618      	mov	r0, r3
 8003700:	f00f fae2 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(0);
 8003704:	2000      	movs	r0, #0
 8003706:	f7fd fc3b 	bl	8000f80 <buzzer>
			break;
 800370a:	e075      	b.n	80037f8 <buzzing_task+0x220>
		case not_ok:
			last_wake_time = xTaskGetTickCount();
 800370c:	f00f fcaa 	bl	8013064 <xTaskGetTickCount>
 8003710:	4603      	mov	r3, r0
 8003712:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 8003714:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8003718:	f7fd fc32 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 400);
 800371c:	f107 0308 	add.w	r3, r7, #8
 8003720:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003724:	4618      	mov	r0, r3
 8003726:	f00f facf 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(0);
 800372a:	2000      	movs	r0, #0
 800372c:	f7fd fc28 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 100);
 8003730:	f107 0308 	add.w	r3, r7, #8
 8003734:	2164      	movs	r1, #100	; 0x64
 8003736:	4618      	mov	r0, r3
 8003738:	f00f fac6 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(BUZZER_HIGH);
 800373c:	f44f 705c 	mov.w	r0, #880	; 0x370
 8003740:	f7fd fc1e 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 400);
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800374c:	4618      	mov	r0, r3
 800374e:	f00f fabb 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(0);
 8003752:	2000      	movs	r0, #0
 8003754:	f7fd fc14 	bl	8000f80 <buzzer>
			break;
 8003758:	e04e      	b.n	80037f8 <buzzing_task+0x220>
		case control_control:
			last_wake_time = xTaskGetTickCount();
 800375a:	f00f fc83 	bl	8013064 <xTaskGetTickCount>
 800375e:	4603      	mov	r3, r0
 8003760:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 8003762:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8003766:	f7fd fc0b 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 300);
 800376a:	f107 0308 	add.w	r3, r7, #8
 800376e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003772:	4618      	mov	r0, r3
 8003774:	f00f faa8 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(0);
 8003778:	2000      	movs	r0, #0
 800377a:	f7fd fc01 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 100);
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	2164      	movs	r1, #100	; 0x64
 8003784:	4618      	mov	r0, r3
 8003786:	f00f fa9f 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(BUZZER_LOW);
 800378a:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 800378e:	f7fd fbf7 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 300);
 8003792:	f107 0308 	add.w	r3, r7, #8
 8003796:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800379a:	4618      	mov	r0, r3
 800379c:	f00f fa94 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(0);
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7fd fbed 	bl	8000f80 <buzzer>
			break;
 80037a6:	e027      	b.n	80037f8 <buzzing_task+0x220>
		case control_keyboard:
			last_wake_time = xTaskGetTickCount();
 80037a8:	f00f fc5c 	bl	8013064 <xTaskGetTickCount>
 80037ac:	4603      	mov	r3, r0
 80037ae:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 80037b0:	f44f 705c 	mov.w	r0, #880	; 0x370
 80037b4:	f7fd fbe4 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 300);
 80037b8:	f107 0308 	add.w	r3, r7, #8
 80037bc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80037c0:	4618      	mov	r0, r3
 80037c2:	f00f fa81 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(0);
 80037c6:	2000      	movs	r0, #0
 80037c8:	f7fd fbda 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 100);
 80037cc:	f107 0308 	add.w	r3, r7, #8
 80037d0:	2164      	movs	r1, #100	; 0x64
 80037d2:	4618      	mov	r0, r3
 80037d4:	f00f fa78 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(BUZZER_HIGH);
 80037d8:	f44f 705c 	mov.w	r0, #880	; 0x370
 80037dc:	f7fd fbd0 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 300);
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80037e8:	4618      	mov	r0, r3
 80037ea:	f00f fa6d 	bl	8012cc8 <vTaskDelayUntil>
			buzzer(0);
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7fd fbc6 	bl	8000f80 <buzzer>
			break;
 80037f4:	bf00      	nop
 80037f6:	e6f5      	b.n	80035e4 <buzzing_task+0xc>
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 80037f8:	e6f4      	b.n	80035e4 <buzzing_task+0xc>
 80037fa:	bf00      	nop
 80037fc:	f3af 8000 	nop.w
 8003800:	66666666 	.word	0x66666666
 8003804:	3fee6666 	.word	0x3fee6666
 8003808:	9999999a 	.word	0x9999999a
 800380c:	3fa99999 	.word	0x3fa99999
 8003810:	42fa0000 	.word	0x42fa0000
 8003814:	200002a4 	.word	0x200002a4
 8003818:	08017494 	.word	0x08017494
 800381c:	08017590 	.word	0x08017590

08003820 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	if (hcan->Instance == CAN1) {
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1f      	ldr	r2, [pc, #124]	; (80038ac <can_ISR+0x8c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d118      	bne.n	8003864 <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 8003832:	210e      	movs	r1, #14
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f004 fd96 	bl	8008366 <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 800383a:	f107 020c 	add.w	r2, r7, #12
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	4619      	mov	r1, r3
 8003844:	481a      	ldr	r0, [pc, #104]	; (80038b0 <can_ISR+0x90>)
 8003846:	f7fd fbe1 	bl	800100c <can1_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId, rx_buffer);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f107 020c 	add.w	r2, r7, #12
 8003852:	4619      	mov	r1, r3
 8003854:	4817      	ldr	r0, [pc, #92]	; (80038b4 <can_ISR+0x94>)
 8003856:	f000 f833 	bl	80038c0 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 800385a:	210e      	movs	r1, #14
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f004 fd5c 	bl	800831a <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 8003862:	e01e      	b.n	80038a2 <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <can_ISR+0x98>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d119      	bne.n	80038a2 <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 800386e:	2170      	movs	r1, #112	; 0x70
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f004 fd78 	bl	8008366 <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8003876:	f107 020c 	add.w	r2, r7, #12
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	4619      	mov	r1, r3
 8003880:	480e      	ldr	r0, [pc, #56]	; (80038bc <can_ISR+0x9c>)
 8003882:	f7fd fbd4 	bl	800102e <can2_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId + 12, rx_buffer);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	b29b      	uxth	r3, r3
 800388a:	330c      	adds	r3, #12
 800388c:	b29b      	uxth	r3, r3
 800388e:	f107 020c 	add.w	r2, r7, #12
 8003892:	4619      	mov	r1, r3
 8003894:	4807      	ldr	r0, [pc, #28]	; (80038b4 <can_ISR+0x94>)
 8003896:	f000 f813 	bl	80038c0 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 800389a:	2170      	movs	r1, #112	; 0x70
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f004 fd3c 	bl	800831a <HAL_CAN_ActivateNotification>
}
 80038a2:	bf00      	nop
 80038a4:	3730      	adds	r7, #48	; 0x30
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40006400 	.word	0x40006400
 80038b0:	2000021c 	.word	0x2000021c
 80038b4:	20000ea8 	.word	0x20000ea8
 80038b8:	40006800 	.word	0x40006800
 80038bc:	20000244 	.word	0x20000244

080038c0 <convert_raw_can_data>:
 * in the struct for the motor.
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id, uint8_t *rx_buffer) {
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	460b      	mov	r3, r1
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	817b      	strh	r3, [r7, #10]
	BaseType_t xHigherPriorityTaskWoken, xResult;
	xHigherPriorityTaskWoken = pdFALSE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
	uint16_t idnum = motor_id - 0x201;
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80038d8:	837b      	strh	r3, [r7, #26]
	if (idnum > 24)
 80038da:	8b7b      	ldrh	r3, [r7, #26]
 80038dc:	2b18      	cmp	r3, #24
 80038de:	f200 815f 	bhi.w	8003ba0 <convert_raw_can_data+0x2e0>
	{
		return;
	}
	if (can_motor_data[idnum].motor_type > 0) {
 80038e2:	8b7b      	ldrh	r3, [r7, #26]
 80038e4:	22a8      	movs	r2, #168	; 0xa8
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	789b      	ldrb	r3, [r3, #2]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8156 	beq.w	8003ba2 <convert_raw_can_data+0x2e2>
		can_motor_data[idnum].id = motor_id;
 80038f6:	8b7b      	ldrh	r3, [r7, #26]
 80038f8:	22a8      	movs	r2, #168	; 0xa8
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	897a      	ldrh	r2, [r7, #10]
 8003904:	801a      	strh	r2, [r3, #0]
		can_motor_data[idnum].raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	b219      	sxth	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3301      	adds	r3, #1
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	b21a      	sxth	r2, r3
 8003916:	8b7b      	ldrh	r3, [r7, #26]
 8003918:	20a8      	movs	r0, #168	; 0xa8
 800391a:	fb00 f303 	mul.w	r3, r0, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	4403      	add	r3, r0
 8003922:	430a      	orrs	r2, r1
 8003924:	b212      	sxth	r2, r2
 8003926:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm					=(rx_buffer[2] << 8) | rx_buffer[3];
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3302      	adds	r3, #2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	b21a      	sxth	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3303      	adds	r3, #3
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b21b      	sxth	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	833b      	strh	r3, [r7, #24]
		can_motor_data[idnum].raw_data.rpm = can_motor_data[idnum].raw_data.rpm * SPEED_LPF + temp_rpm * (1-SPEED_LPF);
 800393e:	8b7b      	ldrh	r3, [r7, #26]
 8003940:	22a8      	movs	r2, #168	; 0xa8
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	8b3a      	ldrh	r2, [r7, #24]
 800394c:	811a      	strh	r2, [r3, #8]
		can_motor_data[idnum].raw_data.torque = (rx_buffer[4] << 8) | rx_buffer[5];
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	b219      	sxth	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3305      	adds	r3, #5
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	b21a      	sxth	r2, r3
 8003960:	8b7b      	ldrh	r3, [r7, #26]
 8003962:	20a8      	movs	r0, #168	; 0xa8
 8003964:	fb00 f303 	mul.w	r3, r0, r3
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	4403      	add	r3, r0
 800396c:	430a      	orrs	r2, r1
 800396e:	b212      	sxth	r2, r2
 8003970:	815a      	strh	r2, [r3, #10]
		can_motor_data[idnum].raw_data.temp = (rx_buffer[6]);
 8003972:	8b7b      	ldrh	r3, [r7, #26]
 8003974:	22a8      	movs	r2, #168	; 0xa8
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4413      	add	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	7992      	ldrb	r2, [r2, #6]
 8003982:	731a      	strb	r2, [r3, #12]
		can_motor_data[idnum].last_time[1] = can_motor_data[idnum].last_time[0];
 8003984:	8b7b      	ldrh	r3, [r7, #26]
 8003986:	22a8      	movs	r2, #168	; 0xa8
 8003988:	fb02 f303 	mul.w	r3, r2, r3
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	441a      	add	r2, r3
 8003990:	8b7b      	ldrh	r3, [r7, #26]
 8003992:	21a8      	movs	r1, #168	; 0xa8
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	68f9      	ldr	r1, [r7, #12]
 800399a:	440b      	add	r3, r1
 800399c:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80039a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		can_motor_data[idnum].last_time[0] = get_microseconds();
 80039a4:	8b7b      	ldrh	r3, [r7, #26]
 80039a6:	22a8      	movs	r2, #168	; 0xa8
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	18d4      	adds	r4, r2, r3
 80039b0:	f7fe f916 	bl	8001be0 <get_microseconds>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		switch (can_motor_data[idnum].motor_type) {
 80039ba:	8b7b      	ldrh	r3, [r7, #26]
 80039bc:	22a8      	movs	r2, #168	; 0xa8
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	789b      	ldrb	r3, [r3, #2]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	2b07      	cmp	r3, #7
 80039cc:	d84f      	bhi.n	8003a6e <convert_raw_can_data+0x1ae>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <convert_raw_can_data+0x114>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039f5 	.word	0x080039f5
 80039d8:	08003a6f 	.word	0x08003a6f
 80039dc:	08003a6f 	.word	0x08003a6f
 80039e0:	08003a6f 	.word	0x08003a6f
 80039e4:	08003a6f 	.word	0x08003a6f
 80039e8:	08003a19 	.word	0x08003a19
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a19 	.word	0x08003a19
		case TYPE_GM6020:
			angle_offset(&can_motor_data[idnum].raw_data, &can_motor_data[idnum].angle_data);
 80039f4:	8b7b      	ldrh	r3, [r7, #26]
 80039f6:	22a8      	movs	r2, #168	; 0xa8
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	1d18      	adds	r0, r3, #4
 8003a02:	8b7b      	ldrh	r3, [r7, #26]
 8003a04:	22a8      	movs	r2, #168	; 0xa8
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3378      	adds	r3, #120	; 0x78
 8003a10:	4619      	mov	r1, r3
 8003a12:	f000 f8d3 	bl	8003bbc <angle_offset>
			break;
 8003a16:	e02b      	b.n	8003a70 <convert_raw_can_data+0x1b0>
//					can_motor_data[idnum].last_time);
			break;
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&can_motor_data[idnum].raw_data, &can_motor_data[idnum].angle_data,
 8003a18:	8b7b      	ldrh	r3, [r7, #26]
 8003a1a:	22a8      	movs	r2, #168	; 0xa8
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	1d18      	adds	r0, r3, #4
 8003a26:	8b7b      	ldrh	r3, [r7, #26]
 8003a28:	22a8      	movs	r2, #168	; 0xa8
 8003a2a:	fb02 f303 	mul.w	r3, r2, r3
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	f103 0178 	add.w	r1, r3, #120	; 0x78
					can_motor_data[idnum].last_time);
 8003a36:	8b7b      	ldrh	r3, [r7, #26]
 8003a38:	22a8      	movs	r2, #168	; 0xa8
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	33a0      	adds	r3, #160	; 0xa0
			motor_calc_odometry(&can_motor_data[idnum].raw_data, &can_motor_data[idnum].angle_data,
 8003a44:	461a      	mov	r2, r3
 8003a46:	f000 f96f 	bl	8003d28 <motor_calc_odometry>
			angle_offset(&can_motor_data[idnum].raw_data, &can_motor_data[idnum].angle_data);
 8003a4a:	8b7b      	ldrh	r3, [r7, #26]
 8003a4c:	22a8      	movs	r2, #168	; 0xa8
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	1d18      	adds	r0, r3, #4
 8003a58:	8b7b      	ldrh	r3, [r7, #26]
 8003a5a:	22a8      	movs	r2, #168	; 0xa8
 8003a5c:	fb02 f303 	mul.w	r3, r2, r3
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	3378      	adds	r3, #120	; 0x78
 8003a66:	4619      	mov	r1, r3
 8003a68:	f000 f8a8 	bl	8003bbc <angle_offset>
			break;
 8003a6c:	e000      	b.n	8003a70 <convert_raw_can_data+0x1b0>
		default:
			break;
 8003a6e:	bf00      	nop

		}

		switch (idnum + 1) {
 8003a70:	8b7b      	ldrh	r3, [r7, #26]
 8003a72:	3301      	adds	r3, #1
 8003a74:	3b05      	subs	r3, #5
 8003a76:	2b11      	cmp	r3, #17
 8003a78:	f200 8082 	bhi.w	8003b80 <convert_raw_can_data+0x2c0>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <convert_raw_can_data+0x1c4>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003b1d 	.word	0x08003b1d
 8003a88:	08003b31 	.word	0x08003b31
 8003a8c:	08003b45 	.word	0x08003b45
 8003a90:	08003b81 	.word	0x08003b81
 8003a94:	08003b59 	.word	0x08003b59
 8003a98:	08003b81 	.word	0x08003b81
 8003a9c:	08003b81 	.word	0x08003b81
 8003aa0:	08003b81 	.word	0x08003b81
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	08003ae1 	.word	0x08003ae1
 8003aac:	08003af5 	.word	0x08003af5
 8003ab0:	08003b09 	.word	0x08003b09
 8003ab4:	08003b81 	.word	0x08003b81
 8003ab8:	08003b81 	.word	0x08003b81
 8003abc:	08003b81 	.word	0x08003b81
 8003ac0:	08003b81 	.word	0x08003b81
 8003ac4:	08003b81 	.word	0x08003b81
 8003ac8:	08003b6d 	.word	0x08003b6d
				#ifndef CHASSIS_MCU
						case FR_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 8003acc:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <convert_raw_can_data+0x2e8>)
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	4835      	ldr	r0, [pc, #212]	; (8003bac <convert_raw_can_data+0x2ec>)
 8003ad8:	f010 fc08 	bl	80142ec <xTimerPendFunctionCallFromISR>
 8003adc:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003ade:	e050      	b.n	8003b82 <convert_raw_can_data+0x2c2>
						case FL_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 8003ae0:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <convert_raw_can_data+0x2e8>)
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	2204      	movs	r2, #4
 8003aea:	4830      	ldr	r0, [pc, #192]	; (8003bac <convert_raw_can_data+0x2ec>)
 8003aec:	f010 fbfe 	bl	80142ec <xTimerPendFunctionCallFromISR>
 8003af0:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003af2:	e046      	b.n	8003b82 <convert_raw_can_data+0x2c2>
						case BL_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0010,
 8003af4:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <convert_raw_can_data+0x2e8>)
 8003af6:	6819      	ldr	r1, [r3, #0]
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	2202      	movs	r2, #2
 8003afe:	482b      	ldr	r0, [pc, #172]	; (8003bac <convert_raw_can_data+0x2ec>)
 8003b00:	f010 fbf4 	bl	80142ec <xTimerPendFunctionCallFromISR>
 8003b04:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b06:	e03c      	b.n	8003b82 <convert_raw_can_data+0x2c2>
						case BR_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
 8003b08:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <convert_raw_can_data+0x2e8>)
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	f107 0314 	add.w	r3, r7, #20
 8003b10:	2201      	movs	r2, #1
 8003b12:	4826      	ldr	r0, [pc, #152]	; (8003bac <convert_raw_can_data+0x2ec>)
 8003b14:	f010 fbea 	bl	80142ec <xTimerPendFunctionCallFromISR>
 8003b18:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b1a:	e032      	b.n	8003b82 <convert_raw_can_data+0x2c2>
				#endif
						case LFRICTION_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <convert_raw_can_data+0x2f0>)
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	2202      	movs	r2, #2
 8003b26:	4821      	ldr	r0, [pc, #132]	; (8003bac <convert_raw_can_data+0x2ec>)
 8003b28:	f010 fbe0 	bl	80142ec <xTimerPendFunctionCallFromISR>
 8003b2c:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b2e:	e028      	b.n	8003b82 <convert_raw_can_data+0x2c2>
						case RFRICTION_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 8003b30:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <convert_raw_can_data+0x2f0>)
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	2201      	movs	r2, #1
 8003b3a:	481c      	ldr	r0, [pc, #112]	; (8003bac <convert_raw_can_data+0x2ec>)
 8003b3c:	f010 fbd6 	bl	80142ec <xTimerPendFunctionCallFromISR>
 8003b40:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b42:	e01e      	b.n	8003b82 <convert_raw_can_data+0x2c2>
						case FEEDER_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <convert_raw_can_data+0x2f0>)
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	4817      	ldr	r0, [pc, #92]	; (8003bac <convert_raw_can_data+0x2ec>)
 8003b50:	f010 fbcc 	bl	80142ec <xTimerPendFunctionCallFromISR>
 8003b54:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b56:	e014      	b.n	8003b82 <convert_raw_can_data+0x2c2>
						case PITCH_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 8003b58:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <convert_raw_can_data+0x2f4>)
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	2201      	movs	r2, #1
 8003b62:	4812      	ldr	r0, [pc, #72]	; (8003bac <convert_raw_can_data+0x2ec>)
 8003b64:	f010 fbc2 	bl	80142ec <xTimerPendFunctionCallFromISR>
 8003b68:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b6a:	e00a      	b.n	8003b82 <convert_raw_can_data+0x2c2>
						case YAW_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <convert_raw_can_data+0x2f4>)
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	2202      	movs	r2, #2
 8003b76:	480d      	ldr	r0, [pc, #52]	; (8003bac <convert_raw_can_data+0x2ec>)
 8003b78:	f010 fbb8 	bl	80142ec <xTimerPendFunctionCallFromISR>
 8003b7c:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b7e:	e000      	b.n	8003b82 <convert_raw_can_data+0x2c2>
						default:
							//error handler
							break;
 8003b80:	bf00      	nop
						}
						if (xResult != pdFAIL) {
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <convert_raw_can_data+0x2e2>
							portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <convert_raw_can_data+0x2e2>
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <convert_raw_can_data+0x2f8>)
 8003b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	e000      	b.n	8003ba2 <convert_raw_can_data+0x2e2>
		return;
 8003ba0:	bf00      	nop
						}
					} else {
						//error handler
					}

}
 8003ba2:	3724      	adds	r7, #36	; 0x24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd90      	pop	{r4, r7, pc}
 8003ba8:	2000028c 	.word	0x2000028c
 8003bac:	08011d63 	.word	0x08011d63
 8003bb0:	20000290 	.word	0x20000290
 8003bb4:	20000288 	.word	0x20000288
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]

	if (angle_data->gearbox_ratio > 0) {
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	edd3 7a06 	vldr	s15, [r3, #24]
 8003bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	dd64      	ble.n	8003ca4 <angle_offset+0xe8>
		temp_ang = angle_data->ticks - angle_data->center_ang;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	60fb      	str	r3, [r7, #12]
		if (temp_ang > (4096 * angle_data->gearbox_ratio)) {
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	edd3 7a06 	vldr	s15, [r3, #24]
 8003bf6:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003d14 <angle_offset+0x158>
 8003bfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c06:	dd13      	ble.n	8003c30 <angle_offset+0x74>
			temp_ang -= (8192 * angle_data->gearbox_ratio);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c18:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8003d18 <angle_offset+0x15c>
 8003c1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c28:	ee17 3a90 	vmov	r3, s15
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	e023      	b.n	8003c78 <angle_offset+0xbc>
		} else if (temp_ang < (-4096 * angle_data->gearbox_ratio)) {
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c40:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003d1c <angle_offset+0x160>
 8003c44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	d512      	bpl.n	8003c78 <angle_offset+0xbc>
			temp_ang += 8192 * angle_data->gearbox_ratio;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c62:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003d18 <angle_offset+0x15c>
 8003c66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c72:	ee17 3a90 	vmov	r3, s15
 8003c76:	60fb      	str	r3, [r7, #12]
		}
		angle_data->adj_ang = (float) temp_ang * PI / (8192 * angle_data->gearbox_ratio);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c82:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003d20 <angle_offset+0x164>
 8003c86:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c90:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003d18 <angle_offset+0x15c>
 8003c94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	edc3 7a07 	vstr	s15, [r3, #28]
		} else if (temp_ang < -4096) {
			temp_ang += 8192;
		}
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
	}
}
 8003ca2:	e031      	b.n	8003d08 <angle_offset+0x14c>
		temp_ang = (int32_t) (motor_data->angle[0]) - angle_data->center_ang;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003caa:	461a      	mov	r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	60fb      	str	r3, [r7, #12]
		if (temp_ang > 4096) {
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cba:	dd04      	ble.n	8003cc6 <angle_offset+0x10a>
			temp_ang -= 8192;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e007      	b.n	8003cd6 <angle_offset+0x11a>
		} else if (temp_ang < -4096) {
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8003ccc:	da03      	bge.n	8003cd6 <angle_offset+0x11a>
			temp_ang += 8192;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003cd4:	60fb      	str	r3, [r7, #12]
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	edd3 7a07 	vldr	s15, [r3, #28]
 8003cdc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003d24 <angle_offset+0x168>
 8003ce0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cee:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003d20 <angle_offset+0x164>
 8003cf2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003cf6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8003d14 <angle_offset+0x158>
 8003cfa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	45800000 	.word	0x45800000
 8003d18:	46000000 	.word	0x46000000
 8003d1c:	c5800000 	.word	0xc5800000
 8003d20:	40490fdb 	.word	0x40490fdb
 8003d24:	00000000 	.word	0x00000000

08003d28 <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data,
		angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	; 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
	int8_t int_round_passed = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	77fb      	strb	r3, [r7, #31]
	if (feedback_times[0] - feedback_times[1] >= 1) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d02e      	beq.n	8003da4 <motor_calc_odometry+0x7c>
		float rounds_passed = (((float)(feedback_times[0] - feedback_times[1]) * motor_data->rpm)/(60 * TIMER_FREQ));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d6c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003ee0 <motor_calc_odometry+0x1b8>
 8003d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d74:	edc7 7a06 	vstr	s15, [r7, #24]
		if (fabs(rounds_passed) >= 1) {
 8003d78:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d7c:	eef0 7ae7 	vabs.f32	s15, s15
 8003d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	db08      	blt.n	8003da0 <motor_calc_odometry+0x78>
			int_round_passed = rounds_passed;
 8003d8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d96:	edc7 7a00 	vstr	s15, [r7]
 8003d9a:	783b      	ldrb	r3, [r7, #0]
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e001      	b.n	8003da4 <motor_calc_odometry+0x7c>
		} else {
			int_round_passed = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]
		}
	}
	int16_t abs_angle_diff;
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	83bb      	strh	r3, [r7, #28]
	if (abs_angle_diff > 4096) {
 8003dba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc2:	dd05      	ble.n	8003dd0 <motor_calc_odometry+0xa8>
		abs_angle_diff -= 8192;
 8003dc4:	8bbb      	ldrh	r3, [r7, #28]
 8003dc6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	83bb      	strh	r3, [r7, #28]
 8003dce:	e009      	b.n	8003de4 <motor_calc_odometry+0xbc>
	} else if (abs_angle_diff < -4096) {
 8003dd0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003dd4:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8003dd8:	da04      	bge.n	8003de4 <motor_calc_odometry+0xbc>
		abs_angle_diff += 8192;
 8003dda:	8bbb      	ldrh	r3, [r7, #28]
 8003ddc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	83bb      	strh	r3, [r7, #28]
	 } else {
	 abs_angle_diff = (8192-motor_data->angle[0]) - motor_data->angle[1];
	 }
	 }
	 */
	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	edd3 7a06 	vldr	s15, [r3, #24]
 8003dea:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003ee4 <motor_calc_odometry+0x1bc>
 8003dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df6:	ee17 3a90 	vmov	r3, s15
 8003dfa:	82fb      	strh	r3, [r7, #22]
	angle_data->ticks += (int_round_passed * 8192) + abs_angle_diff;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e04:	0359      	lsls	r1, r3, #13
 8003e06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003e0a:	440b      	add	r3, r1
 8003e0c:	441a      	add	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	601a      	str	r2, [r3, #0]
	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003e24:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e28:	8afb      	ldrh	r3, [r7, #22]
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	edc3 7a08 	vstr	s15, [r3, #32]
	angle_data->adj_ang = (float) (angle_data->ticks % gear_ticks ) * 2*PI/gear_ticks;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	8afa      	ldrh	r2, [r7, #22]
 8003e42:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e46:	fb01 f202 	mul.w	r2, r1, r2
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e58:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003ee8 <motor_calc_odometry+0x1c0>
 8003e5c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e60:	8afb      	ldrh	r3, [r7, #22]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_data->adj_ang = (angle_data->adj_ang > PI) ? (angle_data->adj_ang - 2*PI) : (angle_data->adj_ang < -PI) ? angle_data->adj_ang+2*PI : angle_data->adj_ang;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e7a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003ee8 <motor_calc_odometry+0x1c0>
 8003e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e86:	dd07      	ble.n	8003e98 <motor_calc_odometry+0x170>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e8e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003eec <motor_calc_odometry+0x1c4>
 8003e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e96:	e014      	b.n	8003ec2 <motor_calc_odometry+0x19a>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e9e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003ef0 <motor_calc_odometry+0x1c8>
 8003ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eaa:	d507      	bpl.n	8003ebc <motor_calc_odometry+0x194>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	edd3 7a07 	vldr	s15, [r3, #28]
 8003eb2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003eec <motor_calc_odometry+0x1c4>
 8003eb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eba:	e002      	b.n	8003ec2 <motor_calc_odometry+0x19a>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	edd3 7a07 	vldr	s15, [r3, #28]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	edc3 7a07 	vstr	s15, [r3, #28]
	motor_data->angle[1] = motor_data->angle[0];
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	805a      	strh	r2, [r3, #2]
}
 8003ed2:	bf00      	nop
 8003ed4:	3724      	adds	r7, #36	; 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	49127c00 	.word	0x49127c00
 8003ee4:	46000000 	.word	0x46000000
 8003ee8:	40490fdb 	.word	0x40490fdb
 8003eec:	40c90fdb 	.word	0x40c90fdb
 8003ef0:	c0490fdb 	.word	0xc0490fdb

08003ef4 <aimbot_hlf_ISR>:
uint8_t aimbot_start_frame;
/**
 * ISR function for receiving Xavier data
 *
 */
void aimbot_hlf_ISR(DMA_HandleTypeDef *hdma) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	uint8_t time_gap = (HAL_GetTick() - aimbot_buffer.last_time > XAVIER_MSG_DELAY) ? 1 : 0;
 8003efc:	f003 fdd0 	bl	8007aa0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <aimbot_hlf_ISR+0x70>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b1e      	cmp	r3, #30
 8003f0a:	bf8c      	ite	hi
 8003f0c:	2301      	movhi	r3, #1
 8003f0e:	2300      	movls	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	73fb      	strb	r3, [r7, #15]
	append_buffer(&aimbot_buffer, aimbot_dma_buffer[0]);
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <aimbot_hlf_ISR+0x74>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4812      	ldr	r0, [pc, #72]	; (8003f64 <aimbot_hlf_ISR+0x70>)
 8003f1c:	f7fc ffea 	bl	8000ef4 <append_buffer>
	if (time_gap) {
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <aimbot_hlf_ISR+0x3e>
		aimbot_start_frame = 255;
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <aimbot_hlf_ISR+0x78>)
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	701a      	strb	r2, [r3, #0]
		aimbot_buffer.stored_bytes = 0;
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <aimbot_hlf_ISR+0x70>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	765a      	strb	r2, [r3, #25]
	}
	if (aimbot_dma_buffer[0] == AIMBOT_FRAME_HEADER) {
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <aimbot_hlf_ISR+0x74>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b5a      	cmp	r3, #90	; 0x5a
 8003f38:	d108      	bne.n	8003f4c <aimbot_hlf_ISR+0x58>
		aimbot_start_frame = aimbot_buffer.curr_byte-1;
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <aimbot_hlf_ISR+0x70>)
 8003f3c:	7e1b      	ldrb	r3, [r3, #24]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <aimbot_hlf_ISR+0x78>)
 8003f44:	701a      	strb	r2, [r3, #0]
		aimbot_buffer.stored_bytes = 1;
 8003f46:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <aimbot_hlf_ISR+0x70>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	765a      	strb	r2, [r3, #25]
	}
	if (aimbot_buffer.stored_bytes >= AIMBOT_MSG_SIZE) {
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <aimbot_hlf_ISR+0x70>)
 8003f4e:	7e5b      	ldrb	r3, [r3, #25]
 8003f50:	2b07      	cmp	r3, #7
 8003f52:	d902      	bls.n	8003f5a <aimbot_hlf_ISR+0x66>
		process_aimbot_data(aimbot_proc_buffer);
 8003f54:	4806      	ldr	r0, [pc, #24]	; (8003f70 <aimbot_hlf_ISR+0x7c>)
 8003f56:	f000 f84d 	bl	8003ff4 <process_aimbot_data>
	}
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20001f38 	.word	0x20001f38
 8003f68:	20001f2c 	.word	0x20001f2c
 8003f6c:	20001f5c 	.word	0x20001f5c
 8003f70:	20001f30 	.word	0x20001f30

08003f74 <aimbot_ISR>:

void aimbot_ISR(DMA_HandleTypeDef *hdma) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	uint8_t time_gap = (HAL_GetTick() - aimbot_buffer.last_time > XAVIER_MSG_DELAY) ? 1 : 0;
 8003f7c:	f003 fd90 	bl	8007aa0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <aimbot_ISR+0x70>)
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b1e      	cmp	r3, #30
 8003f8a:	bf8c      	ite	hi
 8003f8c:	2301      	movhi	r3, #1
 8003f8e:	2300      	movls	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	73fb      	strb	r3, [r7, #15]
	append_buffer(&aimbot_buffer, aimbot_dma_buffer[1]);
 8003f94:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <aimbot_ISR+0x74>)
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4812      	ldr	r0, [pc, #72]	; (8003fe4 <aimbot_ISR+0x70>)
 8003f9c:	f7fc ffaa 	bl	8000ef4 <append_buffer>
	if (time_gap) {
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <aimbot_ISR+0x3e>
		aimbot_start_frame = 255;
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <aimbot_ISR+0x78>)
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	701a      	strb	r2, [r3, #0]
		aimbot_buffer.stored_bytes = 0;
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <aimbot_ISR+0x70>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	765a      	strb	r2, [r3, #25]
	}
	if (aimbot_dma_buffer[1] == AIMBOT_FRAME_HEADER) {
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <aimbot_ISR+0x74>)
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	2b5a      	cmp	r3, #90	; 0x5a
 8003fb8:	d108      	bne.n	8003fcc <aimbot_ISR+0x58>
			aimbot_start_frame = aimbot_buffer.curr_byte-1;
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <aimbot_ISR+0x70>)
 8003fbc:	7e1b      	ldrb	r3, [r3, #24]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <aimbot_ISR+0x78>)
 8003fc4:	701a      	strb	r2, [r3, #0]
			aimbot_buffer.stored_bytes = 1;
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <aimbot_ISR+0x70>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	765a      	strb	r2, [r3, #25]
		}
	if (aimbot_buffer.stored_bytes >= AIMBOT_MSG_SIZE) {
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <aimbot_ISR+0x70>)
 8003fce:	7e5b      	ldrb	r3, [r3, #25]
 8003fd0:	2b07      	cmp	r3, #7
 8003fd2:	d902      	bls.n	8003fda <aimbot_ISR+0x66>
		process_aimbot_data(aimbot_proc_buffer);
 8003fd4:	4806      	ldr	r0, [pc, #24]	; (8003ff0 <aimbot_ISR+0x7c>)
 8003fd6:	f000 f80d 	bl	8003ff4 <process_aimbot_data>
	}
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20001f38 	.word	0x20001f38
 8003fe8:	20001f2c 	.word	0x20001f2c
 8003fec:	20001f5c 	.word	0x20001f5c
 8003ff0:	20001f30 	.word	0x20001f30

08003ff4 <process_aimbot_data>:
//


void process_aimbot_data()
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
	if (aimbot_buffer.stored_bytes >= AIMBOT_MSG_SIZE) {
 8003ffa:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <process_aimbot_data+0x134>)
 8003ffc:	7e5b      	ldrb	r3, [r3, #25]
 8003ffe:	2b07      	cmp	r3, #7
 8004000:	d93c      	bls.n	800407c <process_aimbot_data+0x88>
		if (aimbot_buffer.curr_byte > aimbot_start_frame) {
 8004002:	4b49      	ldr	r3, [pc, #292]	; (8004128 <process_aimbot_data+0x134>)
 8004004:	7e1a      	ldrb	r2, [r3, #24]
 8004006:	4b49      	ldr	r3, [pc, #292]	; (800412c <process_aimbot_data+0x138>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d915      	bls.n	800403a <process_aimbot_data+0x46>
			if(aimbot_buffer.curr_byte - aimbot_start_frame >= AIMBOT_MSG_SIZE) {
 800400e:	4b46      	ldr	r3, [pc, #280]	; (8004128 <process_aimbot_data+0x134>)
 8004010:	7e1b      	ldrb	r3, [r3, #24]
 8004012:	461a      	mov	r2, r3
 8004014:	4b45      	ldr	r3, [pc, #276]	; (800412c <process_aimbot_data+0x138>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b07      	cmp	r3, #7
 800401c:	dd09      	ble.n	8004032 <process_aimbot_data+0x3e>
			memcpy(aimbot_proc_buffer, aimbot_buffer.buffer + aimbot_start_frame, AIMBOT_MSG_SIZE);
 800401e:	4b43      	ldr	r3, [pc, #268]	; (800412c <process_aimbot_data+0x138>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	4b40      	ldr	r3, [pc, #256]	; (8004128 <process_aimbot_data+0x134>)
 8004026:	441a      	add	r2, r3
 8004028:	4b41      	ldr	r3, [pc, #260]	; (8004130 <process_aimbot_data+0x13c>)
 800402a:	6810      	ldr	r0, [r2, #0]
 800402c:	6851      	ldr	r1, [r2, #4]
 800402e:	c303      	stmia	r3!, {r0, r1}
 8004030:	e028      	b.n	8004084 <process_aimbot_data+0x90>
			} else {
				aimbot_buffer.stored_bytes = 0;
 8004032:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <process_aimbot_data+0x134>)
 8004034:	2200      	movs	r2, #0
 8004036:	765a      	strb	r2, [r3, #25]
				return;
 8004038:	e072      	b.n	8004120 <process_aimbot_data+0x12c>
			}
		} else {
			uint8_t data_offset = BUFFER_SIZE - aimbot_start_frame;
 800403a:	4b3c      	ldr	r3, [pc, #240]	; (800412c <process_aimbot_data+0x138>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	f1c3 0318 	rsb	r3, r3, #24
 8004042:	71fb      	strb	r3, [r7, #7]
			if (data_offset >= AIMBOT_MSG_SIZE) {
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	2b07      	cmp	r3, #7
 8004048:	d903      	bls.n	8004052 <process_aimbot_data+0x5e>
				aimbot_buffer.stored_bytes = 0;
 800404a:	4b37      	ldr	r3, [pc, #220]	; (8004128 <process_aimbot_data+0x134>)
 800404c:	2200      	movs	r2, #0
 800404e:	765a      	strb	r2, [r3, #25]
				return;
 8004050:	e066      	b.n	8004120 <process_aimbot_data+0x12c>
			}
			memcpy(aimbot_proc_buffer, aimbot_buffer.buffer+aimbot_start_frame, data_offset);
 8004052:	4b36      	ldr	r3, [pc, #216]	; (800412c <process_aimbot_data+0x138>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	4b33      	ldr	r3, [pc, #204]	; (8004128 <process_aimbot_data+0x134>)
 800405a:	4413      	add	r3, r2
 800405c:	79fa      	ldrb	r2, [r7, #7]
 800405e:	4619      	mov	r1, r3
 8004060:	4833      	ldr	r0, [pc, #204]	; (8004130 <process_aimbot_data+0x13c>)
 8004062:	f011 fb13 	bl	801568c <memcpy>
			memcpy(aimbot_proc_buffer + data_offset, aimbot_buffer.buffer, AIMBOT_MSG_SIZE - data_offset);
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	4a31      	ldr	r2, [pc, #196]	; (8004130 <process_aimbot_data+0x13c>)
 800406a:	1898      	adds	r0, r3, r2
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	f1c3 0308 	rsb	r3, r3, #8
 8004072:	461a      	mov	r2, r3
 8004074:	492c      	ldr	r1, [pc, #176]	; (8004128 <process_aimbot_data+0x134>)
 8004076:	f011 fb09 	bl	801568c <memcpy>
 800407a:	e003      	b.n	8004084 <process_aimbot_data+0x90>
		}
	} else {
		aimbot_buffer.stored_bytes = 0;
 800407c:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <process_aimbot_data+0x134>)
 800407e:	2200      	movs	r2, #0
 8004080:	765a      	strb	r2, [r3, #25]
		return;
 8004082:	e04d      	b.n	8004120 <process_aimbot_data+0x12c>
	}
	aimbot_data.frame_header = aimbot_proc_buffer[0];
 8004084:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <process_aimbot_data+0x13c>)
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <process_aimbot_data+0x140>)
 800408a:	701a      	strb	r2, [r3, #0]
	aimbot_data.x_pos = ((aimbot_proc_buffer[2] << 8) | aimbot_proc_buffer[3]);
 800408c:	4b28      	ldr	r3, [pc, #160]	; (8004130 <process_aimbot_data+0x13c>)
 800408e:	789b      	ldrb	r3, [r3, #2]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	b21a      	sxth	r2, r3
 8004094:	4b26      	ldr	r3, [pc, #152]	; (8004130 <process_aimbot_data+0x13c>)
 8004096:	78db      	ldrb	r3, [r3, #3]
 8004098:	b21b      	sxth	r3, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	b21a      	sxth	r2, r3
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <process_aimbot_data+0x140>)
 80040a0:	809a      	strh	r2, [r3, #4]
	aimbot_data.y_pos = (aimbot_proc_buffer[4] << 8) | aimbot_proc_buffer[5];
 80040a2:	4b23      	ldr	r3, [pc, #140]	; (8004130 <process_aimbot_data+0x13c>)
 80040a4:	791b      	ldrb	r3, [r3, #4]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	b21a      	sxth	r2, r3
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <process_aimbot_data+0x13c>)
 80040ac:	795b      	ldrb	r3, [r3, #5]
 80040ae:	b21b      	sxth	r3, r3
 80040b0:	4313      	orrs	r3, r2
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <process_aimbot_data+0x140>)
 80040b6:	805a      	strh	r2, [r3, #2]
	aimbot_data.end_check = aimbot_proc_buffer[7];
 80040b8:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <process_aimbot_data+0x13c>)
 80040ba:	79da      	ldrb	r2, [r3, #7]
 80040bc:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <process_aimbot_data+0x140>)
 80040be:	741a      	strb	r2, [r3, #16]
	aimbot_buffer.stored_bytes = 0;
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <process_aimbot_data+0x134>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	765a      	strb	r2, [r3, #25]
	if (aimbot_data.frame_header != AIMBOT_FRAME_HEADER || aimbot_data.end_check != AIMBOT_FRAME_END) {
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <process_aimbot_data+0x140>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b5a      	cmp	r3, #90	; 0x5a
 80040cc:	d103      	bne.n	80040d6 <process_aimbot_data+0xe2>
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <process_aimbot_data+0x140>)
 80040d0:	7c1b      	ldrb	r3, [r3, #16]
 80040d2:	2b69      	cmp	r3, #105	; 0x69
 80040d4:	d006      	beq.n	80040e4 <process_aimbot_data+0xf0>
		aimbot_data.y_pos = 0;
 80040d6:	4b17      	ldr	r3, [pc, #92]	; (8004134 <process_aimbot_data+0x140>)
 80040d8:	2200      	movs	r2, #0
 80040da:	805a      	strh	r2, [r3, #2]
		aimbot_data.x_pos = 0;
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <process_aimbot_data+0x140>)
 80040de:	2200      	movs	r2, #0
 80040e0:	809a      	strh	r2, [r3, #4]
 80040e2:	e019      	b.n	8004118 <process_aimbot_data+0x124>
	} else {
		aimbot_data.y_pos -= 500;
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <process_aimbot_data+0x140>)
 80040e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	b21a      	sxth	r2, r3
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <process_aimbot_data+0x140>)
 80040f6:	805a      	strh	r2, [r3, #2]
		aimbot_data.x_pos -= 500;
 80040f8:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <process_aimbot_data+0x140>)
 80040fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8004104:	b29b      	uxth	r3, r3
 8004106:	b21a      	sxth	r2, r3
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <process_aimbot_data+0x140>)
 800410a:	809a      	strh	r2, [r3, #4]
		aimbot_data.last_time = HAL_GetTick();
 800410c:	f003 fcc8 	bl	8007aa0 <HAL_GetTick>
 8004110:	4603      	mov	r3, r0
 8004112:	4a08      	ldr	r2, [pc, #32]	; (8004134 <process_aimbot_data+0x140>)
 8004114:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	}
	status_led(1, on_led);
 8004118:	2100      	movs	r1, #0
 800411a:	2001      	movs	r0, #1
 800411c:	f7fd fcca 	bl	8001ab4 <status_led>
}
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20001f38 	.word	0x20001f38
 800412c:	20001f5c 	.word	0x20001f5c
 8004130:	20001f30 	.word	0x20001f30
 8004134:	20001e9c 	.word	0x20001e9c

08004138 <dbus_remote_ISR>:


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 8004140:	4b7e      	ldr	r3, [pc, #504]	; (800433c <dbus_remote_ISR+0x204>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b21a      	sxth	r2, r3
 8004146:	4b7d      	ldr	r3, [pc, #500]	; (800433c <dbus_remote_ISR+0x204>)
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	b21b      	sxth	r3, r3
 800414e:	4313      	orrs	r3, r2
 8004150:	b21b      	sxth	r3, r3
 8004152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004156:	b21a      	sxth	r2, r3
 8004158:	4b79      	ldr	r3, [pc, #484]	; (8004340 <dbus_remote_ISR+0x208>)
 800415a:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 800415c:	4b78      	ldr	r3, [pc, #480]	; (8004340 <dbus_remote_ISR+0x208>)
 800415e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004168:	b29b      	uxth	r3, r3
 800416a:	b21a      	sxth	r2, r3
 800416c:	4b74      	ldr	r3, [pc, #464]	; (8004340 <dbus_remote_ISR+0x208>)
 800416e:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8004170:	4b72      	ldr	r3, [pc, #456]	; (800433c <dbus_remote_ISR+0x204>)
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	b21a      	sxth	r2, r3
 800417a:	4b70      	ldr	r3, [pc, #448]	; (800433c <dbus_remote_ISR+0x204>)
 800417c:	789b      	ldrb	r3, [r3, #2]
 800417e:	015b      	lsls	r3, r3, #5
 8004180:	b21b      	sxth	r3, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	b21b      	sxth	r3, r3
 8004186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800418a:	b21a      	sxth	r2, r3
 800418c:	4b6c      	ldr	r3, [pc, #432]	; (8004340 <dbus_remote_ISR+0x208>)
 800418e:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 8004190:	4b6b      	ldr	r3, [pc, #428]	; (8004340 <dbus_remote_ISR+0x208>)
 8004192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800419c:	b29b      	uxth	r3, r3
 800419e:	b21a      	sxth	r2, r3
 80041a0:	4b67      	ldr	r3, [pc, #412]	; (8004340 <dbus_remote_ISR+0x208>)
 80041a2:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 80041a4:	4b65      	ldr	r3, [pc, #404]	; (800433c <dbus_remote_ISR+0x204>)
 80041a6:	789b      	ldrb	r3, [r3, #2]
 80041a8:	099b      	lsrs	r3, r3, #6
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	b21a      	sxth	r2, r3
 80041ae:	4b63      	ldr	r3, [pc, #396]	; (800433c <dbus_remote_ISR+0x204>)
 80041b0:	78db      	ldrb	r3, [r3, #3]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	b21b      	sxth	r3, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 80041ba:	4b60      	ldr	r3, [pc, #384]	; (800433c <dbus_remote_ISR+0x204>)
 80041bc:	791b      	ldrb	r3, [r3, #4]
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	b21b      	sxth	r3, r3
 80041c2:	4313      	orrs	r3, r2
 80041c4:	b21b      	sxth	r3, r3
 80041c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ca:	b21a      	sxth	r2, r3
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 80041cc:	4b5c      	ldr	r3, [pc, #368]	; (8004340 <dbus_remote_ISR+0x208>)
 80041ce:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 80041d0:	4b5b      	ldr	r3, [pc, #364]	; (8004340 <dbus_remote_ISR+0x208>)
 80041d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80041dc:	b29b      	uxth	r3, r3
 80041de:	b21a      	sxth	r2, r3
 80041e0:	4b57      	ldr	r3, [pc, #348]	; (8004340 <dbus_remote_ISR+0x208>)
 80041e2:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 80041e4:	4b55      	ldr	r3, [pc, #340]	; (800433c <dbus_remote_ISR+0x204>)
 80041e6:	791b      	ldrb	r3, [r3, #4]
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	b21a      	sxth	r2, r3
 80041ee:	4b53      	ldr	r3, [pc, #332]	; (800433c <dbus_remote_ISR+0x204>)
 80041f0:	795b      	ldrb	r3, [r3, #5]
 80041f2:	01db      	lsls	r3, r3, #7
 80041f4:	b21b      	sxth	r3, r3
 80041f6:	4313      	orrs	r3, r2
 80041f8:	b21b      	sxth	r3, r3
 80041fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041fe:	b21a      	sxth	r2, r3
 8004200:	4b4f      	ldr	r3, [pc, #316]	; (8004340 <dbus_remote_ISR+0x208>)
 8004202:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 8004204:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <dbus_remote_ISR+0x208>)
 8004206:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004210:	b29b      	uxth	r3, r3
 8004212:	b21a      	sxth	r2, r3
 8004214:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <dbus_remote_ISR+0x208>)
 8004216:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 8004218:	4b48      	ldr	r3, [pc, #288]	; (800433c <dbus_remote_ISR+0x204>)
 800421a:	795b      	ldrb	r3, [r3, #5]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	b2db      	uxtb	r3, r3
 8004220:	109b      	asrs	r3, r3, #2
 8004222:	b25b      	sxtb	r3, r3
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	b25a      	sxtb	r2, r3
 800422a:	4b45      	ldr	r3, [pc, #276]	; (8004340 <dbus_remote_ISR+0x208>)
 800422c:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 800422e:	4b43      	ldr	r3, [pc, #268]	; (800433c <dbus_remote_ISR+0x204>)
 8004230:	795b      	ldrb	r3, [r3, #5]
 8004232:	091b      	lsrs	r3, r3, #4
 8004234:	b2db      	uxtb	r3, r3
 8004236:	b25b      	sxtb	r3, r3
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	b25a      	sxtb	r2, r3
 800423e:	4b40      	ldr	r3, [pc, #256]	; (8004340 <dbus_remote_ISR+0x208>)
 8004240:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 8004242:	4b3e      	ldr	r3, [pc, #248]	; (800433c <dbus_remote_ISR+0x204>)
 8004244:	799b      	ldrb	r3, [r3, #6]
 8004246:	b21a      	sxth	r2, r3
 8004248:	4b3c      	ldr	r3, [pc, #240]	; (800433c <dbus_remote_ISR+0x204>)
 800424a:	79db      	ldrb	r3, [r3, #7]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	b21b      	sxth	r3, r3
 8004250:	4313      	orrs	r3, r2
 8004252:	b21a      	sxth	r2, r3
 8004254:	4b3a      	ldr	r3, [pc, #232]	; (8004340 <dbus_remote_ISR+0x208>)
 8004256:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 8004258:	4b38      	ldr	r3, [pc, #224]	; (800433c <dbus_remote_ISR+0x204>)
 800425a:	7a1b      	ldrb	r3, [r3, #8]
 800425c:	b21a      	sxth	r2, r3
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <dbus_remote_ISR+0x204>)
 8004260:	7a5b      	ldrb	r3, [r3, #9]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	b21b      	sxth	r3, r3
 8004266:	4313      	orrs	r3, r2
 8004268:	b21a      	sxth	r2, r3
 800426a:	4b35      	ldr	r3, [pc, #212]	; (8004340 <dbus_remote_ISR+0x208>)
 800426c:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 800426e:	4b33      	ldr	r3, [pc, #204]	; (800433c <dbus_remote_ISR+0x204>)
 8004270:	7a9b      	ldrb	r3, [r3, #10]
 8004272:	b21a      	sxth	r2, r3
 8004274:	4b31      	ldr	r3, [pc, #196]	; (800433c <dbus_remote_ISR+0x204>)
 8004276:	7adb      	ldrb	r3, [r3, #11]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	b21b      	sxth	r3, r3
 800427c:	4313      	orrs	r3, r2
 800427e:	b21a      	sxth	r2, r3
 8004280:	4b2f      	ldr	r3, [pc, #188]	; (8004340 <dbus_remote_ISR+0x208>)
 8004282:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8004284:	4b2d      	ldr	r3, [pc, #180]	; (800433c <dbus_remote_ISR+0x204>)
 8004286:	7b1b      	ldrb	r3, [r3, #12]
 8004288:	b25a      	sxtb	r2, r3
 800428a:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <dbus_remote_ISR+0x208>)
 800428c:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 800428e:	4b2b      	ldr	r3, [pc, #172]	; (800433c <dbus_remote_ISR+0x204>)
 8004290:	7b5b      	ldrb	r3, [r3, #13]
 8004292:	b25a      	sxtb	r2, r3
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <dbus_remote_ISR+0x208>)
 8004296:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 8004298:	4b28      	ldr	r3, [pc, #160]	; (800433c <dbus_remote_ISR+0x204>)
 800429a:	7b9b      	ldrb	r3, [r3, #14]
 800429c:	b29a      	uxth	r2, r3
 800429e:	4b28      	ldr	r3, [pc, #160]	; (8004340 <dbus_remote_ISR+0x208>)
 80042a0:	835a      	strh	r2, [r3, #26]
	remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 80042a2:	4b26      	ldr	r3, [pc, #152]	; (800433c <dbus_remote_ISR+0x204>)
 80042a4:	7c1b      	ldrb	r3, [r3, #16]
 80042a6:	b21a      	sxth	r2, r3
 80042a8:	4b24      	ldr	r3, [pc, #144]	; (800433c <dbus_remote_ISR+0x204>)
 80042aa:	7c5b      	ldrb	r3, [r3, #17]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	b21b      	sxth	r3, r3
 80042b0:	4313      	orrs	r3, r2
 80042b2:	b21a      	sxth	r2, r3
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <dbus_remote_ISR+0x208>)
 80042b6:	839a      	strh	r2, [r3, #28]
	remote_cmd.side_dial -= JOYSTICK_OFFSET;
 80042b8:	4b21      	ldr	r3, [pc, #132]	; (8004340 <dbus_remote_ISR+0x208>)
 80042ba:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	b21a      	sxth	r2, r3
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <dbus_remote_ISR+0x208>)
 80042ca:	839a      	strh	r2, [r3, #28]
	remote_cmd.last_time = HAL_GetTick();
 80042cc:	f003 fbe8 	bl	8007aa0 <HAL_GetTick>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <dbus_remote_ISR+0x208>)
 80042d4:	6213      	str	r3, [r2, #32]
	if ((remote_cmd.keyboard_keys & KEY_OFFSET_Q) && (remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT)
 80042d6:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <dbus_remote_ISR+0x208>)
 80042d8:	8b5b      	ldrh	r3, [r3, #26]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d012      	beq.n	8004308 <dbus_remote_ISR+0x1d0>
 80042e2:	4b17      	ldr	r3, [pc, #92]	; (8004340 <dbus_remote_ISR+0x208>)
 80042e4:	8b5b      	ldrh	r3, [r3, #26]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <dbus_remote_ISR+0x1d0>
			&& (remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)) {
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <dbus_remote_ISR+0x208>)
 80042f0:	8b5b      	ldrh	r3, [r3, #26]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d006      	beq.n	8004308 <dbus_remote_ISR+0x1d0>
		control_mode = 1 - control_mode;
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <dbus_remote_ISR+0x20c>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	f1c3 0301 	rsb	r3, r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <dbus_remote_ISR+0x20c>)
 8004306:	701a      	strb	r2, [r3, #0]
	}

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <dbus_remote_ISR+0x210>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f107 020c 	add.w	r2, r7, #12
 8004314:	4611      	mov	r1, r2
 8004316:	4618      	mov	r0, r3
 8004318:	f00f fba0 	bl	8013a5c <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <dbus_remote_ISR+0x1fa>
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <dbus_remote_ISR+0x214>)
 8004324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	f3bf 8f6f 	isb	sy
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	200001ac 	.word	0x200001ac
 8004340:	20001e68 	.word	0x20001e68
 8004344:	20001f24 	.word	0x20001f24
 8004348:	20000274 	.word	0x20000274
 800434c:	e000ed04 	.word	0xe000ed04

08004350 <control_input_task>:

void control_input_task(void *argument) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	control_reset();
 8004358:	f000 f84e 	bl	80043f8 <control_reset>
	buffer_init(&aimbot_buffer);
 800435c:	4821      	ldr	r0, [pc, #132]	; (80043e4 <control_input_task+0x94>)
 800435e:	f7fc fdf7 	bl	8000f50 <buffer_init>
	xavier_usart_start(aimbot_dma_buffer, 2);
 8004362:	2102      	movs	r1, #2
 8004364:	4820      	ldr	r0, [pc, #128]	; (80043e8 <control_input_task+0x98>)
 8004366:	f7fd fc47 	bl	8001bf8 <xavier_usart_start>

	dbus_remote_start(remote_raw_data);
 800436a:	4820      	ldr	r0, [pc, #128]	; (80043ec <control_input_task+0x9c>)
 800436c:	f7fc fec6 	bl	80010fc <dbus_remote_start>
	while (1) {
		uint8_t rc_check = ulTaskNotifyTake(pdTRUE, 500);
 8004370:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004374:	2001      	movs	r0, #1
 8004376:	f00f fb25 	bl	80139c4 <ulTaskNotifyTake>
 800437a:	4603      	mov	r3, r0
 800437c:	73fb      	strb	r3, [r7, #15]
		if (rc_check) {
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d023      	beq.n	80043cc <control_input_task+0x7c>
			status_led(1, on_led);
 8004384:	2100      	movs	r1, #0
 8004386:	2001      	movs	r0, #1
 8004388:	f7fd fb94 	bl	8001ab4 <status_led>
			start_time = xTaskGetTickCount();
 800438c:	f00e fe6a 	bl	8013064 <xTaskGetTickCount>
 8004390:	4603      	mov	r3, r0
 8004392:	60bb      	str	r3, [r7, #8]
			if (remote_cmd.right_switch == all_off) {
 8004394:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <control_input_task+0xa0>)
 8004396:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10d      	bne.n	80043ba <control_input_task+0x6a>
				kill_can();
 800439e:	f002 fdb1 	bl	8006f04 <kill_can>
				control_reset();
 80043a2:	f000 f829 	bl	80043f8 <control_reset>
				safety_toggle = 0;
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <control_input_task+0xa4>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
				control_mode_change(remote_cmd.side_dial);
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <control_input_task+0xa0>)
 80043ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f848 	bl	8004448 <control_mode_change>
 80043b8:	e003      	b.n	80043c2 <control_input_task+0x72>
			} else {
				laser_on();
 80043ba:	f7fc ff0f 	bl	80011dc <laser_on>
				//			referee_compensation();
				chassis_control_input();
 80043be:	f000 f8b1 	bl	8004524 <chassis_control_input>
			}
			status_led(1, off_led);
 80043c2:	2101      	movs	r1, #1
 80043c4:	2001      	movs	r0, #1
 80043c6:	f7fd fb75 	bl	8001ab4 <status_led>
 80043ca:	e003      	b.n	80043d4 <control_input_task+0x84>
			if (remote_cmd.left_switch == aimbot_enable) {
			} else {

			}
		} else {
			kill_can();
 80043cc:	f002 fd9a 	bl	8006f04 <kill_can>
			control_reset();
 80043d0:	f000 f812 	bl	80043f8 <control_reset>

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f00e fc74 	bl	8012cc8 <vTaskDelayUntil>
	while (1) {
 80043e0:	e7c6      	b.n	8004370 <control_input_task+0x20>
 80043e2:	bf00      	nop
 80043e4:	20001f38 	.word	0x20001f38
 80043e8:	20001f2c 	.word	0x20001f2c
 80043ec:	200001ac 	.word	0x200001ac
 80043f0:	20001e68 	.word	0x20001e68
 80043f4:	20000004 	.word	0x20000004

080043f8 <control_reset>:
	}
	osThreadTerminate(NULL);
}

void control_reset() {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <control_reset+0x44>)
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <control_reset+0x44>)
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <control_reset+0x44>)
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <control_reset+0x44>)
 8004416:	2200      	movs	r2, #0
 8004418:	731a      	strb	r2, [r3, #12]
	laser_off();
 800441a:	f7fc feeb 	bl	80011f4 <laser_off>
	aimbot_data.x_offset = 0;
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <control_reset+0x48>)
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c
	aimbot_data.y_offset = 0;
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <control_reset+0x48>)
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	spinspin_mode = 0;
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <control_reset+0x4c>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20001e8c 	.word	0x20001e8c
 8004440:	20001e9c 	.word	0x20001e9c
 8004444:	20001f28 	.word	0x20001f28

08004448 <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	80fb      	strh	r3, [r7, #6]
	static uint8_t mode_change_status;
	static uint32_t last_trig_time;
	uint8_t temp_msg;
	if (control_mode != 1) {
 8004452:	4b30      	ldr	r3, [pc, #192]	; (8004514 <control_mode_change+0xcc>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d028      	beq.n	80044ac <control_mode_change+0x64>
		if (left_dial_input > 330) {
 800445a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800445e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8004462:	dd1a      	ble.n	800449a <control_mode_change+0x52>
			if (mode_change_status == 2) {
 8004464:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <control_mode_change+0xd0>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d14f      	bne.n	800450c <control_mode_change+0xc4>
				if (HAL_GetTick() - last_trig_time > 1000) {
 800446c:	f003 fb18 	bl	8007aa0 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <control_mode_change+0xd4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447c:	d946      	bls.n	800450c <control_mode_change+0xc4>
					control_mode = 1;
 800447e:	4b25      	ldr	r3, [pc, #148]	; (8004514 <control_mode_change+0xcc>)
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 8004484:	2303      	movs	r3, #3
 8004486:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <control_mode_change+0xd8>)
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	f107 010f 	add.w	r1, r7, #15
 8004490:	2300      	movs	r3, #0
 8004492:	2200      	movs	r2, #0
 8004494:	f00d fe82 	bl	801219c <xQueueGenericSend>
			}
		}
	} else {
		mode_change_status = 0;
	}
}
 8004498:	e038      	b.n	800450c <control_mode_change+0xc4>
			mode_change_status = 2;
 800449a:	4b1f      	ldr	r3, [pc, #124]	; (8004518 <control_mode_change+0xd0>)
 800449c:	2202      	movs	r2, #2
 800449e:	701a      	strb	r2, [r3, #0]
			last_trig_time = HAL_GetTick();
 80044a0:	f003 fafe 	bl	8007aa0 <HAL_GetTick>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4a1d      	ldr	r2, [pc, #116]	; (800451c <control_mode_change+0xd4>)
 80044a8:	6013      	str	r3, [r2, #0]
}
 80044aa:	e02f      	b.n	800450c <control_mode_change+0xc4>
	} else if (control_mode != 0) {
 80044ac:	4b19      	ldr	r3, [pc, #100]	; (8004514 <control_mode_change+0xcc>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d028      	beq.n	8004506 <control_mode_change+0xbe>
		if (left_dial_input < -330) {
 80044b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044b8:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80044bc:	da26      	bge.n	800450c <control_mode_change+0xc4>
			if (mode_change_status == 1) {
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <control_mode_change+0xd0>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d116      	bne.n	80044f4 <control_mode_change+0xac>
				if (HAL_GetTick() - last_trig_time > 1000) {
 80044c6:	f003 faeb 	bl	8007aa0 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <control_mode_change+0xd4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044d6:	d919      	bls.n	800450c <control_mode_change+0xc4>
					control_mode = 0;
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <control_mode_change+0xcc>)
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 80044de:	2304      	movs	r3, #4
 80044e0:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <control_mode_change+0xd8>)
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	f107 010f 	add.w	r1, r7, #15
 80044ea:	2300      	movs	r3, #0
 80044ec:	2200      	movs	r2, #0
 80044ee:	f00d fe55 	bl	801219c <xQueueGenericSend>
}
 80044f2:	e00b      	b.n	800450c <control_mode_change+0xc4>
				mode_change_status = 1;
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <control_mode_change+0xd0>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
				last_trig_time = HAL_GetTick();
 80044fa:	f003 fad1 	bl	8007aa0 <HAL_GetTick>
 80044fe:	4603      	mov	r3, r0
 8004500:	4a06      	ldr	r2, [pc, #24]	; (800451c <control_mode_change+0xd4>)
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	e002      	b.n	800450c <control_mode_change+0xc4>
		mode_change_status = 0;
 8004506:	4b04      	ldr	r3, [pc, #16]	; (8004518 <control_mode_change+0xd0>)
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20001f24 	.word	0x20001f24
 8004518:	20001f5d 	.word	0x20001f5d
 800451c:	20001f60 	.word	0x20001f60
 8004520:	200002a4 	.word	0x200002a4

08004524 <chassis_control_input>:


void chassis_control_input() {
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
	float forward_input =0;
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	607b      	str	r3, [r7, #4]
	float yaw_input = 0;
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	603b      	str	r3, [r7, #0]
	if (safety_toggle || remote_cmd.right_switch != all_on) {
 8004536:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <chassis_control_input+0x90>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <chassis_control_input+0x24>
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <chassis_control_input+0x94>)
 8004540:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d003      	beq.n	8004550 <chassis_control_input+0x2c>
		chassis_ctrl_data.enabled = 0;
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <chassis_control_input+0x98>)
 800454a:	2200      	movs	r2, #0
 800454c:	731a      	strb	r2, [r3, #12]
			//rotation matrix of the initial vectorrrr wow MA1513 is relevant?!
			chassis_ctrl_data.forward =forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 800454e:	e02b      	b.n	80045a8 <chassis_control_input+0x84>
		chassis_ctrl_data.enabled = 1;
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <chassis_control_input+0x98>)
 8004552:	2201      	movs	r2, #1
 8004554:	731a      	strb	r2, [r3, #12]
		if (remote_cmd.right_switch == all_on) {
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <chassis_control_input+0x94>)
 8004558:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d123      	bne.n	80045a8 <chassis_control_input+0x84>
			if (control_mode == 1) {
 8004560:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <chassis_control_input+0x9c>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d019      	beq.n	800459c <chassis_control_input+0x78>
				forward_input = (float) remote_cmd.left_y / RC_LIMITS;
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <chassis_control_input+0x94>)
 800456a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004576:	eddf 6a13 	vldr	s13, [pc, #76]	; 80045c4 <chassis_control_input+0xa0>
 800457a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800457e:	edc7 7a01 	vstr	s15, [r7, #4]
				yaw_input = (float) remote_cmd.left_x / RC_LIMITS;
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <chassis_control_input+0x94>)
 8004584:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004590:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80045c4 <chassis_control_input+0xa0>
 8004594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004598:	edc7 7a00 	vstr	s15, [r7]
			chassis_ctrl_data.forward =forward_input;
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <chassis_control_input+0x98>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 80045a2:	4a06      	ldr	r2, [pc, #24]	; (80045bc <chassis_control_input+0x98>)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6093      	str	r3, [r2, #8]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	20000004 	.word	0x20000004
 80045b8:	20001e68 	.word	0x20001e68
 80045bc:	20001e8c 	.word	0x20001e8c
 80045c0:	20001f24 	.word	0x20001f24
 80045c4:	44250000 	.word	0x44250000

080045c8 <imu_proc_task_notif>:
static uint32_t last_proc_times[2];
static uint8_t update_flag = 0;
static uint8_t rtos_started = 0;


void imu_proc_task_notif() {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <imu_proc_task_notif+0x3c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <imu_proc_task_notif+0x40>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	1d3a      	adds	r2, r7, #4
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f00f fa3b 	bl	8013a5c <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <imu_proc_task_notif+0x34>
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <imu_proc_task_notif+0x44>)
 80045ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	f3bf 8f6f 	isb	sy
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20001fe4 	.word	0x20001fe4
 8004608:	20000280 	.word	0x20000280
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 8004610:	b590      	push	{r4, r7, lr}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	463c      	mov	r4, r7
 8004618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gyro_proc_data.gx = gyro_data.gx;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4a12      	ldr	r2, [pc, #72]	; (8004668 <gyro_data_ready+0x58>)
 8004620:	6013      	str	r3, [r2, #0]
	gyro_proc_data.gy = gyro_data.gy;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a10      	ldr	r2, [pc, #64]	; (8004668 <gyro_data_ready+0x58>)
 8004626:	6053      	str	r3, [r2, #4]
	gyro_proc_data.gz = gyro_data.gz;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4a0f      	ldr	r2, [pc, #60]	; (8004668 <gyro_data_ready+0x58>)
 800462c:	6093      	str	r3, [r2, #8]
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a0d      	ldr	r2, [pc, #52]	; (8004668 <gyro_data_ready+0x58>)
 8004632:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 8004634:	4b0d      	ldr	r3, [pc, #52]	; (800466c <gyro_data_ready+0x5c>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <gyro_data_ready+0x5c>)
 8004640:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if ((update_flag == 0b111|| update_flag == 0b011) && (rtos_started == 1)) {
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <gyro_data_ready+0x5c>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b07      	cmp	r3, #7
 8004648:	d003      	beq.n	8004652 <gyro_data_ready+0x42>
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <gyro_data_ready+0x5c>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d105      	bne.n	800465e <gyro_data_ready+0x4e>
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <gyro_data_ready+0x60>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <gyro_data_ready+0x4e>
		imu_proc_task_notif();
 800465a:	f7ff ffb5 	bl	80045c8 <imu_proc_task_notif>
	}
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bd90      	pop	{r4, r7, pc}
 8004666:	bf00      	nop
 8004668:	20001fc0 	.word	0x20001fc0
 800466c:	20001fe4 	.word	0x20001fe4
 8004670:	20001fe5 	.word	0x20001fe5

08004674 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	463c      	mov	r4, r7
 800467c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	accel_proc_data.ax = accel_data.ax;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4a12      	ldr	r2, [pc, #72]	; (80046cc <accel_data_ready+0x58>)
 8004684:	6013      	str	r3, [r2, #0]
	accel_proc_data.ay = accel_data.ay;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a10      	ldr	r2, [pc, #64]	; (80046cc <accel_data_ready+0x58>)
 800468a:	6053      	str	r3, [r2, #4]
	accel_proc_data.az = accel_data.az;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <accel_data_ready+0x58>)
 8004690:	6093      	str	r3, [r2, #8]
	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a0d      	ldr	r2, [pc, #52]	; (80046cc <accel_data_ready+0x58>)
 8004696:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <accel_data_ready+0x5c>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	f043 0302 	orr.w	r3, r3, #2
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <accel_data_ready+0x5c>)
 80046a4:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if ((update_flag == 0b111 || update_flag == 0b011) && (rtos_started == 1)) {
 80046a6:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <accel_data_ready+0x5c>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b07      	cmp	r3, #7
 80046ac:	d003      	beq.n	80046b6 <accel_data_ready+0x42>
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <accel_data_ready+0x5c>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d105      	bne.n	80046c2 <accel_data_ready+0x4e>
 80046b6:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <accel_data_ready+0x60>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <accel_data_ready+0x4e>
		imu_proc_task_notif();
 80046be:	f7ff ff83 	bl	80045c8 <imu_proc_task_notif>
	}
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd90      	pop	{r4, r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20001fb0 	.word	0x20001fb0
 80046d0:	20001fe4 	.word	0x20001fe4
 80046d4:	20001fe5 	.word	0x20001fe5

080046d8 <imu_processing_task>:
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}

void imu_processing_task(void *argument) {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	//imu_start_ints();
	rtos_started = 1;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <imu_processing_task+0x34>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80046e6:	f04f 31ff 	mov.w	r1, #4294967295
 80046ea:	2001      	movs	r0, #1
 80046ec:	f00f f96a 	bl	80139c4 <ulTaskNotifyTake>
	init_quaternion();
 80046f0:	f000 f80e 	bl	8004710 <init_quaternion>
	quat_startup();
 80046f4:	f000 f948 	bl	8004988 <quat_startup>
	while (1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80046f8:	f04f 31ff 	mov.w	r1, #4294967295
 80046fc:	2001      	movs	r0, #1
 80046fe:	f00f f961 	bl	80139c4 <ulTaskNotifyTake>
		imu_ahrs_update();
 8004702:	f000 fb53 	bl	8004dac <imu_ahrs_update>
		imu_attitude_update();
 8004706:	f000 ffa7 	bl	8005658 <imu_attitude_update>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800470a:	e7f5      	b.n	80046f8 <imu_processing_task+0x20>
 800470c:	20001fe5 	.word	0x20001fe5

08004710 <init_quaternion>:
	}
}

void init_quaternion(void) {
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
	int16_t hx, hy; //hz;

	hx = mag_proc_data.mx;
 8004718:	4b79      	ldr	r3, [pc, #484]	; (8004900 <init_quaternion+0x1f0>)
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	81fb      	strh	r3, [r7, #14]
	hy = mag_proc_data.my;
 800471e:	4b78      	ldr	r3, [pc, #480]	; (8004900 <init_quaternion+0x1f0>)
 8004720:	885b      	ldrh	r3, [r3, #2]
 8004722:	81bb      	strh	r3, [r7, #12]
			q2 = -0.56;
			q3 = 0.0045;
		}
	}
	#else
	if (hx < 0 && hy < 0) {
 8004724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004728:	2b00      	cmp	r3, #0
 800472a:	da36      	bge.n	800479a <init_quaternion+0x8a>
 800472c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	da32      	bge.n	800479a <init_quaternion+0x8a>
		if (fabs(hx / hy) >= 1) {
 8004734:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800473c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004740:	4618      	mov	r0, r3
 8004742:	f7fb fea7 	bl	8000494 <__aeabi_i2d>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	603a      	str	r2, [r7, #0]
 800474c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	4b6b      	ldr	r3, [pc, #428]	; (8004904 <init_quaternion+0x1f4>)
 8004758:	e9d7 0100 	ldrd	r0, r1, [r7]
 800475c:	f7fc f98a 	bl	8000a74 <__aeabi_dcmpge>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <init_quaternion+0x70>
			q0 = 0.195;
 8004766:	4b68      	ldr	r3, [pc, #416]	; (8004908 <init_quaternion+0x1f8>)
 8004768:	4a68      	ldr	r2, [pc, #416]	; (800490c <init_quaternion+0x1fc>)
 800476a:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 800476c:	4b68      	ldr	r3, [pc, #416]	; (8004910 <init_quaternion+0x200>)
 800476e:	4a69      	ldr	r2, [pc, #420]	; (8004914 <init_quaternion+0x204>)
 8004770:	601a      	str	r2, [r3, #0]
			q2 = 0.0043;
 8004772:	4b69      	ldr	r3, [pc, #420]	; (8004918 <init_quaternion+0x208>)
 8004774:	4a69      	ldr	r2, [pc, #420]	; (800491c <init_quaternion+0x20c>)
 8004776:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8004778:	4b69      	ldr	r3, [pc, #420]	; (8004920 <init_quaternion+0x210>)
 800477a:	4a6a      	ldr	r2, [pc, #424]	; (8004924 <init_quaternion+0x214>)
 800477c:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800477e:	e0ba      	b.n	80048f6 <init_quaternion+0x1e6>
		} else {
			q0 = 0.555;
 8004780:	4b61      	ldr	r3, [pc, #388]	; (8004908 <init_quaternion+0x1f8>)
 8004782:	4a69      	ldr	r2, [pc, #420]	; (8004928 <init_quaternion+0x218>)
 8004784:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8004786:	4b62      	ldr	r3, [pc, #392]	; (8004910 <init_quaternion+0x200>)
 8004788:	4a62      	ldr	r2, [pc, #392]	; (8004914 <init_quaternion+0x204>)
 800478a:	601a      	str	r2, [r3, #0]
			q2 = 0.006;
 800478c:	4b62      	ldr	r3, [pc, #392]	; (8004918 <init_quaternion+0x208>)
 800478e:	4a67      	ldr	r2, [pc, #412]	; (800492c <init_quaternion+0x21c>)
 8004790:	601a      	str	r2, [r3, #0]
			q3 = 0.829;
 8004792:	4b63      	ldr	r3, [pc, #396]	; (8004920 <init_quaternion+0x210>)
 8004794:	4a66      	ldr	r2, [pc, #408]	; (8004930 <init_quaternion+0x220>)
 8004796:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8004798:	e0ad      	b.n	80048f6 <init_quaternion+0x1e6>
		}

	} else if (hx < 0 && hy > 0) {
 800479a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	da35      	bge.n	800480e <init_quaternion+0xfe>
 80047a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	dd31      	ble.n	800480e <init_quaternion+0xfe>
		if (fabs(hx / hy) >= 1) {
 80047aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80047ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fb fe6c 	bl	8000494 <__aeabi_i2d>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4692      	mov	sl, r2
 80047c2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	4b4e      	ldr	r3, [pc, #312]	; (8004904 <init_quaternion+0x1f4>)
 80047cc:	4650      	mov	r0, sl
 80047ce:	4659      	mov	r1, fp
 80047d0:	f7fc f950 	bl	8000a74 <__aeabi_dcmpge>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00c      	beq.n	80047f4 <init_quaternion+0xe4>
			q0 = -0.193;
 80047da:	4b4b      	ldr	r3, [pc, #300]	; (8004908 <init_quaternion+0x1f8>)
 80047dc:	4a55      	ldr	r2, [pc, #340]	; (8004934 <init_quaternion+0x224>)
 80047de:	601a      	str	r2, [r3, #0]
			q1 = -0.009;
 80047e0:	4b4b      	ldr	r3, [pc, #300]	; (8004910 <init_quaternion+0x200>)
 80047e2:	4a55      	ldr	r2, [pc, #340]	; (8004938 <init_quaternion+0x228>)
 80047e4:	601a      	str	r2, [r3, #0]
			q2 = -0.006;
 80047e6:	4b4c      	ldr	r3, [pc, #304]	; (8004918 <init_quaternion+0x208>)
 80047e8:	4a54      	ldr	r2, [pc, #336]	; (800493c <init_quaternion+0x22c>)
 80047ea:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 80047ec:	4b4c      	ldr	r3, [pc, #304]	; (8004920 <init_quaternion+0x210>)
 80047ee:	4a4d      	ldr	r2, [pc, #308]	; (8004924 <init_quaternion+0x214>)
 80047f0:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80047f2:	e080      	b.n	80048f6 <init_quaternion+0x1e6>
		} else {
			q0 = -0.552;
 80047f4:	4b44      	ldr	r3, [pc, #272]	; (8004908 <init_quaternion+0x1f8>)
 80047f6:	4a52      	ldr	r2, [pc, #328]	; (8004940 <init_quaternion+0x230>)
 80047f8:	601a      	str	r2, [r3, #0]
			q1 = -0.0048;
 80047fa:	4b45      	ldr	r3, [pc, #276]	; (8004910 <init_quaternion+0x200>)
 80047fc:	4a51      	ldr	r2, [pc, #324]	; (8004944 <init_quaternion+0x234>)
 80047fe:	601a      	str	r2, [r3, #0]
			q2 = -0.0115;
 8004800:	4b45      	ldr	r3, [pc, #276]	; (8004918 <init_quaternion+0x208>)
 8004802:	4a51      	ldr	r2, [pc, #324]	; (8004948 <init_quaternion+0x238>)
 8004804:	601a      	str	r2, [r3, #0]
			q3 = 0.8313;
 8004806:	4b46      	ldr	r3, [pc, #280]	; (8004920 <init_quaternion+0x210>)
 8004808:	4a50      	ldr	r2, [pc, #320]	; (800494c <init_quaternion+0x23c>)
 800480a:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800480c:	e073      	b.n	80048f6 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy > 0) {
 800480e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004812:	2b00      	cmp	r3, #0
 8004814:	dd35      	ble.n	8004882 <init_quaternion+0x172>
 8004816:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	dd31      	ble.n	8004882 <init_quaternion+0x172>
		if (fabs(hx / hy) >= 1) {
 800481e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004822:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004826:	fb92 f3f3 	sdiv	r3, r2, r3
 800482a:	4618      	mov	r0, r3
 800482c:	f7fb fe32 	bl	8000494 <__aeabi_i2d>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4690      	mov	r8, r2
 8004836:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	4b31      	ldr	r3, [pc, #196]	; (8004904 <init_quaternion+0x1f4>)
 8004840:	4640      	mov	r0, r8
 8004842:	4649      	mov	r1, r9
 8004844:	f7fc f916 	bl	8000a74 <__aeabi_dcmpge>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00c      	beq.n	8004868 <init_quaternion+0x158>
			q0 = -0.9785;
 800484e:	4b2e      	ldr	r3, [pc, #184]	; (8004908 <init_quaternion+0x1f8>)
 8004850:	4a3f      	ldr	r2, [pc, #252]	; (8004950 <init_quaternion+0x240>)
 8004852:	601a      	str	r2, [r3, #0]
			q1 = 0.008;
 8004854:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <init_quaternion+0x200>)
 8004856:	4a3f      	ldr	r2, [pc, #252]	; (8004954 <init_quaternion+0x244>)
 8004858:	601a      	str	r2, [r3, #0]
			q2 = -0.02;
 800485a:	4b2f      	ldr	r3, [pc, #188]	; (8004918 <init_quaternion+0x208>)
 800485c:	4a3e      	ldr	r2, [pc, #248]	; (8004958 <init_quaternion+0x248>)
 800485e:	601a      	str	r2, [r3, #0]
			q3 = 0.195;
 8004860:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <init_quaternion+0x210>)
 8004862:	4a2a      	ldr	r2, [pc, #168]	; (800490c <init_quaternion+0x1fc>)
 8004864:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8004866:	e046      	b.n	80048f6 <init_quaternion+0x1e6>
		} else {
			q0 = -0.9828;
 8004868:	4b27      	ldr	r3, [pc, #156]	; (8004908 <init_quaternion+0x1f8>)
 800486a:	4a3c      	ldr	r2, [pc, #240]	; (800495c <init_quaternion+0x24c>)
 800486c:	601a      	str	r2, [r3, #0]
			q1 = 0.002;
 800486e:	4b28      	ldr	r3, [pc, #160]	; (8004910 <init_quaternion+0x200>)
 8004870:	4a3b      	ldr	r2, [pc, #236]	; (8004960 <init_quaternion+0x250>)
 8004872:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 8004874:	4b28      	ldr	r3, [pc, #160]	; (8004918 <init_quaternion+0x208>)
 8004876:	4a3b      	ldr	r2, [pc, #236]	; (8004964 <init_quaternion+0x254>)
 8004878:	601a      	str	r2, [r3, #0]
			q3 = 0.5557;
 800487a:	4b29      	ldr	r3, [pc, #164]	; (8004920 <init_quaternion+0x210>)
 800487c:	4a3a      	ldr	r2, [pc, #232]	; (8004968 <init_quaternion+0x258>)
 800487e:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8004880:	e039      	b.n	80048f6 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy < 0) {
 8004882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004886:	2b00      	cmp	r3, #0
 8004888:	dd35      	ble.n	80048f6 <init_quaternion+0x1e6>
 800488a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	da31      	bge.n	80048f6 <init_quaternion+0x1e6>
		if (fabs(hx / hy) >= 1) {
 8004892:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004896:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800489a:	fb92 f3f3 	sdiv	r3, r2, r3
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fb fdf8 	bl	8000494 <__aeabi_i2d>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <init_quaternion+0x1f4>)
 80048b4:	4620      	mov	r0, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	f7fc f8dc 	bl	8000a74 <__aeabi_dcmpge>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00c      	beq.n	80048dc <init_quaternion+0x1cc>
			q0 = -0.979;
 80048c2:	4b11      	ldr	r3, [pc, #68]	; (8004908 <init_quaternion+0x1f8>)
 80048c4:	4a29      	ldr	r2, [pc, #164]	; (800496c <init_quaternion+0x25c>)
 80048c6:	601a      	str	r2, [r3, #0]
			q1 = 0.0116;
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <init_quaternion+0x200>)
 80048ca:	4a29      	ldr	r2, [pc, #164]	; (8004970 <init_quaternion+0x260>)
 80048cc:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <init_quaternion+0x208>)
 80048d0:	4a24      	ldr	r2, [pc, #144]	; (8004964 <init_quaternion+0x254>)
 80048d2:	601a      	str	r2, [r3, #0]
			q3 = -0.195;
 80048d4:	4b12      	ldr	r3, [pc, #72]	; (8004920 <init_quaternion+0x210>)
 80048d6:	4a27      	ldr	r2, [pc, #156]	; (8004974 <init_quaternion+0x264>)
 80048d8:	601a      	str	r2, [r3, #0]
		}
	}
#endif


}
 80048da:	e00c      	b.n	80048f6 <init_quaternion+0x1e6>
			q0 = -0.83;
 80048dc:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <init_quaternion+0x1f8>)
 80048de:	4a26      	ldr	r2, [pc, #152]	; (8004978 <init_quaternion+0x268>)
 80048e0:	601a      	str	r2, [r3, #0]
			q1 = 0.014;
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <init_quaternion+0x200>)
 80048e4:	4a25      	ldr	r2, [pc, #148]	; (800497c <init_quaternion+0x26c>)
 80048e6:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <init_quaternion+0x208>)
 80048ea:	4a25      	ldr	r2, [pc, #148]	; (8004980 <init_quaternion+0x270>)
 80048ec:	601a      	str	r2, [r3, #0]
			q3 = -0.556;
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <init_quaternion+0x210>)
 80048f0:	4a24      	ldr	r2, [pc, #144]	; (8004984 <init_quaternion+0x274>)
 80048f2:	601a      	str	r2, [r3, #0]
}
 80048f4:	e7ff      	b.n	80048f6 <init_quaternion+0x1e6>
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004900:	20001fd0 	.word	0x20001fd0
 8004904:	3ff00000 	.word	0x3ff00000
 8004908:	20000008 	.word	0x20000008
 800490c:	3e47ae14 	.word	0x3e47ae14
 8004910:	20001f64 	.word	0x20001f64
 8004914:	bc75c28f 	.word	0xbc75c28f
 8004918:	20001f68 	.word	0x20001f68
 800491c:	3b8ce704 	.word	0x3b8ce704
 8004920:	20001f6c 	.word	0x20001f6c
 8004924:	3f7a9fbe 	.word	0x3f7a9fbe
 8004928:	3f0e147b 	.word	0x3f0e147b
 800492c:	3bc49ba6 	.word	0x3bc49ba6
 8004930:	3f543958 	.word	0x3f543958
 8004934:	be45a1cb 	.word	0xbe45a1cb
 8004938:	bc1374bc 	.word	0xbc1374bc
 800493c:	bbc49ba6 	.word	0xbbc49ba6
 8004940:	bf0d4fdf 	.word	0xbf0d4fdf
 8004944:	bb9d4952 	.word	0xbb9d4952
 8004948:	bc3c6a7f 	.word	0xbc3c6a7f
 800494c:	3f54d014 	.word	0x3f54d014
 8004950:	bf7a7efa 	.word	0xbf7a7efa
 8004954:	3c03126f 	.word	0x3c03126f
 8004958:	bca3d70a 	.word	0xbca3d70a
 800495c:	bf7b98c8 	.word	0xbf7b98c8
 8004960:	3b03126f 	.word	0x3b03126f
 8004964:	bc88ce70 	.word	0xbc88ce70
 8004968:	3f0e425b 	.word	0x3f0e425b
 800496c:	bf7a9fbe 	.word	0xbf7a9fbe
 8004970:	3c3e0ded 	.word	0x3c3e0ded
 8004974:	be47ae14 	.word	0xbe47ae14
 8004978:	bf547ae1 	.word	0xbf547ae1
 800497c:	3c656042 	.word	0x3c656042
 8004980:	bc449ba6 	.word	0xbc449ba6
 8004984:	bf0e5604 	.word	0xbf0e5604

08004988 <quat_startup>:
//	q0 = tempq0 * norm;
//	q1 = tempq1 * norm;
//	q2 = tempq2 * norm;
//	q3 = tempq3 * norm;
//}
void quat_startup(void) { // new
 8004988:	b580      	push	{r7, lr}
 800498a:	b094      	sub	sp, #80	; 0x50
 800498c:	af00      	add	r7, sp, #0
//to figure out how to use quaternions
  float norm;
  float vx, vy, vz, wx, wy, wz;
  float tempq0, tempq1, tempq2, tempq3;

  float q0q0 = q0 * q0;
 800498e:	4bd6      	ldr	r3, [pc, #856]	; (8004ce8 <quat_startup+0x360>)
 8004990:	ed93 7a00 	vldr	s14, [r3]
 8004994:	4bd4      	ldr	r3, [pc, #848]	; (8004ce8 <quat_startup+0x360>)
 8004996:	edd3 7a00 	vldr	s15, [r3]
 800499a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  float q0q1 = q0 * q1;
 80049a2:	4bd1      	ldr	r3, [pc, #836]	; (8004ce8 <quat_startup+0x360>)
 80049a4:	ed93 7a00 	vldr	s14, [r3]
 80049a8:	4bd0      	ldr	r3, [pc, #832]	; (8004cec <quat_startup+0x364>)
 80049aa:	edd3 7a00 	vldr	s15, [r3]
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float q0q2 = q0 * q2;
 80049b6:	4bcc      	ldr	r3, [pc, #816]	; (8004ce8 <quat_startup+0x360>)
 80049b8:	ed93 7a00 	vldr	s14, [r3]
 80049bc:	4bcc      	ldr	r3, [pc, #816]	; (8004cf0 <quat_startup+0x368>)
 80049be:	edd3 7a00 	vldr	s15, [r3]
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  float q1q1 = q1 * q1;
 80049ca:	4bc8      	ldr	r3, [pc, #800]	; (8004cec <quat_startup+0x364>)
 80049cc:	ed93 7a00 	vldr	s14, [r3]
 80049d0:	4bc6      	ldr	r3, [pc, #792]	; (8004cec <quat_startup+0x364>)
 80049d2:	edd3 7a00 	vldr	s15, [r3]
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  float q1q3 = q1 * q3;
 80049de:	4bc3      	ldr	r3, [pc, #780]	; (8004cec <quat_startup+0x364>)
 80049e0:	ed93 7a00 	vldr	s14, [r3]
 80049e4:	4bc3      	ldr	r3, [pc, #780]	; (8004cf4 <quat_startup+0x36c>)
 80049e6:	edd3 7a00 	vldr	s15, [r3]
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  float q2q2 = q2 * q2;
 80049f2:	4bbf      	ldr	r3, [pc, #764]	; (8004cf0 <quat_startup+0x368>)
 80049f4:	ed93 7a00 	vldr	s14, [r3]
 80049f8:	4bbd      	ldr	r3, [pc, #756]	; (8004cf0 <quat_startup+0x368>)
 80049fa:	edd3 7a00 	vldr	s15, [r3]
 80049fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a02:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  float q2q3 = q2 * q3;
 8004a06:	4bba      	ldr	r3, [pc, #744]	; (8004cf0 <quat_startup+0x368>)
 8004a08:	ed93 7a00 	vldr	s14, [r3]
 8004a0c:	4bb9      	ldr	r3, [pc, #740]	; (8004cf4 <quat_startup+0x36c>)
 8004a0e:	edd3 7a00 	vldr	s15, [r3]
 8004a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a16:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float q3q3 = q3 * q3;
 8004a1a:	4bb6      	ldr	r3, [pc, #728]	; (8004cf4 <quat_startup+0x36c>)
 8004a1c:	ed93 7a00 	vldr	s14, [r3]
 8004a20:	4bb4      	ldr	r3, [pc, #720]	; (8004cf4 <quat_startup+0x36c>)
 8004a22:	edd3 7a00 	vldr	s15, [r3]
 8004a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  gx = gyro_proc_data.gx;
 8004a2e:	4bb2      	ldr	r3, [pc, #712]	; (8004cf8 <quat_startup+0x370>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4ab2      	ldr	r2, [pc, #712]	; (8004cfc <quat_startup+0x374>)
 8004a34:	6013      	str	r3, [r2, #0]
  gy = gyro_proc_data.gy;
 8004a36:	4bb0      	ldr	r3, [pc, #704]	; (8004cf8 <quat_startup+0x370>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4ab1      	ldr	r2, [pc, #708]	; (8004d00 <quat_startup+0x378>)
 8004a3c:	6013      	str	r3, [r2, #0]
  gz = gyro_proc_data.gz;
 8004a3e:	4bae      	ldr	r3, [pc, #696]	; (8004cf8 <quat_startup+0x370>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	4ab0      	ldr	r2, [pc, #704]	; (8004d04 <quat_startup+0x37c>)
 8004a44:	6013      	str	r3, [r2, #0]
  ax = accel_proc_data.ax;
 8004a46:	4bb0      	ldr	r3, [pc, #704]	; (8004d08 <quat_startup+0x380>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4ab0      	ldr	r2, [pc, #704]	; (8004d0c <quat_startup+0x384>)
 8004a4c:	6013      	str	r3, [r2, #0]
  ay = accel_proc_data.ay;
 8004a4e:	4bae      	ldr	r3, [pc, #696]	; (8004d08 <quat_startup+0x380>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4aaf      	ldr	r2, [pc, #700]	; (8004d10 <quat_startup+0x388>)
 8004a54:	6013      	str	r3, [r2, #0]
  az = accel_proc_data.az;
 8004a56:	4bac      	ldr	r3, [pc, #688]	; (8004d08 <quat_startup+0x380>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4aae      	ldr	r2, [pc, #696]	; (8004d14 <quat_startup+0x38c>)
 8004a5c:	6013      	str	r3, [r2, #0]
  mx = mag_proc_data.mx;
 8004a5e:	4bae      	ldr	r3, [pc, #696]	; (8004d18 <quat_startup+0x390>)
 8004a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a64:	ee07 3a90 	vmov	s15, r3
 8004a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a6c:	4bab      	ldr	r3, [pc, #684]	; (8004d1c <quat_startup+0x394>)
 8004a6e:	edc3 7a00 	vstr	s15, [r3]
  my = mag_proc_data.my;
 8004a72:	4ba9      	ldr	r3, [pc, #676]	; (8004d18 <quat_startup+0x390>)
 8004a74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a78:	ee07 3a90 	vmov	s15, r3
 8004a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a80:	4ba7      	ldr	r3, [pc, #668]	; (8004d20 <quat_startup+0x398>)
 8004a82:	edc3 7a00 	vstr	s15, [r3]
  mz = mag_proc_data.mz;
 8004a86:	4ba4      	ldr	r3, [pc, #656]	; (8004d18 <quat_startup+0x390>)
 8004a88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a94:	4ba3      	ldr	r3, [pc, #652]	; (8004d24 <quat_startup+0x39c>)
 8004a96:	edc3 7a00 	vstr	s15, [r3]

  /* Fast inverse square-root */
  norm = inv_sqrt(ax * ax + ay * ay + az * az);
 8004a9a:	4b9c      	ldr	r3, [pc, #624]	; (8004d0c <quat_startup+0x384>)
 8004a9c:	ed93 7a00 	vldr	s14, [r3]
 8004aa0:	4b9a      	ldr	r3, [pc, #616]	; (8004d0c <quat_startup+0x384>)
 8004aa2:	edd3 7a00 	vldr	s15, [r3]
 8004aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aaa:	4b99      	ldr	r3, [pc, #612]	; (8004d10 <quat_startup+0x388>)
 8004aac:	edd3 6a00 	vldr	s13, [r3]
 8004ab0:	4b97      	ldr	r3, [pc, #604]	; (8004d10 <quat_startup+0x388>)
 8004ab2:	edd3 7a00 	vldr	s15, [r3]
 8004ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004abe:	4b95      	ldr	r3, [pc, #596]	; (8004d14 <quat_startup+0x38c>)
 8004ac0:	edd3 6a00 	vldr	s13, [r3]
 8004ac4:	4b93      	ldr	r3, [pc, #588]	; (8004d14 <quat_startup+0x38c>)
 8004ac6:	edd3 7a00 	vldr	s15, [r3]
 8004aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad6:	f7fc fb99 	bl	800120c <inv_sqrt>
 8004ada:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  ax = ax * norm;
 8004ade:	4b8b      	ldr	r3, [pc, #556]	; (8004d0c <quat_startup+0x384>)
 8004ae0:	ed93 7a00 	vldr	s14, [r3]
 8004ae4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aec:	4b87      	ldr	r3, [pc, #540]	; (8004d0c <quat_startup+0x384>)
 8004aee:	edc3 7a00 	vstr	s15, [r3]
  ay = ay * norm;
 8004af2:	4b87      	ldr	r3, [pc, #540]	; (8004d10 <quat_startup+0x388>)
 8004af4:	ed93 7a00 	vldr	s14, [r3]
 8004af8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b00:	4b83      	ldr	r3, [pc, #524]	; (8004d10 <quat_startup+0x388>)
 8004b02:	edc3 7a00 	vstr	s15, [r3]
  az = az * norm;
 8004b06:	4b83      	ldr	r3, [pc, #524]	; (8004d14 <quat_startup+0x38c>)
 8004b08:	ed93 7a00 	vldr	s14, [r3]
 8004b0c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b14:	4b7f      	ldr	r3, [pc, #508]	; (8004d14 <quat_startup+0x38c>)
 8004b16:	edc3 7a00 	vstr	s15, [r3]

  /* estimated direction of gravity  (v) */
  vx = 2.0f * (q1q3 - q0q2);
 8004b1a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004b1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b2a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  vy = 2.0f * (q0q1 + q2q3);
 8004b2e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b32:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  vz = q0q0 - q1q1 - q2q2 + q3q3;
 8004b42:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b46:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004b4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b4e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b56:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5e:	edc7 7a08 	vstr	s15, [r7, #32]
  wx = (ay * vz - az * vy);
 8004b62:	4b6b      	ldr	r3, [pc, #428]	; (8004d10 <quat_startup+0x388>)
 8004b64:	ed93 7a00 	vldr	s14, [r3]
 8004b68:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b70:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <quat_startup+0x38c>)
 8004b72:	edd3 6a00 	vldr	s13, [r3]
 8004b76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
  wy = (az * vx - ax * vz);
 8004b86:	4b63      	ldr	r3, [pc, #396]	; (8004d14 <quat_startup+0x38c>)
 8004b88:	ed93 7a00 	vldr	s14, [r3]
 8004b8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b94:	4b5d      	ldr	r3, [pc, #372]	; (8004d0c <quat_startup+0x384>)
 8004b96:	edd3 6a00 	vldr	s13, [r3]
 8004b9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ba6:	edc7 7a06 	vstr	s15, [r7, #24]
  wz = (ax * vy - ay * vx);
 8004baa:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <quat_startup+0x384>)
 8004bac:	ed93 7a00 	vldr	s14, [r3]
 8004bb0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bb8:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <quat_startup+0x388>)
 8004bba:	edd3 6a00 	vldr	s13, [r3]
 8004bbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bca:	edc7 7a05 	vstr	s15, [r7, #20]
  /* PI */
  tempq0 =  q0 + (-q1 * wx - q2 * wy - q3 * wz);
 8004bce:	4b47      	ldr	r3, [pc, #284]	; (8004cec <quat_startup+0x364>)
 8004bd0:	edd3 7a00 	vldr	s15, [r3]
 8004bd4:	eeb1 7a67 	vneg.f32	s14, s15
 8004bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004be0:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <quat_startup+0x368>)
 8004be2:	edd3 6a00 	vldr	s13, [r3]
 8004be6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bf2:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <quat_startup+0x36c>)
 8004bf4:	edd3 6a00 	vldr	s13, [r3]
 8004bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c04:	4b38      	ldr	r3, [pc, #224]	; (8004ce8 <quat_startup+0x360>)
 8004c06:	edd3 7a00 	vldr	s15, [r3]
 8004c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c0e:	edc7 7a04 	vstr	s15, [r7, #16]
  tempq1 =  q1 +(q0 * wx + q2 * wz - q3 * wy);
 8004c12:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <quat_startup+0x360>)
 8004c14:	ed93 7a00 	vldr	s14, [r3]
 8004c18:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c20:	4b33      	ldr	r3, [pc, #204]	; (8004cf0 <quat_startup+0x368>)
 8004c22:	edd3 6a00 	vldr	s13, [r3]
 8004c26:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c32:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <quat_startup+0x36c>)
 8004c34:	edd3 6a00 	vldr	s13, [r3]
 8004c38:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c44:	4b29      	ldr	r3, [pc, #164]	; (8004cec <quat_startup+0x364>)
 8004c46:	edd3 7a00 	vldr	s15, [r3]
 8004c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4e:	edc7 7a03 	vstr	s15, [r7, #12]
  tempq2 =  q2 +(q0 * wy - q1 * wz + q3 * wx);
 8004c52:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <quat_startup+0x360>)
 8004c54:	ed93 7a00 	vldr	s14, [r3]
 8004c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c60:	4b22      	ldr	r3, [pc, #136]	; (8004cec <quat_startup+0x364>)
 8004c62:	edd3 6a00 	vldr	s13, [r3]
 8004c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <quat_startup+0x36c>)
 8004c74:	edd3 6a00 	vldr	s13, [r3]
 8004c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <quat_startup+0x368>)
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c8e:	edc7 7a02 	vstr	s15, [r7, #8]
  tempq3 =  q3 +(q0 * wz + q1 * wy - q2 * wx);
 8004c92:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <quat_startup+0x360>)
 8004c94:	ed93 7a00 	vldr	s14, [r3]
 8004c98:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ca0:	4b12      	ldr	r3, [pc, #72]	; (8004cec <quat_startup+0x364>)
 8004ca2:	edd3 6a00 	vldr	s13, [r3]
 8004ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <quat_startup+0x368>)
 8004cb4:	edd3 6a00 	vldr	s13, [r3]
 8004cb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <quat_startup+0x36c>)
 8004cc6:	edd3 7a00 	vldr	s15, [r3]
 8004cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cce:	edc7 7a01 	vstr	s15, [r7, #4]

  /* normalise quaternion */
  norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 8004cd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cd6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004cda:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ce6:	e01f      	b.n	8004d28 <quat_startup+0x3a0>
 8004ce8:	20000008 	.word	0x20000008
 8004cec:	20001f64 	.word	0x20001f64
 8004cf0:	20001f68 	.word	0x20001f68
 8004cf4:	20001f6c 	.word	0x20001f6c
 8004cf8:	20001fc0 	.word	0x20001fc0
 8004cfc:	20001f7c 	.word	0x20001f7c
 8004d00:	20001f80 	.word	0x20001f80
 8004d04:	20001f84 	.word	0x20001f84
 8004d08:	20001fb0 	.word	0x20001fb0
 8004d0c:	20001f88 	.word	0x20001f88
 8004d10:	20001f8c 	.word	0x20001f8c
 8004d14:	20001f90 	.word	0x20001f90
 8004d18:	20001fd0 	.word	0x20001fd0
 8004d1c:	20001f94 	.word	0x20001f94
 8004d20:	20001f98 	.word	0x20001f98
 8004d24:	20001f9c 	.word	0x20001f9c
 8004d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d34:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d40:	eeb0 0a67 	vmov.f32	s0, s15
 8004d44:	f7fc fa62 	bl	800120c <inv_sqrt>
 8004d48:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  q0 = tempq0 * norm;
 8004d4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d58:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <quat_startup+0x414>)
 8004d5a:	edc3 7a00 	vstr	s15, [r3]
  q1 = tempq1 * norm;
 8004d5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <quat_startup+0x418>)
 8004d6c:	edc3 7a00 	vstr	s15, [r3]
  q2 = tempq2 * norm;
 8004d70:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d74:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <quat_startup+0x41c>)
 8004d7e:	edc3 7a00 	vstr	s15, [r3]
  q3 = tempq3 * norm;
 8004d82:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d86:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <quat_startup+0x420>)
 8004d90:	edc3 7a00 	vstr	s15, [r3]
}
 8004d94:	bf00      	nop
 8004d96:	3750      	adds	r7, #80	; 0x50
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000008 	.word	0x20000008
 8004da0:	20001f64 	.word	0x20001f64
 8004da4:	20001f68 	.word	0x20001f68
 8004da8:	20001f6c 	.word	0x20001f6c

08004dac <imu_ahrs_update>:

void imu_ahrs_update(void) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b09e      	sub	sp, #120	; 0x78
 8004db0:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0, tempq1, tempq2, tempq3;

	float q0q0 = q0 * q0;
 8004db2:	4bd3      	ldr	r3, [pc, #844]	; (8005100 <imu_ahrs_update+0x354>)
 8004db4:	ed93 7a00 	vldr	s14, [r3]
 8004db8:	4bd1      	ldr	r3, [pc, #836]	; (8005100 <imu_ahrs_update+0x354>)
 8004dba:	edd3 7a00 	vldr	s15, [r3]
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0 * q1;
 8004dc6:	4bce      	ldr	r3, [pc, #824]	; (8005100 <imu_ahrs_update+0x354>)
 8004dc8:	ed93 7a00 	vldr	s14, [r3]
 8004dcc:	4bcd      	ldr	r3, [pc, #820]	; (8005104 <imu_ahrs_update+0x358>)
 8004dce:	edd3 7a00 	vldr	s15, [r3]
 8004dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0 * q2;
 8004dda:	4bc9      	ldr	r3, [pc, #804]	; (8005100 <imu_ahrs_update+0x354>)
 8004ddc:	ed93 7a00 	vldr	s14, [r3]
 8004de0:	4bc9      	ldr	r3, [pc, #804]	; (8005108 <imu_ahrs_update+0x35c>)
 8004de2:	edd3 7a00 	vldr	s15, [r3]
 8004de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dea:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0 * q3;
 8004dee:	4bc4      	ldr	r3, [pc, #784]	; (8005100 <imu_ahrs_update+0x354>)
 8004df0:	ed93 7a00 	vldr	s14, [r3]
 8004df4:	4bc5      	ldr	r3, [pc, #788]	; (800510c <imu_ahrs_update+0x360>)
 8004df6:	edd3 7a00 	vldr	s15, [r3]
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1 * q1;
 8004e02:	4bc0      	ldr	r3, [pc, #768]	; (8005104 <imu_ahrs_update+0x358>)
 8004e04:	ed93 7a00 	vldr	s14, [r3]
 8004e08:	4bbe      	ldr	r3, [pc, #760]	; (8005104 <imu_ahrs_update+0x358>)
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1 * q2;
 8004e16:	4bbb      	ldr	r3, [pc, #748]	; (8005104 <imu_ahrs_update+0x358>)
 8004e18:	ed93 7a00 	vldr	s14, [r3]
 8004e1c:	4bba      	ldr	r3, [pc, #744]	; (8005108 <imu_ahrs_update+0x35c>)
 8004e1e:	edd3 7a00 	vldr	s15, [r3]
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1 * q3;
 8004e2a:	4bb6      	ldr	r3, [pc, #728]	; (8005104 <imu_ahrs_update+0x358>)
 8004e2c:	ed93 7a00 	vldr	s14, [r3]
 8004e30:	4bb6      	ldr	r3, [pc, #728]	; (800510c <imu_ahrs_update+0x360>)
 8004e32:	edd3 7a00 	vldr	s15, [r3]
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2 * q2;
 8004e3e:	4bb2      	ldr	r3, [pc, #712]	; (8005108 <imu_ahrs_update+0x35c>)
 8004e40:	ed93 7a00 	vldr	s14, [r3]
 8004e44:	4bb0      	ldr	r3, [pc, #704]	; (8005108 <imu_ahrs_update+0x35c>)
 8004e46:	edd3 7a00 	vldr	s15, [r3]
 8004e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2 * q3;
 8004e52:	4bad      	ldr	r3, [pc, #692]	; (8005108 <imu_ahrs_update+0x35c>)
 8004e54:	ed93 7a00 	vldr	s14, [r3]
 8004e58:	4bac      	ldr	r3, [pc, #688]	; (800510c <imu_ahrs_update+0x360>)
 8004e5a:	edd3 7a00 	vldr	s15, [r3]
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3 * q3;
 8004e66:	4ba9      	ldr	r3, [pc, #676]	; (800510c <imu_ahrs_update+0x360>)
 8004e68:	ed93 7a00 	vldr	s14, [r3]
 8004e6c:	4ba7      	ldr	r3, [pc, #668]	; (800510c <imu_ahrs_update+0x360>)
 8004e6e:	edd3 7a00 	vldr	s15, [r3]
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = gyro_proc_data.gx;
 8004e7a:	4ba5      	ldr	r3, [pc, #660]	; (8005110 <imu_ahrs_update+0x364>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4aa5      	ldr	r2, [pc, #660]	; (8005114 <imu_ahrs_update+0x368>)
 8004e80:	6013      	str	r3, [r2, #0]
	gy = gyro_proc_data.gy;
 8004e82:	4ba3      	ldr	r3, [pc, #652]	; (8005110 <imu_ahrs_update+0x364>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4aa4      	ldr	r2, [pc, #656]	; (8005118 <imu_ahrs_update+0x36c>)
 8004e88:	6013      	str	r3, [r2, #0]
	gz = gyro_proc_data.gz;
 8004e8a:	4ba1      	ldr	r3, [pc, #644]	; (8005110 <imu_ahrs_update+0x364>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4aa3      	ldr	r2, [pc, #652]	; (800511c <imu_ahrs_update+0x370>)
 8004e90:	6013      	str	r3, [r2, #0]
	ax = accel_proc_data.ax;
 8004e92:	4ba3      	ldr	r3, [pc, #652]	; (8005120 <imu_ahrs_update+0x374>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4aa3      	ldr	r2, [pc, #652]	; (8005124 <imu_ahrs_update+0x378>)
 8004e98:	6013      	str	r3, [r2, #0]
	ay = accel_proc_data.ay;
 8004e9a:	4ba1      	ldr	r3, [pc, #644]	; (8005120 <imu_ahrs_update+0x374>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4aa2      	ldr	r2, [pc, #648]	; (8005128 <imu_ahrs_update+0x37c>)
 8004ea0:	6013      	str	r3, [r2, #0]
	az = accel_proc_data.az;
 8004ea2:	4b9f      	ldr	r3, [pc, #636]	; (8005120 <imu_ahrs_update+0x374>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	4aa1      	ldr	r2, [pc, #644]	; (800512c <imu_ahrs_update+0x380>)
 8004ea8:	6013      	str	r3, [r2, #0]
	mx = mag_proc_data.mx;
 8004eaa:	4ba1      	ldr	r3, [pc, #644]	; (8005130 <imu_ahrs_update+0x384>)
 8004eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb8:	4b9e      	ldr	r3, [pc, #632]	; (8005134 <imu_ahrs_update+0x388>)
 8004eba:	edc3 7a00 	vstr	s15, [r3]
	my = mag_proc_data.my;
 8004ebe:	4b9c      	ldr	r3, [pc, #624]	; (8005130 <imu_ahrs_update+0x384>)
 8004ec0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ecc:	4b9a      	ldr	r3, [pc, #616]	; (8005138 <imu_ahrs_update+0x38c>)
 8004ece:	edc3 7a00 	vstr	s15, [r3]
	mz = mag_proc_data.mz;
 8004ed2:	4b97      	ldr	r3, [pc, #604]	; (8005130 <imu_ahrs_update+0x384>)
 8004ed4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ed8:	ee07 3a90 	vmov	s15, r3
 8004edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ee0:	4b96      	ldr	r3, [pc, #600]	; (800513c <imu_ahrs_update+0x390>)
 8004ee2:	edc3 7a00 	vstr	s15, [r3]

	last_proc_times[0] = HAL_GetTick(); //ms
 8004ee6:	f002 fddb 	bl	8007aa0 <HAL_GetTick>
 8004eea:	4603      	mov	r3, r0
 8004eec:	4a94      	ldr	r2, [pc, #592]	; (8005140 <imu_ahrs_update+0x394>)
 8004eee:	6013      	str	r3, [r2, #0]
	halfT = ((float) (last_proc_times[0] - last_proc_times[1]) / 2000.0f);
 8004ef0:	4b93      	ldr	r3, [pc, #588]	; (8005140 <imu_ahrs_update+0x394>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b92      	ldr	r3, [pc, #584]	; (8005140 <imu_ahrs_update+0x394>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f02:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005144 <imu_ahrs_update+0x398>
 8004f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f0a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_proc_times[1] = last_proc_times[0];
 8004f0e:	4b8c      	ldr	r3, [pc, #560]	; (8005140 <imu_ahrs_update+0x394>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a8b      	ldr	r2, [pc, #556]	; (8005140 <imu_ahrs_update+0x394>)
 8004f14:	6053      	str	r3, [r2, #4]

	/* Fast inverse square-root */
	norm = inv_sqrt(ax * ax + ay * ay + az * az);
 8004f16:	4b83      	ldr	r3, [pc, #524]	; (8005124 <imu_ahrs_update+0x378>)
 8004f18:	ed93 7a00 	vldr	s14, [r3]
 8004f1c:	4b81      	ldr	r3, [pc, #516]	; (8005124 <imu_ahrs_update+0x378>)
 8004f1e:	edd3 7a00 	vldr	s15, [r3]
 8004f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f26:	4b80      	ldr	r3, [pc, #512]	; (8005128 <imu_ahrs_update+0x37c>)
 8004f28:	edd3 6a00 	vldr	s13, [r3]
 8004f2c:	4b7e      	ldr	r3, [pc, #504]	; (8005128 <imu_ahrs_update+0x37c>)
 8004f2e:	edd3 7a00 	vldr	s15, [r3]
 8004f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f3a:	4b7c      	ldr	r3, [pc, #496]	; (800512c <imu_ahrs_update+0x380>)
 8004f3c:	edd3 6a00 	vldr	s13, [r3]
 8004f40:	4b7a      	ldr	r3, [pc, #488]	; (800512c <imu_ahrs_update+0x380>)
 8004f42:	edd3 7a00 	vldr	s15, [r3]
 8004f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f52:	f7fc f95b 	bl	800120c <inv_sqrt>
 8004f56:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 8004f5a:	4b72      	ldr	r3, [pc, #456]	; (8005124 <imu_ahrs_update+0x378>)
 8004f5c:	ed93 7a00 	vldr	s14, [r3]
 8004f60:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f68:	4b6e      	ldr	r3, [pc, #440]	; (8005124 <imu_ahrs_update+0x378>)
 8004f6a:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 8004f6e:	4b6e      	ldr	r3, [pc, #440]	; (8005128 <imu_ahrs_update+0x37c>)
 8004f70:	ed93 7a00 	vldr	s14, [r3]
 8004f74:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7c:	4b6a      	ldr	r3, [pc, #424]	; (8005128 <imu_ahrs_update+0x37c>)
 8004f7e:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 8004f82:	4b6a      	ldr	r3, [pc, #424]	; (800512c <imu_ahrs_update+0x380>)
 8004f84:	ed93 7a00 	vldr	s14, [r3]
 8004f88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f90:	4b66      	ldr	r3, [pc, #408]	; (800512c <imu_ahrs_update+0x380>)
 8004f92:	edc3 7a00 	vstr	s15, [r3]
		norm = inv_sqrt(mx*mx + my*my + mz*mz);
		mx = mx * norm;
		my = my * norm;
		mz = mz * norm;
	#else
	mx = 0;
 8004f96:	4b67      	ldr	r3, [pc, #412]	; (8005134 <imu_ahrs_update+0x388>)
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
	my = 0;
 8004f9e:	4b66      	ldr	r3, [pc, #408]	; (8005138 <imu_ahrs_update+0x38c>)
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
	mz = 0;
 8004fa6:	4b65      	ldr	r3, [pc, #404]	; (800513c <imu_ahrs_update+0x390>)
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
#endif
	/* compute reference direction of flux */
	hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 8004fae:	4b61      	ldr	r3, [pc, #388]	; (8005134 <imu_ahrs_update+0x388>)
 8004fb0:	edd3 7a00 	vldr	s15, [r3]
 8004fb4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004fb8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004fbc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004fc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004fc4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004fc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fd0:	4b59      	ldr	r3, [pc, #356]	; (8005138 <imu_ahrs_update+0x38c>)
 8004fd2:	edd3 7a00 	vldr	s15, [r3]
 8004fd6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004fda:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8004fde:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004fe2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fee:	4b53      	ldr	r3, [pc, #332]	; (800513c <imu_ahrs_update+0x390>)
 8004ff0:	edd3 7a00 	vldr	s15, [r3]
 8004ff4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004ff8:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8004ffc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005000:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800500c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 8005010:	4b48      	ldr	r3, [pc, #288]	; (8005134 <imu_ahrs_update+0x388>)
 8005012:	edd3 7a00 	vldr	s15, [r3]
 8005016:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800501a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800501e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800502a:	4b43      	ldr	r3, [pc, #268]	; (8005138 <imu_ahrs_update+0x38c>)
 800502c:	edd3 7a00 	vldr	s15, [r3]
 8005030:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005034:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005038:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800503c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005040:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005044:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800504c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005050:	4b3a      	ldr	r3, [pc, #232]	; (800513c <imu_ahrs_update+0x390>)
 8005052:	edd3 7a00 	vldr	s15, [r3]
 8005056:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800505a:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800505e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005062:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800506a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800506e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 8005072:	4b30      	ldr	r3, [pc, #192]	; (8005134 <imu_ahrs_update+0x388>)
 8005074:	edd3 7a00 	vldr	s15, [r3]
 8005078:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800507c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8005080:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005084:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800508c:	4b2a      	ldr	r3, [pc, #168]	; (8005138 <imu_ahrs_update+0x38c>)
 800508e:	edd3 7a00 	vldr	s15, [r3]
 8005092:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005096:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800509a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800509e:	ee76 7a27 	vadd.f32	s15, s12, s15
 80050a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <imu_ahrs_update+0x390>)
 80050ac:	edd3 7a00 	vldr	s15, [r3]
 80050b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80050b4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80050b8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80050bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80050c0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80050c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80050c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx * hx) + (hy * hy));
 80050d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80050d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80050dc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80050e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80050e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050e8:	ee17 0a90 	vmov	r0, s15
 80050ec:	f7fb f9e4 	bl	80004b8 <__aeabi_f2d>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	ec43 2b10 	vmov	d0, r2, r3
 80050f8:	f010 fb64 	bl	80157c4 <sqrt>
 80050fc:	e024      	b.n	8005148 <imu_ahrs_update+0x39c>
 80050fe:	bf00      	nop
 8005100:	20000008 	.word	0x20000008
 8005104:	20001f64 	.word	0x20001f64
 8005108:	20001f68 	.word	0x20001f68
 800510c:	20001f6c 	.word	0x20001f6c
 8005110:	20001fc0 	.word	0x20001fc0
 8005114:	20001f7c 	.word	0x20001f7c
 8005118:	20001f80 	.word	0x20001f80
 800511c:	20001f84 	.word	0x20001f84
 8005120:	20001fb0 	.word	0x20001fb0
 8005124:	20001f88 	.word	0x20001f88
 8005128:	20001f8c 	.word	0x20001f8c
 800512c:	20001f90 	.word	0x20001f90
 8005130:	20001fd0 	.word	0x20001fd0
 8005134:	20001f94 	.word	0x20001f94
 8005138:	20001f98 	.word	0x20001f98
 800513c:	20001f9c 	.word	0x20001f9c
 8005140:	20001fdc 	.word	0x20001fdc
 8005144:	44fa0000 	.word	0x44fa0000
 8005148:	ec53 2b10 	vmov	r2, r3, d0
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	f7fb fd02 	bl	8000b58 <__aeabi_d2f>
 8005154:	4603      	mov	r3, r0
 8005156:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz;
 8005158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515a:	637b      	str	r3, [r7, #52]	; 0x34

	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f * (q1q3 - q0q2);
 800515c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005160:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005168:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800516c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f * (q0q1 + q2q3);
 8005170:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005174:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800517c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005180:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8005184:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005188:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800518c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005190:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005198:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800519c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 80051a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80051a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80051ac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80051b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80051b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80051b8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80051bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80051c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80051c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80051cc:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80051d0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80051d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80051d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 80051e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80051e8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80051ec:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80051f0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80051f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80051f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005200:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005204:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005208:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800520c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005218:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 800521c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005220:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005224:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8005228:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800522c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005234:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005238:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800523c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005240:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005244:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005248:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800524c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005258:	edc7 7a07 	vstr	s15, [r7, #28]

	/*
	 * error is sum of cross product between reference direction
	 * of fields and direction measured by sensors
	 */
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800525c:	4bde      	ldr	r3, [pc, #888]	; (80055d8 <imu_ahrs_update+0x82c>)
 800525e:	ed93 7a00 	vldr	s14, [r3]
 8005262:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800526a:	4bdc      	ldr	r3, [pc, #880]	; (80055dc <imu_ahrs_update+0x830>)
 800526c:	edd3 6a00 	vldr	s13, [r3]
 8005270:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005278:	ee37 7a67 	vsub.f32	s14, s14, s15
 800527c:	4bd8      	ldr	r3, [pc, #864]	; (80055e0 <imu_ahrs_update+0x834>)
 800527e:	edd3 6a00 	vldr	s13, [r3]
 8005282:	edd7 7a07 	vldr	s15, [r7, #28]
 8005286:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800528a:	4bd6      	ldr	r3, [pc, #856]	; (80055e4 <imu_ahrs_update+0x838>)
 800528c:	ed93 6a00 	vldr	s12, [r3]
 8005290:	edd7 7a08 	vldr	s15, [r7, #32]
 8005294:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005298:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800529c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a0:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 80052a4:	4bcd      	ldr	r3, [pc, #820]	; (80055dc <imu_ahrs_update+0x830>)
 80052a6:	ed93 7a00 	vldr	s14, [r3]
 80052aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80052ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052b2:	4bcd      	ldr	r3, [pc, #820]	; (80055e8 <imu_ahrs_update+0x83c>)
 80052b4:	edd3 6a00 	vldr	s13, [r3]
 80052b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80052bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052c4:	4bc7      	ldr	r3, [pc, #796]	; (80055e4 <imu_ahrs_update+0x838>)
 80052c6:	edd3 6a00 	vldr	s13, [r3]
 80052ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80052ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052d2:	4bc6      	ldr	r3, [pc, #792]	; (80055ec <imu_ahrs_update+0x840>)
 80052d4:	ed93 6a00 	vldr	s12, [r3]
 80052d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80052dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80052e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80052e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052e8:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80052ec:	4bbe      	ldr	r3, [pc, #760]	; (80055e8 <imu_ahrs_update+0x83c>)
 80052ee:	ed93 7a00 	vldr	s14, [r3]
 80052f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80052f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052fa:	4bb7      	ldr	r3, [pc, #732]	; (80055d8 <imu_ahrs_update+0x82c>)
 80052fc:	edd3 6a00 	vldr	s13, [r3]
 8005300:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800530c:	4bb7      	ldr	r3, [pc, #732]	; (80055ec <imu_ahrs_update+0x840>)
 800530e:	edd3 6a00 	vldr	s13, [r3]
 8005312:	edd7 7a08 	vldr	s15, [r7, #32]
 8005316:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800531a:	4bb1      	ldr	r3, [pc, #708]	; (80055e0 <imu_ahrs_update+0x834>)
 800531c:	ed93 6a00 	vldr	s12, [r3]
 8005320:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005324:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005328:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800532c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005330:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if (ex != 0.0f && ey != 0.0f && ez != 0.0f) {
 8005334:	edd7 7a06 	vldr	s15, [r7, #24]
 8005338:	eef5 7a40 	vcmp.f32	s15, #0.0
 800533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005340:	d07c      	beq.n	800543c <imu_ahrs_update+0x690>
 8005342:	edd7 7a05 	vldr	s15, [r7, #20]
 8005346:	eef5 7a40 	vcmp.f32	s15, #0.0
 800534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534e:	d075      	beq.n	800543c <imu_ahrs_update+0x690>
 8005350:	edd7 7a04 	vldr	s15, [r7, #16]
 8005354:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535c:	d06e      	beq.n	800543c <imu_ahrs_update+0x690>
		exInt = exInt + ex * AHRSKi * halfT;
 800535e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005362:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80055f0 <imu_ahrs_update+0x844>
 8005366:	ee27 7a87 	vmul.f32	s14, s15, s14
 800536a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800536e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005372:	4ba0      	ldr	r3, [pc, #640]	; (80055f4 <imu_ahrs_update+0x848>)
 8005374:	edd3 7a00 	vldr	s15, [r3]
 8005378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800537c:	4b9d      	ldr	r3, [pc, #628]	; (80055f4 <imu_ahrs_update+0x848>)
 800537e:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * AHRSKi * halfT;
 8005382:	edd7 7a05 	vldr	s15, [r7, #20]
 8005386:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80055f0 <imu_ahrs_update+0x844>
 800538a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800538e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005396:	4b98      	ldr	r3, [pc, #608]	; (80055f8 <imu_ahrs_update+0x84c>)
 8005398:	edd3 7a00 	vldr	s15, [r3]
 800539c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a0:	4b95      	ldr	r3, [pc, #596]	; (80055f8 <imu_ahrs_update+0x84c>)
 80053a2:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * AHRSKi * halfT;
 80053a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80053aa:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80055f0 <imu_ahrs_update+0x844>
 80053ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053b2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80053b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ba:	4b90      	ldr	r3, [pc, #576]	; (80055fc <imu_ahrs_update+0x850>)
 80053bc:	edd3 7a00 	vldr	s15, [r3]
 80053c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053c4:	4b8d      	ldr	r3, [pc, #564]	; (80055fc <imu_ahrs_update+0x850>)
 80053c6:	edc3 7a00 	vstr	s15, [r3]

		gx = gx + AHRSKp * ex + exInt;
 80053ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80053ce:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005600 <imu_ahrs_update+0x854>
 80053d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053d6:	4b8b      	ldr	r3, [pc, #556]	; (8005604 <imu_ahrs_update+0x858>)
 80053d8:	edd3 7a00 	vldr	s15, [r3]
 80053dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053e0:	4b84      	ldr	r3, [pc, #528]	; (80055f4 <imu_ahrs_update+0x848>)
 80053e2:	edd3 7a00 	vldr	s15, [r3]
 80053e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ea:	4b86      	ldr	r3, [pc, #536]	; (8005604 <imu_ahrs_update+0x858>)
 80053ec:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + AHRSKp * ey + eyInt;
 80053f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80053f4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8005600 <imu_ahrs_update+0x854>
 80053f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053fc:	4b82      	ldr	r3, [pc, #520]	; (8005608 <imu_ahrs_update+0x85c>)
 80053fe:	edd3 7a00 	vldr	s15, [r3]
 8005402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005406:	4b7c      	ldr	r3, [pc, #496]	; (80055f8 <imu_ahrs_update+0x84c>)
 8005408:	edd3 7a00 	vldr	s15, [r3]
 800540c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005410:	4b7d      	ldr	r3, [pc, #500]	; (8005608 <imu_ahrs_update+0x85c>)
 8005412:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + AHRSKp * ez + ezInt;
 8005416:	edd7 7a04 	vldr	s15, [r7, #16]
 800541a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8005600 <imu_ahrs_update+0x854>
 800541e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005422:	4b7a      	ldr	r3, [pc, #488]	; (800560c <imu_ahrs_update+0x860>)
 8005424:	edd3 7a00 	vldr	s15, [r3]
 8005428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800542c:	4b73      	ldr	r3, [pc, #460]	; (80055fc <imu_ahrs_update+0x850>)
 800542e:	edd3 7a00 	vldr	s15, [r3]
 8005432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005436:	4b75      	ldr	r3, [pc, #468]	; (800560c <imu_ahrs_update+0x860>)
 8005438:	edc3 7a00 	vstr	s15, [r3]
	}

	tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 800543c:	4b74      	ldr	r3, [pc, #464]	; (8005610 <imu_ahrs_update+0x864>)
 800543e:	edd3 7a00 	vldr	s15, [r3]
 8005442:	eeb1 7a67 	vneg.f32	s14, s15
 8005446:	4b6f      	ldr	r3, [pc, #444]	; (8005604 <imu_ahrs_update+0x858>)
 8005448:	edd3 7a00 	vldr	s15, [r3]
 800544c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005450:	4b70      	ldr	r3, [pc, #448]	; (8005614 <imu_ahrs_update+0x868>)
 8005452:	edd3 6a00 	vldr	s13, [r3]
 8005456:	4b6c      	ldr	r3, [pc, #432]	; (8005608 <imu_ahrs_update+0x85c>)
 8005458:	edd3 7a00 	vldr	s15, [r3]
 800545c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005464:	4b6c      	ldr	r3, [pc, #432]	; (8005618 <imu_ahrs_update+0x86c>)
 8005466:	edd3 6a00 	vldr	s13, [r3]
 800546a:	4b68      	ldr	r3, [pc, #416]	; (800560c <imu_ahrs_update+0x860>)
 800546c:	edd3 7a00 	vldr	s15, [r3]
 8005470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005478:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800547c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005480:	4b66      	ldr	r3, [pc, #408]	; (800561c <imu_ahrs_update+0x870>)
 8005482:	edd3 7a00 	vldr	s15, [r3]
 8005486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800548a:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 800548e:	4b63      	ldr	r3, [pc, #396]	; (800561c <imu_ahrs_update+0x870>)
 8005490:	ed93 7a00 	vldr	s14, [r3]
 8005494:	4b5b      	ldr	r3, [pc, #364]	; (8005604 <imu_ahrs_update+0x858>)
 8005496:	edd3 7a00 	vldr	s15, [r3]
 800549a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800549e:	4b5d      	ldr	r3, [pc, #372]	; (8005614 <imu_ahrs_update+0x868>)
 80054a0:	edd3 6a00 	vldr	s13, [r3]
 80054a4:	4b59      	ldr	r3, [pc, #356]	; (800560c <imu_ahrs_update+0x860>)
 80054a6:	edd3 7a00 	vldr	s15, [r3]
 80054aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054b2:	4b59      	ldr	r3, [pc, #356]	; (8005618 <imu_ahrs_update+0x86c>)
 80054b4:	edd3 6a00 	vldr	s13, [r3]
 80054b8:	4b53      	ldr	r3, [pc, #332]	; (8005608 <imu_ahrs_update+0x85c>)
 80054ba:	edd3 7a00 	vldr	s15, [r3]
 80054be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80054ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ce:	4b50      	ldr	r3, [pc, #320]	; (8005610 <imu_ahrs_update+0x864>)
 80054d0:	edd3 7a00 	vldr	s15, [r3]
 80054d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d8:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 80054dc:	4b4f      	ldr	r3, [pc, #316]	; (800561c <imu_ahrs_update+0x870>)
 80054de:	ed93 7a00 	vldr	s14, [r3]
 80054e2:	4b49      	ldr	r3, [pc, #292]	; (8005608 <imu_ahrs_update+0x85c>)
 80054e4:	edd3 7a00 	vldr	s15, [r3]
 80054e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ec:	4b48      	ldr	r3, [pc, #288]	; (8005610 <imu_ahrs_update+0x864>)
 80054ee:	edd3 6a00 	vldr	s13, [r3]
 80054f2:	4b46      	ldr	r3, [pc, #280]	; (800560c <imu_ahrs_update+0x860>)
 80054f4:	edd3 7a00 	vldr	s15, [r3]
 80054f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005500:	4b45      	ldr	r3, [pc, #276]	; (8005618 <imu_ahrs_update+0x86c>)
 8005502:	edd3 6a00 	vldr	s13, [r3]
 8005506:	4b3f      	ldr	r3, [pc, #252]	; (8005604 <imu_ahrs_update+0x858>)
 8005508:	edd3 7a00 	vldr	s15, [r3]
 800550c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005514:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800551c:	4b3d      	ldr	r3, [pc, #244]	; (8005614 <imu_ahrs_update+0x868>)
 800551e:	edd3 7a00 	vldr	s15, [r3]
 8005522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005526:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 800552a:	4b3c      	ldr	r3, [pc, #240]	; (800561c <imu_ahrs_update+0x870>)
 800552c:	ed93 7a00 	vldr	s14, [r3]
 8005530:	4b36      	ldr	r3, [pc, #216]	; (800560c <imu_ahrs_update+0x860>)
 8005532:	edd3 7a00 	vldr	s15, [r3]
 8005536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800553a:	4b35      	ldr	r3, [pc, #212]	; (8005610 <imu_ahrs_update+0x864>)
 800553c:	edd3 6a00 	vldr	s13, [r3]
 8005540:	4b31      	ldr	r3, [pc, #196]	; (8005608 <imu_ahrs_update+0x85c>)
 8005542:	edd3 7a00 	vldr	s15, [r3]
 8005546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800554a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800554e:	4b31      	ldr	r3, [pc, #196]	; (8005614 <imu_ahrs_update+0x868>)
 8005550:	edd3 6a00 	vldr	s13, [r3]
 8005554:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <imu_ahrs_update+0x858>)
 8005556:	edd3 7a00 	vldr	s15, [r3]
 800555a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800555e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005562:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800556a:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <imu_ahrs_update+0x86c>)
 800556c:	edd3 7a00 	vldr	s15, [r3]
 8005570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005574:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 8005578:	edd7 7a03 	vldr	s15, [r7, #12]
 800557c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005580:	edd7 7a02 	vldr	s15, [r7, #8]
 8005584:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800558c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005590:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005598:	edd7 7a00 	vldr	s15, [r7]
 800559c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80055a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055a4:	eeb0 0a67 	vmov.f32	s0, s15
 80055a8:	f7fb fe30 	bl	800120c <inv_sqrt>
 80055ac:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 80055b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80055b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055bc:	4b17      	ldr	r3, [pc, #92]	; (800561c <imu_ahrs_update+0x870>)
 80055be:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 80055c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80055c6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	4b10      	ldr	r3, [pc, #64]	; (8005610 <imu_ahrs_update+0x864>)
 80055d0:	edc3 7a00 	vstr	s15, [r3]
 80055d4:	e024      	b.n	8005620 <imu_ahrs_update+0x874>
 80055d6:	bf00      	nop
 80055d8:	20001f8c 	.word	0x20001f8c
 80055dc:	20001f90 	.word	0x20001f90
 80055e0:	20001f98 	.word	0x20001f98
 80055e4:	20001f9c 	.word	0x20001f9c
 80055e8:	20001f88 	.word	0x20001f88
 80055ec:	20001f94 	.word	0x20001f94
 80055f0:	00000000 	.word	0x00000000
 80055f4:	20001f70 	.word	0x20001f70
 80055f8:	20001f74 	.word	0x20001f74
 80055fc:	20001f78 	.word	0x20001f78
 8005600:	3e4ccccd 	.word	0x3e4ccccd
 8005604:	20001f7c 	.word	0x20001f7c
 8005608:	20001f80 	.word	0x20001f80
 800560c:	20001f84 	.word	0x20001f84
 8005610:	20001f64 	.word	0x20001f64
 8005614:	20001f68 	.word	0x20001f68
 8005618:	20001f6c 	.word	0x20001f6c
 800561c:	20000008 	.word	0x20000008
	q2 = tempq2 * norm;
 8005620:	ed97 7a01 	vldr	s14, [r7, #4]
 8005624:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562c:	4b07      	ldr	r3, [pc, #28]	; (800564c <imu_ahrs_update+0x8a0>)
 800562e:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 8005632:	ed97 7a00 	vldr	s14, [r7]
 8005636:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	4b04      	ldr	r3, [pc, #16]	; (8005650 <imu_ahrs_update+0x8a4>)
 8005640:	edc3 7a00 	vstr	s15, [r3]
}
 8005644:	bf00      	nop
 8005646:	3778      	adds	r7, #120	; 0x78
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20001f68 	.word	0x20001f68
 8005650:	20001f6c 	.word	0x20001f6c
 8005654:	00000000 	.word	0x00000000

08005658 <imu_attitude_update>:

void imu_attitude_update(void) {
 8005658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800565c:	af00      	add	r7, sp, #0
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
	} else if (IMU_ORIENTATION == 1) {
		/* yaw    -pi----pi */
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 800565e:	4b7c      	ldr	r3, [pc, #496]	; (8005850 <imu_attitude_update+0x1f8>)
 8005660:	edd3 7a00 	vldr	s15, [r3]
 8005664:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005668:	4b7a      	ldr	r3, [pc, #488]	; (8005854 <imu_attitude_update+0x1fc>)
 800566a:	edd3 7a00 	vldr	s15, [r3]
 800566e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005672:	4b79      	ldr	r3, [pc, #484]	; (8005858 <imu_attitude_update+0x200>)
 8005674:	edd3 7a00 	vldr	s15, [r3]
 8005678:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800567c:	4b77      	ldr	r3, [pc, #476]	; (800585c <imu_attitude_update+0x204>)
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005686:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q2 * q2 - 2 * q3 * q3 + 1) * IMU_YAW_INVERT * 57.2958;
 800568a:	ee17 0a90 	vmov	r0, s15
 800568e:	f7fa ff13 	bl	80004b8 <__aeabi_f2d>
 8005692:	4680      	mov	r8, r0
 8005694:	4689      	mov	r9, r1
 8005696:	4b6f      	ldr	r3, [pc, #444]	; (8005854 <imu_attitude_update+0x1fc>)
 8005698:	edd3 7a00 	vldr	s15, [r3]
 800569c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80056a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056a4:	4b6b      	ldr	r3, [pc, #428]	; (8005854 <imu_attitude_update+0x1fc>)
 80056a6:	edd3 7a00 	vldr	s15, [r3]
 80056aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056ae:	4b6b      	ldr	r3, [pc, #428]	; (800585c <imu_attitude_update+0x204>)
 80056b0:	edd3 7a00 	vldr	s15, [r3]
 80056b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80056b8:	4b68      	ldr	r3, [pc, #416]	; (800585c <imu_attitude_update+0x204>)
 80056ba:	edd3 7a00 	vldr	s15, [r3]
 80056be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056ce:	ee17 0a90 	vmov	r0, s15
 80056d2:	f7fa fef1 	bl	80004b8 <__aeabi_f2d>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	ec43 2b11 	vmov	d1, r2, r3
 80056de:	ec49 8b10 	vmov	d0, r8, r9
 80056e2:	f010 f86d 	bl	80157c0 <atan2>
 80056e6:	ec51 0b10 	vmov	r0, r1, d0
 80056ea:	a357      	add	r3, pc, #348	; (adr r3, 8005848 <imu_attitude_update+0x1f0>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f7fa ff3a 	bl	8000568 <__aeabi_dmul>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4610      	mov	r0, r2
 80056fa:	4619      	mov	r1, r3
 80056fc:	f7fb fa2c 	bl	8000b58 <__aeabi_d2f>
 8005700:	4603      	mov	r3, r0
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8005702:	4a57      	ldr	r2, [pc, #348]	; (8005860 <imu_attitude_update+0x208>)
 8005704:	6093      	str	r3, [r2, #8]
		/* pitch  -pi/2----pi/2 */
		imu_heading.rol = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_ROLL_INVERT * 57.2958;
 8005706:	4b52      	ldr	r3, [pc, #328]	; (8005850 <imu_attitude_update+0x1f8>)
 8005708:	edd3 7a00 	vldr	s15, [r3]
 800570c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8005710:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005714:	4b51      	ldr	r3, [pc, #324]	; (800585c <imu_attitude_update+0x204>)
 8005716:	edd3 7a00 	vldr	s15, [r3]
 800571a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800571e:	4b4e      	ldr	r3, [pc, #312]	; (8005858 <imu_attitude_update+0x200>)
 8005720:	edd3 7a00 	vldr	s15, [r3]
 8005724:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005728:	4b4a      	ldr	r3, [pc, #296]	; (8005854 <imu_attitude_update+0x1fc>)
 800572a:	edd3 7a00 	vldr	s15, [r3]
 800572e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005736:	ee17 0a90 	vmov	r0, s15
 800573a:	f7fa febd 	bl	80004b8 <__aeabi_f2d>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	ec43 2b10 	vmov	d0, r2, r3
 8005746:	f010 f807 	bl	8015758 <asin>
 800574a:	ec53 2b10 	vmov	r2, r3, d0
 800574e:	4614      	mov	r4, r2
 8005750:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005754:	a33c      	add	r3, pc, #240	; (adr r3, 8005848 <imu_attitude_update+0x1f0>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	f7fa ff03 	bl	8000568 <__aeabi_dmul>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	f7fb f9f5 	bl	8000b58 <__aeabi_d2f>
 800576e:	4603      	mov	r3, r0
 8005770:	4a3b      	ldr	r2, [pc, #236]	; (8005860 <imu_attitude_update+0x208>)
 8005772:	6053      	str	r3, [r2, #4]
		/* roll   -pi----pi  */
		imu_heading.pit = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8005774:	4b37      	ldr	r3, [pc, #220]	; (8005854 <imu_attitude_update+0x1fc>)
 8005776:	edd3 7a00 	vldr	s15, [r3]
 800577a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800577e:	4b37      	ldr	r3, [pc, #220]	; (800585c <imu_attitude_update+0x204>)
 8005780:	edd3 7a00 	vldr	s15, [r3]
 8005784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005788:	4b33      	ldr	r3, [pc, #204]	; (8005858 <imu_attitude_update+0x200>)
 800578a:	edd3 7a00 	vldr	s15, [r3]
 800578e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005792:	4b2f      	ldr	r3, [pc, #188]	; (8005850 <imu_attitude_update+0x1f8>)
 8005794:	edd3 7a00 	vldr	s15, [r3]
 8005798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800579c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a0:	ee17 0a90 	vmov	r0, s15
 80057a4:	f7fa fe88 	bl	80004b8 <__aeabi_f2d>
 80057a8:	4604      	mov	r4, r0
 80057aa:	460d      	mov	r5, r1
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_PITCH_INVERT;
 80057ac:	4b28      	ldr	r3, [pc, #160]	; (8005850 <imu_attitude_update+0x1f8>)
 80057ae:	edd3 7a00 	vldr	s15, [r3]
 80057b2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80057b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057ba:	4b25      	ldr	r3, [pc, #148]	; (8005850 <imu_attitude_update+0x1f8>)
 80057bc:	edd3 7a00 	vldr	s15, [r3]
 80057c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057c4:	4b23      	ldr	r3, [pc, #140]	; (8005854 <imu_attitude_update+0x1fc>)
 80057c6:	edd3 7a00 	vldr	s15, [r3]
 80057ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057ce:	4b21      	ldr	r3, [pc, #132]	; (8005854 <imu_attitude_update+0x1fc>)
 80057d0:	edd3 7a00 	vldr	s15, [r3]
 80057d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057e0:	ee77 7a87 	vadd.f32	s15, s15, s14
		imu_heading.pit = atan2(2 * q2 * q3 + 2 * q0 * q1,
 80057e4:	ee17 0a90 	vmov	r0, s15
 80057e8:	f7fa fe66 	bl	80004b8 <__aeabi_f2d>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	ec43 2b11 	vmov	d1, r2, r3
 80057f4:	ec45 4b10 	vmov	d0, r4, r5
 80057f8:	f00f ffe2 	bl	80157c0 <atan2>
 80057fc:	ec53 2b10 	vmov	r2, r3, d0
 8005800:	4610      	mov	r0, r2
 8005802:	4619      	mov	r1, r3
 8005804:	f7fb f9a8 	bl	8000b58 <__aeabi_d2f>
 8005808:	4603      	mov	r3, r0
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef1 7a67 	vneg.f32	s15, s15
 8005812:	4b13      	ldr	r3, [pc, #76]	; (8005860 <imu_attitude_update+0x208>)
 8005814:	edc3 7a00 	vstr	s15, [r3]

		debugangle = imu_heading.pit* 57.2958;
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <imu_attitude_update+0x208>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f7fa fe4b 	bl	80004b8 <__aeabi_f2d>
 8005822:	a309      	add	r3, pc, #36	; (adr r3, 8005848 <imu_attitude_update+0x1f0>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f7fa fe9e 	bl	8000568 <__aeabi_dmul>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4610      	mov	r0, r2
 8005832:	4619      	mov	r1, r3
 8005834:	f7fb f990 	bl	8000b58 <__aeabi_d2f>
 8005838:	4603      	mov	r3, r0
 800583a:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <imu_attitude_update+0x20c>)
 800583c:	6013      	str	r3, [r2, #0]
//		compAngleX = (0.98 * gyrAngleX + 0.02 * accAngleX )* 57.2958;
//		last_time[1] = last_time[0];

	}

}
 800583e:	bf00      	nop
 8005840:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005844:	f3af 8000 	nop.w
 8005848:	c63f1412 	.word	0xc63f1412
 800584c:	404ca5dc 	.word	0x404ca5dc
 8005850:	20001f64 	.word	0x20001f64
 8005854:	20001f68 	.word	0x20001f68
 8005858:	20000008 	.word	0x20000008
 800585c:	20001f6c 	.word	0x20001f6c
 8005860:	20001fa4 	.word	0x20001fa4
 8005864:	20001fa0 	.word	0x20001fa0

08005868 <config_motors>:


extern motor_data_t can_motors[24];

void config_motors()
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 24; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	71fb      	strb	r3, [r7, #7]
 8005872:	e03c      	b.n	80058ee <config_motors+0x86>
	{
		can_motors[i].motor_type = 0;
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	4abf      	ldr	r2, [pc, #764]	; (8005b74 <config_motors+0x30c>)
 8005878:	21a8      	movs	r1, #168	; 0xa8
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	4413      	add	r3, r2
 8005880:	3302      	adds	r3, #2
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
		can_motors[i].rpm_pid.output 	= 0;
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	4aba      	ldr	r2, [pc, #744]	; (8005b74 <config_motors+0x30c>)
 800588a:	21a8      	movs	r1, #168	; 0xa8
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	3334      	adds	r3, #52	; 0x34
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
		can_motors[i].rpm_pid.integral 	= 0;
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	4ab5      	ldr	r2, [pc, #724]	; (8005b74 <config_motors+0x30c>)
 800589e:	21a8      	movs	r1, #168	; 0xa8
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	3324      	adds	r3, #36	; 0x24
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.output 	= 0;
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	4ab0      	ldr	r2, [pc, #704]	; (8005b74 <config_motors+0x30c>)
 80058b2:	21a8      	movs	r1, #168	; 0xa8
 80058b4:	fb01 f303 	mul.w	r3, r1, r3
 80058b8:	4413      	add	r3, r2
 80058ba:	3368      	adds	r3, #104	; 0x68
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.integral = 0;
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	4aab      	ldr	r2, [pc, #684]	; (8005b74 <config_motors+0x30c>)
 80058c6:	21a8      	movs	r1, #168	; 0xa8
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	4413      	add	r3, r2
 80058ce:	3358      	adds	r3, #88	; 0x58
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_data.ticks 	= 0;
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	4aa6      	ldr	r2, [pc, #664]	; (8005b74 <config_motors+0x30c>)
 80058da:	21a8      	movs	r1, #168	; 0xa8
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	3378      	adds	r3, #120	; 0x78
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 24; i++)
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	3301      	adds	r3, #1
 80058ec:	71fb      	strb	r3, [r7, #7]
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	2b17      	cmp	r3, #23
 80058f2:	d9bf      	bls.n	8005874 <config_motors+0xc>
	}

#ifdef FR_MOTOR_ID
	uint8_t motor_id = FR_MOTOR_ID -1;
 80058f4:	230c      	movs	r3, #12
 80058f6:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_STEPS;
 80058f8:	79bb      	ldrb	r3, [r7, #6]
 80058fa:	4a9e      	ldr	r2, [pc, #632]	; (8005b74 <config_motors+0x30c>)
 80058fc:	21a8      	movs	r1, #168	; 0xa8
 80058fe:	fb01 f303 	mul.w	r3, r1, r3
 8005902:	4413      	add	r3, r2
 8005904:	3302      	adds	r3, #2
 8005906:	2204      	movs	r2, #4
 8005908:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 800590a:	79bb      	ldrb	r3, [r7, #6]
 800590c:	4a99      	ldr	r2, [pc, #612]	; (8005b74 <config_motors+0x30c>)
 800590e:	21a8      	movs	r1, #168	; 0xa8
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	4413      	add	r3, r2
 8005916:	3390      	adds	r3, #144	; 0x90
 8005918:	4a97      	ldr	r2, [pc, #604]	; (8005b78 <config_motors+0x310>)
 800591a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 800591c:	79bb      	ldrb	r3, [r7, #6]
 800591e:	4a95      	ldr	r2, [pc, #596]	; (8005b74 <config_motors+0x30c>)
 8005920:	21a8      	movs	r1, #168	; 0xa8
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	337c      	adds	r3, #124	; 0x7c
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 800592e:	79bb      	ldrb	r3, [r7, #6]
 8005930:	4a90      	ldr	r2, [pc, #576]	; (8005b74 <config_motors+0x30c>)
 8005932:	21a8      	movs	r1, #168	; 0xa8
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	4413      	add	r3, r2
 800593a:	3384      	adds	r3, #132	; 0x84
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005942:	79bb      	ldrb	r3, [r7, #6]
 8005944:	4a8b      	ldr	r2, [pc, #556]	; (8005b74 <config_motors+0x30c>)
 8005946:	21a8      	movs	r1, #168	; 0xa8
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	4413      	add	r3, r2
 800594e:	3380      	adds	r3, #128	; 0x80
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005956:	79bb      	ldrb	r3, [r7, #6]
 8005958:	4a86      	ldr	r2, [pc, #536]	; (8005b74 <config_motors+0x30c>)
 800595a:	21a8      	movs	r1, #168	; 0xa8
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	4413      	add	r3, r2
 8005962:	338c      	adds	r3, #140	; 0x8c
 8005964:	4a85      	ldr	r2, [pc, #532]	; (8005b7c <config_motors+0x314>)
 8005966:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8005968:	79bb      	ldrb	r3, [r7, #6]
 800596a:	4a82      	ldr	r2, [pc, #520]	; (8005b74 <config_motors+0x30c>)
 800596c:	21a8      	movs	r1, #168	; 0xa8
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	4413      	add	r3, r2
 8005974:	3388      	adds	r3, #136	; 0x88
 8005976:	4a82      	ldr	r2, [pc, #520]	; (8005b80 <config_motors+0x318>)
 8005978:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 800597a:	79bb      	ldrb	r3, [r7, #6]
 800597c:	4a7d      	ldr	r2, [pc, #500]	; (8005b74 <config_motors+0x30c>)
 800597e:	21a8      	movs	r1, #168	; 0xa8
 8005980:	fb01 f303 	mul.w	r3, r1, r3
 8005984:	4413      	add	r3, r2
 8005986:	3344      	adds	r3, #68	; 0x44
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 800598e:	79bb      	ldrb	r3, [r7, #6]
 8005990:	4a78      	ldr	r2, [pc, #480]	; (8005b74 <config_motors+0x30c>)
 8005992:	21a8      	movs	r1, #168	; 0xa8
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	4413      	add	r3, r2
 800599a:	3348      	adds	r3, #72	; 0x48
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 80059a2:	79bb      	ldrb	r3, [r7, #6]
 80059a4:	4a73      	ldr	r2, [pc, #460]	; (8005b74 <config_motors+0x30c>)
 80059a6:	21a8      	movs	r1, #168	; 0xa8
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	4413      	add	r3, r2
 80059ae:	334c      	adds	r3, #76	; 0x4c
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 80059b6:	79bb      	ldrb	r3, [r7, #6]
 80059b8:	4a6e      	ldr	r2, [pc, #440]	; (8005b74 <config_motors+0x30c>)
 80059ba:	21a8      	movs	r1, #168	; 0xa8
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	4413      	add	r3, r2
 80059c2:	335c      	adds	r3, #92	; 0x5c
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 80059ca:	79bb      	ldrb	r3, [r7, #6]
 80059cc:	4a69      	ldr	r2, [pc, #420]	; (8005b74 <config_motors+0x30c>)
 80059ce:	21a8      	movs	r1, #168	; 0xa8
 80059d0:	fb01 f303 	mul.w	r3, r1, r3
 80059d4:	4413      	add	r3, r2
 80059d6:	3360      	adds	r3, #96	; 0x60
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 80059de:	79bb      	ldrb	r3, [r7, #6]
 80059e0:	4a64      	ldr	r2, [pc, #400]	; (8005b74 <config_motors+0x30c>)
 80059e2:	21a8      	movs	r1, #168	; 0xa8
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	3364      	adds	r3, #100	; 0x64
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 80059f2:	79bb      	ldrb	r3, [r7, #6]
 80059f4:	4a5f      	ldr	r2, [pc, #380]	; (8005b74 <config_motors+0x30c>)
 80059f6:	21a8      	movs	r1, #168	; 0xa8
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	4413      	add	r3, r2
 80059fe:	336c      	adds	r3, #108	; 0x6c
 8005a00:	4a60      	ldr	r2, [pc, #384]	; (8005b84 <config_motors+0x31c>)
 8005a02:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= CHASSIS_KP;
 8005a04:	79bb      	ldrb	r3, [r7, #6]
 8005a06:	4a5b      	ldr	r2, [pc, #364]	; (8005b74 <config_motors+0x30c>)
 8005a08:	21a8      	movs	r1, #168	; 0xa8
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	4413      	add	r3, r2
 8005a10:	3310      	adds	r3, #16
 8005a12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005a16:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= CHASSIS_KI;
 8005a18:	79bb      	ldrb	r3, [r7, #6]
 8005a1a:	4a56      	ldr	r2, [pc, #344]	; (8005b74 <config_motors+0x30c>)
 8005a1c:	21a8      	movs	r1, #168	; 0xa8
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	4413      	add	r3, r2
 8005a24:	3314      	adds	r3, #20
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= CHASSIS_KD;
 8005a2c:	79bb      	ldrb	r3, [r7, #6]
 8005a2e:	4a51      	ldr	r2, [pc, #324]	; (8005b74 <config_motors+0x30c>)
 8005a30:	21a8      	movs	r1, #168	; 0xa8
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	4413      	add	r3, r2
 8005a38:	3318      	adds	r3, #24
 8005a3a:	4a53      	ldr	r2, [pc, #332]	; (8005b88 <config_motors+0x320>)
 8005a3c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= CHASSIS_INT_MAX;
 8005a3e:	79bb      	ldrb	r3, [r7, #6]
 8005a40:	4a4c      	ldr	r2, [pc, #304]	; (8005b74 <config_motors+0x30c>)
 8005a42:	21a8      	movs	r1, #168	; 0xa8
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	4413      	add	r3, r2
 8005a4a:	3328      	adds	r3, #40	; 0x28
 8005a4c:	4a4f      	ldr	r2, [pc, #316]	; (8005b8c <config_motors+0x324>)
 8005a4e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= CHASSIS_MAX_CURRENT;
 8005a50:	79bb      	ldrb	r3, [r7, #6]
 8005a52:	4a48      	ldr	r2, [pc, #288]	; (8005b74 <config_motors+0x30c>)
 8005a54:	21a8      	movs	r1, #168	; 0xa8
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	332c      	adds	r3, #44	; 0x2c
 8005a5e:	4a4b      	ldr	r2, [pc, #300]	; (8005b8c <config_motors+0x324>)
 8005a60:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= -CHASSIS_MAX_CURRENT;
 8005a62:	79bb      	ldrb	r3, [r7, #6]
 8005a64:	4a43      	ldr	r2, [pc, #268]	; (8005b74 <config_motors+0x30c>)
 8005a66:	21a8      	movs	r1, #168	; 0xa8
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3330      	adds	r3, #48	; 0x30
 8005a70:	4a47      	ldr	r2, [pc, #284]	; (8005b90 <config_motors+0x328>)
 8005a72:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 8005a74:	79bb      	ldrb	r3, [r7, #6]
 8005a76:	4a3f      	ldr	r2, [pc, #252]	; (8005b74 <config_motors+0x30c>)
 8005a78:	21a8      	movs	r1, #168	; 0xa8
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	4413      	add	r3, r2
 8005a80:	3338      	adds	r3, #56	; 0x38
 8005a82:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005a86:	601a      	str	r2, [r3, #0]
#endif

#ifdef FL_MOTOR_ID
	motor_id = FL_MOTOR_ID -1;
 8005a88:	230d      	movs	r3, #13
 8005a8a:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8005a8c:	79bb      	ldrb	r3, [r7, #6]
 8005a8e:	4a39      	ldr	r2, [pc, #228]	; (8005b74 <config_motors+0x30c>)
 8005a90:	21a8      	movs	r1, #168	; 0xa8
 8005a92:	fb01 f303 	mul.w	r3, r1, r3
 8005a96:	4413      	add	r3, r2
 8005a98:	3302      	adds	r3, #2
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8005a9e:	79bb      	ldrb	r3, [r7, #6]
 8005aa0:	4a34      	ldr	r2, [pc, #208]	; (8005b74 <config_motors+0x30c>)
 8005aa2:	21a8      	movs	r1, #168	; 0xa8
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3390      	adds	r3, #144	; 0x90
 8005aac:	4a32      	ldr	r2, [pc, #200]	; (8005b78 <config_motors+0x310>)
 8005aae:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 8005ab0:	79bb      	ldrb	r3, [r7, #6]
 8005ab2:	4a30      	ldr	r2, [pc, #192]	; (8005b74 <config_motors+0x30c>)
 8005ab4:	21a8      	movs	r1, #168	; 0xa8
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	337c      	adds	r3, #124	; 0x7c
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 8005ac2:	79bb      	ldrb	r3, [r7, #6]
 8005ac4:	4a2b      	ldr	r2, [pc, #172]	; (8005b74 <config_motors+0x30c>)
 8005ac6:	21a8      	movs	r1, #168	; 0xa8
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	3384      	adds	r3, #132	; 0x84
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005ad6:	79bb      	ldrb	r3, [r7, #6]
 8005ad8:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <config_motors+0x30c>)
 8005ada:	21a8      	movs	r1, #168	; 0xa8
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3380      	adds	r3, #128	; 0x80
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005aea:	79bb      	ldrb	r3, [r7, #6]
 8005aec:	4a21      	ldr	r2, [pc, #132]	; (8005b74 <config_motors+0x30c>)
 8005aee:	21a8      	movs	r1, #168	; 0xa8
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	4413      	add	r3, r2
 8005af6:	338c      	adds	r3, #140	; 0x8c
 8005af8:	4a20      	ldr	r2, [pc, #128]	; (8005b7c <config_motors+0x314>)
 8005afa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8005afc:	79bb      	ldrb	r3, [r7, #6]
 8005afe:	4a1d      	ldr	r2, [pc, #116]	; (8005b74 <config_motors+0x30c>)
 8005b00:	21a8      	movs	r1, #168	; 0xa8
 8005b02:	fb01 f303 	mul.w	r3, r1, r3
 8005b06:	4413      	add	r3, r2
 8005b08:	3388      	adds	r3, #136	; 0x88
 8005b0a:	4a1d      	ldr	r2, [pc, #116]	; (8005b80 <config_motors+0x318>)
 8005b0c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 8005b0e:	79bb      	ldrb	r3, [r7, #6]
 8005b10:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <config_motors+0x30c>)
 8005b12:	21a8      	movs	r1, #168	; 0xa8
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	3344      	adds	r3, #68	; 0x44
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 8005b22:	79bb      	ldrb	r3, [r7, #6]
 8005b24:	4a13      	ldr	r2, [pc, #76]	; (8005b74 <config_motors+0x30c>)
 8005b26:	21a8      	movs	r1, #168	; 0xa8
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3348      	adds	r3, #72	; 0x48
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 8005b36:	79bb      	ldrb	r3, [r7, #6]
 8005b38:	4a0e      	ldr	r2, [pc, #56]	; (8005b74 <config_motors+0x30c>)
 8005b3a:	21a8      	movs	r1, #168	; 0xa8
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	334c      	adds	r3, #76	; 0x4c
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 8005b4a:	79bb      	ldrb	r3, [r7, #6]
 8005b4c:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <config_motors+0x30c>)
 8005b4e:	21a8      	movs	r1, #168	; 0xa8
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	335c      	adds	r3, #92	; 0x5c
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 8005b5e:	79bb      	ldrb	r3, [r7, #6]
 8005b60:	4a04      	ldr	r2, [pc, #16]	; (8005b74 <config_motors+0x30c>)
 8005b62:	21a8      	movs	r1, #168	; 0xa8
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	4413      	add	r3, r2
 8005b6a:	3360      	adds	r3, #96	; 0x60
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	e010      	b.n	8005b94 <config_motors+0x32c>
 8005b72:	bf00      	nop
 8005b74:	20000ea8 	.word	0x20000ea8
 8005b78:	4199999a 	.word	0x4199999a
 8005b7c:	40c90fdb 	.word	0x40c90fdb
 8005b80:	c0c90fdb 	.word	0xc0c90fdb
 8005b84:	460ca000 	.word	0x460ca000
 8005b88:	3dcccccd 	.word	0x3dcccccd
 8005b8c:	461c4000 	.word	0x461c4000
 8005b90:	c61c4000 	.word	0xc61c4000
 8005b94:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8005b96:	79bb      	ldrb	r3, [r7, #6]
 8005b98:	4abb      	ldr	r2, [pc, #748]	; (8005e88 <config_motors+0x620>)
 8005b9a:	21a8      	movs	r1, #168	; 0xa8
 8005b9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3364      	adds	r3, #100	; 0x64
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 8005baa:	79bb      	ldrb	r3, [r7, #6]
 8005bac:	4ab6      	ldr	r2, [pc, #728]	; (8005e88 <config_motors+0x620>)
 8005bae:	21a8      	movs	r1, #168	; 0xa8
 8005bb0:	fb01 f303 	mul.w	r3, r1, r3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	336c      	adds	r3, #108	; 0x6c
 8005bb8:	4ab4      	ldr	r2, [pc, #720]	; (8005e8c <config_motors+0x624>)
 8005bba:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= CHASSIS_KP;
 8005bbc:	79bb      	ldrb	r3, [r7, #6]
 8005bbe:	4ab2      	ldr	r2, [pc, #712]	; (8005e88 <config_motors+0x620>)
 8005bc0:	21a8      	movs	r1, #168	; 0xa8
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3310      	adds	r3, #16
 8005bca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005bce:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= CHASSIS_KI;
 8005bd0:	79bb      	ldrb	r3, [r7, #6]
 8005bd2:	4aad      	ldr	r2, [pc, #692]	; (8005e88 <config_motors+0x620>)
 8005bd4:	21a8      	movs	r1, #168	; 0xa8
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	4413      	add	r3, r2
 8005bdc:	3314      	adds	r3, #20
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= CHASSIS_KD;
 8005be4:	79bb      	ldrb	r3, [r7, #6]
 8005be6:	4aa8      	ldr	r2, [pc, #672]	; (8005e88 <config_motors+0x620>)
 8005be8:	21a8      	movs	r1, #168	; 0xa8
 8005bea:	fb01 f303 	mul.w	r3, r1, r3
 8005bee:	4413      	add	r3, r2
 8005bf0:	3318      	adds	r3, #24
 8005bf2:	4aa7      	ldr	r2, [pc, #668]	; (8005e90 <config_motors+0x628>)
 8005bf4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= CHASSIS_INT_MAX;
 8005bf6:	79bb      	ldrb	r3, [r7, #6]
 8005bf8:	4aa3      	ldr	r2, [pc, #652]	; (8005e88 <config_motors+0x620>)
 8005bfa:	21a8      	movs	r1, #168	; 0xa8
 8005bfc:	fb01 f303 	mul.w	r3, r1, r3
 8005c00:	4413      	add	r3, r2
 8005c02:	3328      	adds	r3, #40	; 0x28
 8005c04:	4aa3      	ldr	r2, [pc, #652]	; (8005e94 <config_motors+0x62c>)
 8005c06:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= CHASSIS_MAX_CURRENT;
 8005c08:	79bb      	ldrb	r3, [r7, #6]
 8005c0a:	4a9f      	ldr	r2, [pc, #636]	; (8005e88 <config_motors+0x620>)
 8005c0c:	21a8      	movs	r1, #168	; 0xa8
 8005c0e:	fb01 f303 	mul.w	r3, r1, r3
 8005c12:	4413      	add	r3, r2
 8005c14:	332c      	adds	r3, #44	; 0x2c
 8005c16:	4a9f      	ldr	r2, [pc, #636]	; (8005e94 <config_motors+0x62c>)
 8005c18:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= -CHASSIS_MAX_CURRENT;
 8005c1a:	79bb      	ldrb	r3, [r7, #6]
 8005c1c:	4a9a      	ldr	r2, [pc, #616]	; (8005e88 <config_motors+0x620>)
 8005c1e:	21a8      	movs	r1, #168	; 0xa8
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	4413      	add	r3, r2
 8005c26:	3330      	adds	r3, #48	; 0x30
 8005c28:	4a9b      	ldr	r2, [pc, #620]	; (8005e98 <config_motors+0x630>)
 8005c2a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 8005c2c:	79bb      	ldrb	r3, [r7, #6]
 8005c2e:	4a96      	ldr	r2, [pc, #600]	; (8005e88 <config_motors+0x620>)
 8005c30:	21a8      	movs	r1, #168	; 0xa8
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	4413      	add	r3, r2
 8005c38:	3338      	adds	r3, #56	; 0x38
 8005c3a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005c3e:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID -1;
 8005c40:	230e      	movs	r3, #14
 8005c42:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8005c44:	79bb      	ldrb	r3, [r7, #6]
 8005c46:	4a90      	ldr	r2, [pc, #576]	; (8005e88 <config_motors+0x620>)
 8005c48:	21a8      	movs	r1, #168	; 0xa8
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	3302      	adds	r3, #2
 8005c52:	2203      	movs	r2, #3
 8005c54:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8005c56:	79bb      	ldrb	r3, [r7, #6]
 8005c58:	4a8b      	ldr	r2, [pc, #556]	; (8005e88 <config_motors+0x620>)
 8005c5a:	21a8      	movs	r1, #168	; 0xa8
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	4413      	add	r3, r2
 8005c62:	3390      	adds	r3, #144	; 0x90
 8005c64:	4a8d      	ldr	r2, [pc, #564]	; (8005e9c <config_motors+0x634>)
 8005c66:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 8005c68:	79bb      	ldrb	r3, [r7, #6]
 8005c6a:	4a87      	ldr	r2, [pc, #540]	; (8005e88 <config_motors+0x620>)
 8005c6c:	21a8      	movs	r1, #168	; 0xa8
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	337c      	adds	r3, #124	; 0x7c
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 8005c7a:	79bb      	ldrb	r3, [r7, #6]
 8005c7c:	4a82      	ldr	r2, [pc, #520]	; (8005e88 <config_motors+0x620>)
 8005c7e:	21a8      	movs	r1, #168	; 0xa8
 8005c80:	fb01 f303 	mul.w	r3, r1, r3
 8005c84:	4413      	add	r3, r2
 8005c86:	3384      	adds	r3, #132	; 0x84
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005c8e:	79bb      	ldrb	r3, [r7, #6]
 8005c90:	4a7d      	ldr	r2, [pc, #500]	; (8005e88 <config_motors+0x620>)
 8005c92:	21a8      	movs	r1, #168	; 0xa8
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	4413      	add	r3, r2
 8005c9a:	3380      	adds	r3, #128	; 0x80
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005ca2:	79bb      	ldrb	r3, [r7, #6]
 8005ca4:	4a78      	ldr	r2, [pc, #480]	; (8005e88 <config_motors+0x620>)
 8005ca6:	21a8      	movs	r1, #168	; 0xa8
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	338c      	adds	r3, #140	; 0x8c
 8005cb0:	4a7b      	ldr	r2, [pc, #492]	; (8005ea0 <config_motors+0x638>)
 8005cb2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8005cb4:	79bb      	ldrb	r3, [r7, #6]
 8005cb6:	4a74      	ldr	r2, [pc, #464]	; (8005e88 <config_motors+0x620>)
 8005cb8:	21a8      	movs	r1, #168	; 0xa8
 8005cba:	fb01 f303 	mul.w	r3, r1, r3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	3388      	adds	r3, #136	; 0x88
 8005cc2:	4a78      	ldr	r2, [pc, #480]	; (8005ea4 <config_motors+0x63c>)
 8005cc4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 8005cc6:	79bb      	ldrb	r3, [r7, #6]
 8005cc8:	4a6f      	ldr	r2, [pc, #444]	; (8005e88 <config_motors+0x620>)
 8005cca:	21a8      	movs	r1, #168	; 0xa8
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3344      	adds	r3, #68	; 0x44
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 8005cda:	79bb      	ldrb	r3, [r7, #6]
 8005cdc:	4a6a      	ldr	r2, [pc, #424]	; (8005e88 <config_motors+0x620>)
 8005cde:	21a8      	movs	r1, #168	; 0xa8
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3348      	adds	r3, #72	; 0x48
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 8005cee:	79bb      	ldrb	r3, [r7, #6]
 8005cf0:	4a65      	ldr	r2, [pc, #404]	; (8005e88 <config_motors+0x620>)
 8005cf2:	21a8      	movs	r1, #168	; 0xa8
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	334c      	adds	r3, #76	; 0x4c
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 8005d02:	79bb      	ldrb	r3, [r7, #6]
 8005d04:	4a60      	ldr	r2, [pc, #384]	; (8005e88 <config_motors+0x620>)
 8005d06:	21a8      	movs	r1, #168	; 0xa8
 8005d08:	fb01 f303 	mul.w	r3, r1, r3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	335c      	adds	r3, #92	; 0x5c
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 8005d16:	79bb      	ldrb	r3, [r7, #6]
 8005d18:	4a5b      	ldr	r2, [pc, #364]	; (8005e88 <config_motors+0x620>)
 8005d1a:	21a8      	movs	r1, #168	; 0xa8
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	4413      	add	r3, r2
 8005d22:	3360      	adds	r3, #96	; 0x60
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8005d2a:	79bb      	ldrb	r3, [r7, #6]
 8005d2c:	4a56      	ldr	r2, [pc, #344]	; (8005e88 <config_motors+0x620>)
 8005d2e:	21a8      	movs	r1, #168	; 0xa8
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	3364      	adds	r3, #100	; 0x64
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 8005d3e:	79bb      	ldrb	r3, [r7, #6]
 8005d40:	4a51      	ldr	r2, [pc, #324]	; (8005e88 <config_motors+0x620>)
 8005d42:	21a8      	movs	r1, #168	; 0xa8
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	4413      	add	r3, r2
 8005d4a:	336c      	adds	r3, #108	; 0x6c
 8005d4c:	4a4f      	ldr	r2, [pc, #316]	; (8005e8c <config_motors+0x624>)
 8005d4e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= CHASSIS_KP;
 8005d50:	79bb      	ldrb	r3, [r7, #6]
 8005d52:	4a4d      	ldr	r2, [pc, #308]	; (8005e88 <config_motors+0x620>)
 8005d54:	21a8      	movs	r1, #168	; 0xa8
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3310      	adds	r3, #16
 8005d5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005d62:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= CHASSIS_KI;
 8005d64:	79bb      	ldrb	r3, [r7, #6]
 8005d66:	4a48      	ldr	r2, [pc, #288]	; (8005e88 <config_motors+0x620>)
 8005d68:	21a8      	movs	r1, #168	; 0xa8
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	4413      	add	r3, r2
 8005d70:	3314      	adds	r3, #20
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= CHASSIS_KD;
 8005d78:	79bb      	ldrb	r3, [r7, #6]
 8005d7a:	4a43      	ldr	r2, [pc, #268]	; (8005e88 <config_motors+0x620>)
 8005d7c:	21a8      	movs	r1, #168	; 0xa8
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	3318      	adds	r3, #24
 8005d86:	4a42      	ldr	r2, [pc, #264]	; (8005e90 <config_motors+0x628>)
 8005d88:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= CHASSIS_INT_MAX;
 8005d8a:	79bb      	ldrb	r3, [r7, #6]
 8005d8c:	4a3e      	ldr	r2, [pc, #248]	; (8005e88 <config_motors+0x620>)
 8005d8e:	21a8      	movs	r1, #168	; 0xa8
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	4413      	add	r3, r2
 8005d96:	3328      	adds	r3, #40	; 0x28
 8005d98:	4a3e      	ldr	r2, [pc, #248]	; (8005e94 <config_motors+0x62c>)
 8005d9a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= CHASSIS_MAX_CURRENT;
 8005d9c:	79bb      	ldrb	r3, [r7, #6]
 8005d9e:	4a3a      	ldr	r2, [pc, #232]	; (8005e88 <config_motors+0x620>)
 8005da0:	21a8      	movs	r1, #168	; 0xa8
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	4413      	add	r3, r2
 8005da8:	332c      	adds	r3, #44	; 0x2c
 8005daa:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <config_motors+0x62c>)
 8005dac:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 8005dae:	79bb      	ldrb	r3, [r7, #6]
 8005db0:	4a35      	ldr	r2, [pc, #212]	; (8005e88 <config_motors+0x620>)
 8005db2:	21a8      	movs	r1, #168	; 0xa8
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	4413      	add	r3, r2
 8005dba:	3330      	adds	r3, #48	; 0x30
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 8005dc2:	79bb      	ldrb	r3, [r7, #6]
 8005dc4:	4a30      	ldr	r2, [pc, #192]	; (8005e88 <config_motors+0x620>)
 8005dc6:	21a8      	movs	r1, #168	; 0xa8
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	4413      	add	r3, r2
 8005dce:	3338      	adds	r3, #56	; 0x38
 8005dd0:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005dd4:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID -1;
 8005dd6:	230f      	movs	r3, #15
 8005dd8:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8005dda:	79bb      	ldrb	r3, [r7, #6]
 8005ddc:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <config_motors+0x620>)
 8005dde:	21a8      	movs	r1, #168	; 0xa8
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	3302      	adds	r3, #2
 8005de8:	2203      	movs	r2, #3
 8005dea:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8005dec:	79bb      	ldrb	r3, [r7, #6]
 8005dee:	4a26      	ldr	r2, [pc, #152]	; (8005e88 <config_motors+0x620>)
 8005df0:	21a8      	movs	r1, #168	; 0xa8
 8005df2:	fb01 f303 	mul.w	r3, r1, r3
 8005df6:	4413      	add	r3, r2
 8005df8:	3390      	adds	r3, #144	; 0x90
 8005dfa:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <config_motors+0x634>)
 8005dfc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 8005dfe:	79bb      	ldrb	r3, [r7, #6]
 8005e00:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <config_motors+0x620>)
 8005e02:	21a8      	movs	r1, #168	; 0xa8
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	4413      	add	r3, r2
 8005e0a:	337c      	adds	r3, #124	; 0x7c
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 8005e10:	79bb      	ldrb	r3, [r7, #6]
 8005e12:	4a1d      	ldr	r2, [pc, #116]	; (8005e88 <config_motors+0x620>)
 8005e14:	21a8      	movs	r1, #168	; 0xa8
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3384      	adds	r3, #132	; 0x84
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005e24:	79bb      	ldrb	r3, [r7, #6]
 8005e26:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <config_motors+0x620>)
 8005e28:	21a8      	movs	r1, #168	; 0xa8
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	3380      	adds	r3, #128	; 0x80
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005e38:	79bb      	ldrb	r3, [r7, #6]
 8005e3a:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <config_motors+0x620>)
 8005e3c:	21a8      	movs	r1, #168	; 0xa8
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	338c      	adds	r3, #140	; 0x8c
 8005e46:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <config_motors+0x638>)
 8005e48:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8005e4a:	79bb      	ldrb	r3, [r7, #6]
 8005e4c:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <config_motors+0x620>)
 8005e4e:	21a8      	movs	r1, #168	; 0xa8
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	3388      	adds	r3, #136	; 0x88
 8005e58:	4a12      	ldr	r2, [pc, #72]	; (8005ea4 <config_motors+0x63c>)
 8005e5a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 8005e5c:	79bb      	ldrb	r3, [r7, #6]
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <config_motors+0x620>)
 8005e60:	21a8      	movs	r1, #168	; 0xa8
 8005e62:	fb01 f303 	mul.w	r3, r1, r3
 8005e66:	4413      	add	r3, r2
 8005e68:	3344      	adds	r3, #68	; 0x44
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 8005e70:	79bb      	ldrb	r3, [r7, #6]
 8005e72:	4a05      	ldr	r2, [pc, #20]	; (8005e88 <config_motors+0x620>)
 8005e74:	21a8      	movs	r1, #168	; 0xa8
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3348      	adds	r3, #72	; 0x48
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 8005e84:	79bb      	ldrb	r3, [r7, #6]
 8005e86:	e00f      	b.n	8005ea8 <config_motors+0x640>
 8005e88:	20000ea8 	.word	0x20000ea8
 8005e8c:	460ca000 	.word	0x460ca000
 8005e90:	3dcccccd 	.word	0x3dcccccd
 8005e94:	461c4000 	.word	0x461c4000
 8005e98:	c61c4000 	.word	0xc61c4000
 8005e9c:	4199999a 	.word	0x4199999a
 8005ea0:	40c90fdb 	.word	0x40c90fdb
 8005ea4:	c0c90fdb 	.word	0xc0c90fdb
 8005ea8:	4abc      	ldr	r2, [pc, #752]	; (800619c <config_motors+0x934>)
 8005eaa:	21a8      	movs	r1, #168	; 0xa8
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	334c      	adds	r3, #76	; 0x4c
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 8005eba:	79bb      	ldrb	r3, [r7, #6]
 8005ebc:	4ab7      	ldr	r2, [pc, #732]	; (800619c <config_motors+0x934>)
 8005ebe:	21a8      	movs	r1, #168	; 0xa8
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	335c      	adds	r3, #92	; 0x5c
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 8005ece:	79bb      	ldrb	r3, [r7, #6]
 8005ed0:	4ab2      	ldr	r2, [pc, #712]	; (800619c <config_motors+0x934>)
 8005ed2:	21a8      	movs	r1, #168	; 0xa8
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
 8005ed8:	4413      	add	r3, r2
 8005eda:	3360      	adds	r3, #96	; 0x60
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8005ee2:	79bb      	ldrb	r3, [r7, #6]
 8005ee4:	4aad      	ldr	r2, [pc, #692]	; (800619c <config_motors+0x934>)
 8005ee6:	21a8      	movs	r1, #168	; 0xa8
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	3364      	adds	r3, #100	; 0x64
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 8005ef6:	79bb      	ldrb	r3, [r7, #6]
 8005ef8:	4aa8      	ldr	r2, [pc, #672]	; (800619c <config_motors+0x934>)
 8005efa:	21a8      	movs	r1, #168	; 0xa8
 8005efc:	fb01 f303 	mul.w	r3, r1, r3
 8005f00:	4413      	add	r3, r2
 8005f02:	336c      	adds	r3, #108	; 0x6c
 8005f04:	4aa6      	ldr	r2, [pc, #664]	; (80061a0 <config_motors+0x938>)
 8005f06:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= CHASSIS_KP;
 8005f08:	79bb      	ldrb	r3, [r7, #6]
 8005f0a:	4aa4      	ldr	r2, [pc, #656]	; (800619c <config_motors+0x934>)
 8005f0c:	21a8      	movs	r1, #168	; 0xa8
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	3310      	adds	r3, #16
 8005f16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005f1a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= CHASSIS_KI;
 8005f1c:	79bb      	ldrb	r3, [r7, #6]
 8005f1e:	4a9f      	ldr	r2, [pc, #636]	; (800619c <config_motors+0x934>)
 8005f20:	21a8      	movs	r1, #168	; 0xa8
 8005f22:	fb01 f303 	mul.w	r3, r1, r3
 8005f26:	4413      	add	r3, r2
 8005f28:	3314      	adds	r3, #20
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= CHASSIS_KD;
 8005f30:	79bb      	ldrb	r3, [r7, #6]
 8005f32:	4a9a      	ldr	r2, [pc, #616]	; (800619c <config_motors+0x934>)
 8005f34:	21a8      	movs	r1, #168	; 0xa8
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3318      	adds	r3, #24
 8005f3e:	4a99      	ldr	r2, [pc, #612]	; (80061a4 <config_motors+0x93c>)
 8005f40:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= CHASSIS_INT_MAX;
 8005f42:	79bb      	ldrb	r3, [r7, #6]
 8005f44:	4a95      	ldr	r2, [pc, #596]	; (800619c <config_motors+0x934>)
 8005f46:	21a8      	movs	r1, #168	; 0xa8
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3328      	adds	r3, #40	; 0x28
 8005f50:	4a95      	ldr	r2, [pc, #596]	; (80061a8 <config_motors+0x940>)
 8005f52:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= CHASSIS_MAX_CURRENT;
 8005f54:	79bb      	ldrb	r3, [r7, #6]
 8005f56:	4a91      	ldr	r2, [pc, #580]	; (800619c <config_motors+0x934>)
 8005f58:	21a8      	movs	r1, #168	; 0xa8
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	4413      	add	r3, r2
 8005f60:	332c      	adds	r3, #44	; 0x2c
 8005f62:	4a91      	ldr	r2, [pc, #580]	; (80061a8 <config_motors+0x940>)
 8005f64:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 8005f66:	79bb      	ldrb	r3, [r7, #6]
 8005f68:	4a8c      	ldr	r2, [pc, #560]	; (800619c <config_motors+0x934>)
 8005f6a:	21a8      	movs	r1, #168	; 0xa8
 8005f6c:	fb01 f303 	mul.w	r3, r1, r3
 8005f70:	4413      	add	r3, r2
 8005f72:	3330      	adds	r3, #48	; 0x30
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 8005f7a:	79bb      	ldrb	r3, [r7, #6]
 8005f7c:	4a87      	ldr	r2, [pc, #540]	; (800619c <config_motors+0x934>)
 8005f7e:	21a8      	movs	r1, #168	; 0xa8
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	3338      	adds	r3, #56	; 0x38
 8005f88:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005f8c:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID -1;
 8005f8e:	2304      	movs	r3, #4
 8005f90:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8005f92:	79bb      	ldrb	r3, [r7, #6]
 8005f94:	4a81      	ldr	r2, [pc, #516]	; (800619c <config_motors+0x934>)
 8005f96:	21a8      	movs	r1, #168	; 0xa8
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8005fa4:	79bb      	ldrb	r3, [r7, #6]
 8005fa6:	4a7d      	ldr	r2, [pc, #500]	; (800619c <config_motors+0x934>)
 8005fa8:	21a8      	movs	r1, #168	; 0xa8
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	3390      	adds	r3, #144	; 0x90
 8005fb2:	4a7e      	ldr	r2, [pc, #504]	; (80061ac <config_motors+0x944>)
 8005fb4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 8005fb6:	79bb      	ldrb	r3, [r7, #6]
 8005fb8:	4a78      	ldr	r2, [pc, #480]	; (800619c <config_motors+0x934>)
 8005fba:	21a8      	movs	r1, #168	; 0xa8
 8005fbc:	fb01 f303 	mul.w	r3, r1, r3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	337c      	adds	r3, #124	; 0x7c
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 8005fc8:	79bb      	ldrb	r3, [r7, #6]
 8005fca:	4a74      	ldr	r2, [pc, #464]	; (800619c <config_motors+0x934>)
 8005fcc:	21a8      	movs	r1, #168	; 0xa8
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3384      	adds	r3, #132	; 0x84
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005fdc:	79bb      	ldrb	r3, [r7, #6]
 8005fde:	4a6f      	ldr	r2, [pc, #444]	; (800619c <config_motors+0x934>)
 8005fe0:	21a8      	movs	r1, #168	; 0xa8
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3380      	adds	r3, #128	; 0x80
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005ff0:	79bb      	ldrb	r3, [r7, #6]
 8005ff2:	4a6a      	ldr	r2, [pc, #424]	; (800619c <config_motors+0x934>)
 8005ff4:	21a8      	movs	r1, #168	; 0xa8
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	338c      	adds	r3, #140	; 0x8c
 8005ffe:	4a6c      	ldr	r2, [pc, #432]	; (80061b0 <config_motors+0x948>)
 8006000:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8006002:	79bb      	ldrb	r3, [r7, #6]
 8006004:	4a65      	ldr	r2, [pc, #404]	; (800619c <config_motors+0x934>)
 8006006:	21a8      	movs	r1, #168	; 0xa8
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	4413      	add	r3, r2
 800600e:	3388      	adds	r3, #136	; 0x88
 8006010:	4a68      	ldr	r2, [pc, #416]	; (80061b4 <config_motors+0x94c>)
 8006012:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 8006014:	79bb      	ldrb	r3, [r7, #6]
 8006016:	4a61      	ldr	r2, [pc, #388]	; (800619c <config_motors+0x934>)
 8006018:	21a8      	movs	r1, #168	; 0xa8
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	4413      	add	r3, r2
 8006020:	3344      	adds	r3, #68	; 0x44
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 8006028:	79bb      	ldrb	r3, [r7, #6]
 800602a:	4a5c      	ldr	r2, [pc, #368]	; (800619c <config_motors+0x934>)
 800602c:	21a8      	movs	r1, #168	; 0xa8
 800602e:	fb01 f303 	mul.w	r3, r1, r3
 8006032:	4413      	add	r3, r2
 8006034:	3348      	adds	r3, #72	; 0x48
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 800603c:	79bb      	ldrb	r3, [r7, #6]
 800603e:	4a57      	ldr	r2, [pc, #348]	; (800619c <config_motors+0x934>)
 8006040:	21a8      	movs	r1, #168	; 0xa8
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	4413      	add	r3, r2
 8006048:	334c      	adds	r3, #76	; 0x4c
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 8006050:	79bb      	ldrb	r3, [r7, #6]
 8006052:	4a52      	ldr	r2, [pc, #328]	; (800619c <config_motors+0x934>)
 8006054:	21a8      	movs	r1, #168	; 0xa8
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	4413      	add	r3, r2
 800605c:	335c      	adds	r3, #92	; 0x5c
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 8006064:	79bb      	ldrb	r3, [r7, #6]
 8006066:	4a4d      	ldr	r2, [pc, #308]	; (800619c <config_motors+0x934>)
 8006068:	21a8      	movs	r1, #168	; 0xa8
 800606a:	fb01 f303 	mul.w	r3, r1, r3
 800606e:	4413      	add	r3, r2
 8006070:	3360      	adds	r3, #96	; 0x60
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8006078:	79bb      	ldrb	r3, [r7, #6]
 800607a:	4a48      	ldr	r2, [pc, #288]	; (800619c <config_motors+0x934>)
 800607c:	21a8      	movs	r1, #168	; 0xa8
 800607e:	fb01 f303 	mul.w	r3, r1, r3
 8006082:	4413      	add	r3, r2
 8006084:	3364      	adds	r3, #100	; 0x64
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 800608c:	79bb      	ldrb	r3, [r7, #6]
 800608e:	4a43      	ldr	r2, [pc, #268]	; (800619c <config_motors+0x934>)
 8006090:	21a8      	movs	r1, #168	; 0xa8
 8006092:	fb01 f303 	mul.w	r3, r1, r3
 8006096:	4413      	add	r3, r2
 8006098:	336c      	adds	r3, #108	; 0x6c
 800609a:	4a41      	ldr	r2, [pc, #260]	; (80061a0 <config_motors+0x938>)
 800609c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= FRICTION_KP;
 800609e:	79bb      	ldrb	r3, [r7, #6]
 80060a0:	4a3e      	ldr	r2, [pc, #248]	; (800619c <config_motors+0x934>)
 80060a2:	21a8      	movs	r1, #168	; 0xa8
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	4413      	add	r3, r2
 80060aa:	3310      	adds	r3, #16
 80060ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80060b0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= FRICTION_KI;
 80060b2:	79bb      	ldrb	r3, [r7, #6]
 80060b4:	4a39      	ldr	r2, [pc, #228]	; (800619c <config_motors+0x934>)
 80060b6:	21a8      	movs	r1, #168	; 0xa8
 80060b8:	fb01 f303 	mul.w	r3, r1, r3
 80060bc:	4413      	add	r3, r2
 80060be:	3314      	adds	r3, #20
 80060c0:	4a3d      	ldr	r2, [pc, #244]	; (80061b8 <config_motors+0x950>)
 80060c2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= FRICTION_KD;
 80060c4:	79bb      	ldrb	r3, [r7, #6]
 80060c6:	4a35      	ldr	r2, [pc, #212]	; (800619c <config_motors+0x934>)
 80060c8:	21a8      	movs	r1, #168	; 0xa8
 80060ca:	fb01 f303 	mul.w	r3, r1, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	3318      	adds	r3, #24
 80060d2:	4a3a      	ldr	r2, [pc, #232]	; (80061bc <config_motors+0x954>)
 80060d4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= FRICTION_MAX_INT;
 80060d6:	79bb      	ldrb	r3, [r7, #6]
 80060d8:	4a30      	ldr	r2, [pc, #192]	; (800619c <config_motors+0x934>)
 80060da:	21a8      	movs	r1, #168	; 0xa8
 80060dc:	fb01 f303 	mul.w	r3, r1, r3
 80060e0:	4413      	add	r3, r2
 80060e2:	3328      	adds	r3, #40	; 0x28
 80060e4:	4a30      	ldr	r2, [pc, #192]	; (80061a8 <config_motors+0x940>)
 80060e6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= FRICTION_MAX_CURRENT;
 80060e8:	79bb      	ldrb	r3, [r7, #6]
 80060ea:	4a2c      	ldr	r2, [pc, #176]	; (800619c <config_motors+0x934>)
 80060ec:	21a8      	movs	r1, #168	; 0xa8
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	4413      	add	r3, r2
 80060f4:	332c      	adds	r3, #44	; 0x2c
 80060f6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80060fa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 80060fc:	79bb      	ldrb	r3, [r7, #6]
 80060fe:	4a27      	ldr	r2, [pc, #156]	; (800619c <config_motors+0x934>)
 8006100:	21a8      	movs	r1, #168	; 0xa8
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	4413      	add	r3, r2
 8006108:	3330      	adds	r3, #48	; 0x30
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 8006110:	79bb      	ldrb	r3, [r7, #6]
 8006112:	4a22      	ldr	r2, [pc, #136]	; (800619c <config_motors+0x934>)
 8006114:	21a8      	movs	r1, #168	; 0xa8
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	4413      	add	r3, r2
 800611c:	3338      	adds	r3, #56	; 0x38
 800611e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8006122:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID -1;
 8006124:	2305      	movs	r3, #5
 8006126:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8006128:	79bb      	ldrb	r3, [r7, #6]
 800612a:	4a1c      	ldr	r2, [pc, #112]	; (800619c <config_motors+0x934>)
 800612c:	21a8      	movs	r1, #168	; 0xa8
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	3302      	adds	r3, #2
 8006136:	2203      	movs	r2, #3
 8006138:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 800613a:	79bb      	ldrb	r3, [r7, #6]
 800613c:	4a17      	ldr	r2, [pc, #92]	; (800619c <config_motors+0x934>)
 800613e:	21a8      	movs	r1, #168	; 0xa8
 8006140:	fb01 f303 	mul.w	r3, r1, r3
 8006144:	4413      	add	r3, r2
 8006146:	3390      	adds	r3, #144	; 0x90
 8006148:	4a18      	ldr	r2, [pc, #96]	; (80061ac <config_motors+0x944>)
 800614a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 800614c:	79bb      	ldrb	r3, [r7, #6]
 800614e:	4a13      	ldr	r2, [pc, #76]	; (800619c <config_motors+0x934>)
 8006150:	21a8      	movs	r1, #168	; 0xa8
 8006152:	fb01 f303 	mul.w	r3, r1, r3
 8006156:	4413      	add	r3, r2
 8006158:	337c      	adds	r3, #124	; 0x7c
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 800615e:	79bb      	ldrb	r3, [r7, #6]
 8006160:	4a0e      	ldr	r2, [pc, #56]	; (800619c <config_motors+0x934>)
 8006162:	21a8      	movs	r1, #168	; 0xa8
 8006164:	fb01 f303 	mul.w	r3, r1, r3
 8006168:	4413      	add	r3, r2
 800616a:	3384      	adds	r3, #132	; 0x84
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8006172:	79bb      	ldrb	r3, [r7, #6]
 8006174:	4a09      	ldr	r2, [pc, #36]	; (800619c <config_motors+0x934>)
 8006176:	21a8      	movs	r1, #168	; 0xa8
 8006178:	fb01 f303 	mul.w	r3, r1, r3
 800617c:	4413      	add	r3, r2
 800617e:	3380      	adds	r3, #128	; 0x80
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8006186:	79bb      	ldrb	r3, [r7, #6]
 8006188:	4a04      	ldr	r2, [pc, #16]	; (800619c <config_motors+0x934>)
 800618a:	21a8      	movs	r1, #168	; 0xa8
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	4413      	add	r3, r2
 8006192:	338c      	adds	r3, #140	; 0x8c
 8006194:	4a06      	ldr	r2, [pc, #24]	; (80061b0 <config_motors+0x948>)
 8006196:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8006198:	79bb      	ldrb	r3, [r7, #6]
 800619a:	e011      	b.n	80061c0 <config_motors+0x958>
 800619c:	20000ea8 	.word	0x20000ea8
 80061a0:	460ca000 	.word	0x460ca000
 80061a4:	3dcccccd 	.word	0x3dcccccd
 80061a8:	461c4000 	.word	0x461c4000
 80061ac:	4199999a 	.word	0x4199999a
 80061b0:	40c90fdb 	.word	0x40c90fdb
 80061b4:	c0c90fdb 	.word	0xc0c90fdb
 80061b8:	3b03126f 	.word	0x3b03126f
 80061bc:	41200000 	.word	0x41200000
 80061c0:	4abb      	ldr	r2, [pc, #748]	; (80064b0 <config_motors+0xc48>)
 80061c2:	21a8      	movs	r1, #168	; 0xa8
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	4413      	add	r3, r2
 80061ca:	3388      	adds	r3, #136	; 0x88
 80061cc:	4ab9      	ldr	r2, [pc, #740]	; (80064b4 <config_motors+0xc4c>)
 80061ce:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 80061d0:	79bb      	ldrb	r3, [r7, #6]
 80061d2:	4ab7      	ldr	r2, [pc, #732]	; (80064b0 <config_motors+0xc48>)
 80061d4:	21a8      	movs	r1, #168	; 0xa8
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	3344      	adds	r3, #68	; 0x44
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 80061e4:	79bb      	ldrb	r3, [r7, #6]
 80061e6:	4ab2      	ldr	r2, [pc, #712]	; (80064b0 <config_motors+0xc48>)
 80061e8:	21a8      	movs	r1, #168	; 0xa8
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	3348      	adds	r3, #72	; 0x48
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 80061f8:	79bb      	ldrb	r3, [r7, #6]
 80061fa:	4aad      	ldr	r2, [pc, #692]	; (80064b0 <config_motors+0xc48>)
 80061fc:	21a8      	movs	r1, #168	; 0xa8
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	334c      	adds	r3, #76	; 0x4c
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 800620c:	79bb      	ldrb	r3, [r7, #6]
 800620e:	4aa8      	ldr	r2, [pc, #672]	; (80064b0 <config_motors+0xc48>)
 8006210:	21a8      	movs	r1, #168	; 0xa8
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	4413      	add	r3, r2
 8006218:	335c      	adds	r3, #92	; 0x5c
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 8006220:	79bb      	ldrb	r3, [r7, #6]
 8006222:	4aa3      	ldr	r2, [pc, #652]	; (80064b0 <config_motors+0xc48>)
 8006224:	21a8      	movs	r1, #168	; 0xa8
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	4413      	add	r3, r2
 800622c:	3360      	adds	r3, #96	; 0x60
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8006234:	79bb      	ldrb	r3, [r7, #6]
 8006236:	4a9e      	ldr	r2, [pc, #632]	; (80064b0 <config_motors+0xc48>)
 8006238:	21a8      	movs	r1, #168	; 0xa8
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	4413      	add	r3, r2
 8006240:	3364      	adds	r3, #100	; 0x64
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 8006248:	79bb      	ldrb	r3, [r7, #6]
 800624a:	4a99      	ldr	r2, [pc, #612]	; (80064b0 <config_motors+0xc48>)
 800624c:	21a8      	movs	r1, #168	; 0xa8
 800624e:	fb01 f303 	mul.w	r3, r1, r3
 8006252:	4413      	add	r3, r2
 8006254:	336c      	adds	r3, #108	; 0x6c
 8006256:	4a98      	ldr	r2, [pc, #608]	; (80064b8 <config_motors+0xc50>)
 8006258:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= FRICTION_KP;
 800625a:	79bb      	ldrb	r3, [r7, #6]
 800625c:	4a94      	ldr	r2, [pc, #592]	; (80064b0 <config_motors+0xc48>)
 800625e:	21a8      	movs	r1, #168	; 0xa8
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	4413      	add	r3, r2
 8006266:	3310      	adds	r3, #16
 8006268:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800626c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= FRICTION_KI;
 800626e:	79bb      	ldrb	r3, [r7, #6]
 8006270:	4a8f      	ldr	r2, [pc, #572]	; (80064b0 <config_motors+0xc48>)
 8006272:	21a8      	movs	r1, #168	; 0xa8
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	3314      	adds	r3, #20
 800627c:	4a8f      	ldr	r2, [pc, #572]	; (80064bc <config_motors+0xc54>)
 800627e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= FRICTION_KD;
 8006280:	79bb      	ldrb	r3, [r7, #6]
 8006282:	4a8b      	ldr	r2, [pc, #556]	; (80064b0 <config_motors+0xc48>)
 8006284:	21a8      	movs	r1, #168	; 0xa8
 8006286:	fb01 f303 	mul.w	r3, r1, r3
 800628a:	4413      	add	r3, r2
 800628c:	3318      	adds	r3, #24
 800628e:	4a8c      	ldr	r2, [pc, #560]	; (80064c0 <config_motors+0xc58>)
 8006290:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= FRICTION_MAX_INT;
 8006292:	79bb      	ldrb	r3, [r7, #6]
 8006294:	4a86      	ldr	r2, [pc, #536]	; (80064b0 <config_motors+0xc48>)
 8006296:	21a8      	movs	r1, #168	; 0xa8
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	3328      	adds	r3, #40	; 0x28
 80062a0:	4a88      	ldr	r2, [pc, #544]	; (80064c4 <config_motors+0xc5c>)
 80062a2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= FRICTION_MAX_CURRENT;
 80062a4:	79bb      	ldrb	r3, [r7, #6]
 80062a6:	4a82      	ldr	r2, [pc, #520]	; (80064b0 <config_motors+0xc48>)
 80062a8:	21a8      	movs	r1, #168	; 0xa8
 80062aa:	fb01 f303 	mul.w	r3, r1, r3
 80062ae:	4413      	add	r3, r2
 80062b0:	332c      	adds	r3, #44	; 0x2c
 80062b2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80062b6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 80062b8:	79bb      	ldrb	r3, [r7, #6]
 80062ba:	4a7d      	ldr	r2, [pc, #500]	; (80064b0 <config_motors+0xc48>)
 80062bc:	21a8      	movs	r1, #168	; 0xa8
 80062be:	fb01 f303 	mul.w	r3, r1, r3
 80062c2:	4413      	add	r3, r2
 80062c4:	3330      	adds	r3, #48	; 0x30
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 80062cc:	79bb      	ldrb	r3, [r7, #6]
 80062ce:	4a78      	ldr	r2, [pc, #480]	; (80064b0 <config_motors+0xc48>)
 80062d0:	21a8      	movs	r1, #168	; 0xa8
 80062d2:	fb01 f303 	mul.w	r3, r1, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	3338      	adds	r3, #56	; 0x38
 80062da:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80062de:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID -1;
 80062e0:	2306      	movs	r3, #6
 80062e2:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M2006;
 80062e4:	79bb      	ldrb	r3, [r7, #6]
 80062e6:	4a72      	ldr	r2, [pc, #456]	; (80064b0 <config_motors+0xc48>)
 80062e8:	21a8      	movs	r1, #168	; 0xa8
 80062ea:	fb01 f303 	mul.w	r3, r1, r3
 80062ee:	4413      	add	r3, r2
 80062f0:	3302      	adds	r3, #2
 80062f2:	2202      	movs	r2, #2
 80062f4:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 80062f6:	79bb      	ldrb	r3, [r7, #6]
 80062f8:	4a6d      	ldr	r2, [pc, #436]	; (80064b0 <config_motors+0xc48>)
 80062fa:	21a8      	movs	r1, #168	; 0xa8
 80062fc:	fb01 f303 	mul.w	r3, r1, r3
 8006300:	4413      	add	r3, r2
 8006302:	3390      	adds	r3, #144	; 0x90
 8006304:	4a70      	ldr	r2, [pc, #448]	; (80064c8 <config_motors+0xc60>)
 8006306:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 8006308:	79bb      	ldrb	r3, [r7, #6]
 800630a:	4a69      	ldr	r2, [pc, #420]	; (80064b0 <config_motors+0xc48>)
 800630c:	21a8      	movs	r1, #168	; 0xa8
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	4413      	add	r3, r2
 8006314:	337c      	adds	r3, #124	; 0x7c
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= PI*5000;	//so it can rotate 5000 times oops
 800631a:	79bb      	ldrb	r3, [r7, #6]
 800631c:	4a64      	ldr	r2, [pc, #400]	; (80064b0 <config_motors+0xc48>)
 800631e:	21a8      	movs	r1, #168	; 0xa8
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	4413      	add	r3, r2
 8006326:	3384      	adds	r3, #132	; 0x84
 8006328:	4a68      	ldr	r2, [pc, #416]	; (80064cc <config_motors+0xc64>)
 800632a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= -PI*5000;
 800632c:	79bb      	ldrb	r3, [r7, #6]
 800632e:	4a60      	ldr	r2, [pc, #384]	; (80064b0 <config_motors+0xc48>)
 8006330:	21a8      	movs	r1, #168	; 0xa8
 8006332:	fb01 f303 	mul.w	r3, r1, r3
 8006336:	4413      	add	r3, r2
 8006338:	3380      	adds	r3, #128	; 0x80
 800633a:	4a65      	ldr	r2, [pc, #404]	; (80064d0 <config_motors+0xc68>)
 800633c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 800633e:	79bb      	ldrb	r3, [r7, #6]
 8006340:	4a5b      	ldr	r2, [pc, #364]	; (80064b0 <config_motors+0xc48>)
 8006342:	21a8      	movs	r1, #168	; 0xa8
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	4413      	add	r3, r2
 800634a:	338c      	adds	r3, #140	; 0x8c
 800634c:	4a61      	ldr	r2, [pc, #388]	; (80064d4 <config_motors+0xc6c>)
 800634e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8006350:	79bb      	ldrb	r3, [r7, #6]
 8006352:	4a57      	ldr	r2, [pc, #348]	; (80064b0 <config_motors+0xc48>)
 8006354:	21a8      	movs	r1, #168	; 0xa8
 8006356:	fb01 f303 	mul.w	r3, r1, r3
 800635a:	4413      	add	r3, r2
 800635c:	3388      	adds	r3, #136	; 0x88
 800635e:	4a55      	ldr	r2, [pc, #340]	; (80064b4 <config_motors+0xc4c>)
 8006360:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= FEEDER_ANGLE_KP;
 8006362:	79bb      	ldrb	r3, [r7, #6]
 8006364:	4a52      	ldr	r2, [pc, #328]	; (80064b0 <config_motors+0xc48>)
 8006366:	21a8      	movs	r1, #168	; 0xa8
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	4413      	add	r3, r2
 800636e:	3344      	adds	r3, #68	; 0x44
 8006370:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006374:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= FEEDER_ANGLE_KP;
 8006376:	79bb      	ldrb	r3, [r7, #6]
 8006378:	4a4d      	ldr	r2, [pc, #308]	; (80064b0 <config_motors+0xc48>)
 800637a:	21a8      	movs	r1, #168	; 0xa8
 800637c:	fb01 f303 	mul.w	r3, r1, r3
 8006380:	4413      	add	r3, r2
 8006382:	3348      	adds	r3, #72	; 0x48
 8006384:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006388:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= FEEDER_ANGLE_KP;
 800638a:	79bb      	ldrb	r3, [r7, #6]
 800638c:	4a48      	ldr	r2, [pc, #288]	; (80064b0 <config_motors+0xc48>)
 800638e:	21a8      	movs	r1, #168	; 0xa8
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	4413      	add	r3, r2
 8006396:	334c      	adds	r3, #76	; 0x4c
 8006398:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800639c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= FEEDER_ANGLE_INT_MAX;
 800639e:	79bb      	ldrb	r3, [r7, #6]
 80063a0:	4a43      	ldr	r2, [pc, #268]	; (80064b0 <config_motors+0xc48>)
 80063a2:	21a8      	movs	r1, #168	; 0xa8
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	4413      	add	r3, r2
 80063aa:	335c      	adds	r3, #92	; 0x5c
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= FEEDER_MAX_RPM;
 80063b2:	79bb      	ldrb	r3, [r7, #6]
 80063b4:	4a3e      	ldr	r2, [pc, #248]	; (80064b0 <config_motors+0xc48>)
 80063b6:	21a8      	movs	r1, #168	; 0xa8
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	3360      	adds	r3, #96	; 0x60
 80063c0:	4a45      	ldr	r2, [pc, #276]	; (80064d8 <config_motors+0xc70>)
 80063c2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 80063c4:	79bb      	ldrb	r3, [r7, #6]
 80063c6:	4a3a      	ldr	r2, [pc, #232]	; (80064b0 <config_motors+0xc48>)
 80063c8:	21a8      	movs	r1, #168	; 0xa8
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	3364      	adds	r3, #100	; 0x64
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M2006_MAX_RPM;
 80063d8:	79bb      	ldrb	r3, [r7, #6]
 80063da:	4a35      	ldr	r2, [pc, #212]	; (80064b0 <config_motors+0xc48>)
 80063dc:	21a8      	movs	r1, #168	; 0xa8
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	4413      	add	r3, r2
 80063e4:	336c      	adds	r3, #108	; 0x6c
 80063e6:	4a34      	ldr	r2, [pc, #208]	; (80064b8 <config_motors+0xc50>)
 80063e8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= FEEDER_KP;
 80063ea:	79bb      	ldrb	r3, [r7, #6]
 80063ec:	4a30      	ldr	r2, [pc, #192]	; (80064b0 <config_motors+0xc48>)
 80063ee:	21a8      	movs	r1, #168	; 0xa8
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	4413      	add	r3, r2
 80063f6:	3310      	adds	r3, #16
 80063f8:	4a31      	ldr	r2, [pc, #196]	; (80064c0 <config_motors+0xc58>)
 80063fa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= FEEDER_KI;
 80063fc:	79bb      	ldrb	r3, [r7, #6]
 80063fe:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <config_motors+0xc48>)
 8006400:	21a8      	movs	r1, #168	; 0xa8
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	4413      	add	r3, r2
 8006408:	3314      	adds	r3, #20
 800640a:	4a34      	ldr	r2, [pc, #208]	; (80064dc <config_motors+0xc74>)
 800640c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= FEEDER_KD;
 800640e:	79bb      	ldrb	r3, [r7, #6]
 8006410:	4a27      	ldr	r2, [pc, #156]	; (80064b0 <config_motors+0xc48>)
 8006412:	21a8      	movs	r1, #168	; 0xa8
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	3318      	adds	r3, #24
 800641c:	4a30      	ldr	r2, [pc, #192]	; (80064e0 <config_motors+0xc78>)
 800641e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= FEEDER_MAX_INT;
 8006420:	79bb      	ldrb	r3, [r7, #6]
 8006422:	4a23      	ldr	r2, [pc, #140]	; (80064b0 <config_motors+0xc48>)
 8006424:	21a8      	movs	r1, #168	; 0xa8
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	4413      	add	r3, r2
 800642c:	3328      	adds	r3, #40	; 0x28
 800642e:	4a25      	ldr	r2, [pc, #148]	; (80064c4 <config_motors+0xc5c>)
 8006430:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= FEEDER_MAX_CURRENT;
 8006432:	79bb      	ldrb	r3, [r7, #6]
 8006434:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <config_motors+0xc48>)
 8006436:	21a8      	movs	r1, #168	; 0xa8
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	4413      	add	r3, r2
 800643e:	332c      	adds	r3, #44	; 0x2c
 8006440:	4a20      	ldr	r2, [pc, #128]	; (80064c4 <config_motors+0xc5c>)
 8006442:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 8006444:	79bb      	ldrb	r3, [r7, #6]
 8006446:	4a1a      	ldr	r2, [pc, #104]	; (80064b0 <config_motors+0xc48>)
 8006448:	21a8      	movs	r1, #168	; 0xa8
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	4413      	add	r3, r2
 8006450:	3330      	adds	r3, #48	; 0x30
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M2006_MAX_OUTPUT;
 8006458:	79bb      	ldrb	r3, [r7, #6]
 800645a:	4a15      	ldr	r2, [pc, #84]	; (80064b0 <config_motors+0xc48>)
 800645c:	21a8      	movs	r1, #168	; 0xa8
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	4413      	add	r3, r2
 8006464:	3338      	adds	r3, #56	; 0x38
 8006466:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800646a:	601a      	str	r2, [r3, #0]
#endif

#ifdef PITCH_MOTOR_ID
	motor_id = PITCH_MOTOR_ID -1;
 800646c:	2308      	movs	r3, #8
 800646e:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8006470:	79bb      	ldrb	r3, [r7, #6]
 8006472:	4a0f      	ldr	r2, [pc, #60]	; (80064b0 <config_motors+0xc48>)
 8006474:	21a8      	movs	r1, #168	; 0xa8
 8006476:	fb01 f303 	mul.w	r3, r1, r3
 800647a:	4413      	add	r3, r2
 800647c:	3302      	adds	r3, #2
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 8006482:	79bb      	ldrb	r3, [r7, #6]
 8006484:	4a0a      	ldr	r2, [pc, #40]	; (80064b0 <config_motors+0xc48>)
 8006486:	21a8      	movs	r1, #168	; 0xa8
 8006488:	fb01 f303 	mul.w	r3, r1, r3
 800648c:	4413      	add	r3, r2
 800648e:	3390      	adds	r3, #144	; 0x90
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= PITCH_CENTER;
 8006496:	79bb      	ldrb	r3, [r7, #6]
 8006498:	4a05      	ldr	r2, [pc, #20]	; (80064b0 <config_motors+0xc48>)
 800649a:	21a8      	movs	r1, #168	; 0xa8
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	4413      	add	r3, r2
 80064a2:	337c      	adds	r3, #124	; 0x7c
 80064a4:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80064a8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= PITCH_MAX_ANG;
 80064aa:	79bb      	ldrb	r3, [r7, #6]
 80064ac:	e01a      	b.n	80064e4 <config_motors+0xc7c>
 80064ae:	bf00      	nop
 80064b0:	20000ea8 	.word	0x20000ea8
 80064b4:	c0c90fdb 	.word	0xc0c90fdb
 80064b8:	460ca000 	.word	0x460ca000
 80064bc:	3b03126f 	.word	0x3b03126f
 80064c0:	41200000 	.word	0x41200000
 80064c4:	461c4000 	.word	0x461c4000
 80064c8:	42100000 	.word	0x42100000
 80064cc:	46756fdb 	.word	0x46756fdb
 80064d0:	c6756fdb 	.word	0xc6756fdb
 80064d4:	40c90fdb 	.word	0x40c90fdb
 80064d8:	42c80000 	.word	0x42c80000
 80064dc:	3ca3d70a 	.word	0x3ca3d70a
 80064e0:	40a00000 	.word	0x40a00000
 80064e4:	4ab8      	ldr	r2, [pc, #736]	; (80067c8 <config_motors+0xf60>)
 80064e6:	21a8      	movs	r1, #168	; 0xa8
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	4413      	add	r3, r2
 80064ee:	3384      	adds	r3, #132	; 0x84
 80064f0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80064f4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= PITCH_MIN_ANG;
 80064f6:	79bb      	ldrb	r3, [r7, #6]
 80064f8:	4ab3      	ldr	r2, [pc, #716]	; (80067c8 <config_motors+0xf60>)
 80064fa:	21a8      	movs	r1, #168	; 0xa8
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	4413      	add	r3, r2
 8006502:	3380      	adds	r3, #128	; 0x80
 8006504:	4ab1      	ldr	r2, [pc, #708]	; (80067cc <config_motors+0xf64>)
 8006506:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8006508:	79bb      	ldrb	r3, [r7, #6]
 800650a:	4aaf      	ldr	r2, [pc, #700]	; (80067c8 <config_motors+0xf60>)
 800650c:	21a8      	movs	r1, #168	; 0xa8
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	4413      	add	r3, r2
 8006514:	338c      	adds	r3, #140	; 0x8c
 8006516:	4aae      	ldr	r2, [pc, #696]	; (80067d0 <config_motors+0xf68>)
 8006518:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800651a:	79bb      	ldrb	r3, [r7, #6]
 800651c:	4aaa      	ldr	r2, [pc, #680]	; (80067c8 <config_motors+0xf60>)
 800651e:	21a8      	movs	r1, #168	; 0xa8
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	4413      	add	r3, r2
 8006526:	3388      	adds	r3, #136	; 0x88
 8006528:	4aaa      	ldr	r2, [pc, #680]	; (80067d4 <config_motors+0xf6c>)
 800652a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= PITCH_ANGLE_KP;
 800652c:	79bb      	ldrb	r3, [r7, #6]
 800652e:	4aa6      	ldr	r2, [pc, #664]	; (80067c8 <config_motors+0xf60>)
 8006530:	21a8      	movs	r1, #168	; 0xa8
 8006532:	fb01 f303 	mul.w	r3, r1, r3
 8006536:	4413      	add	r3, r2
 8006538:	3344      	adds	r3, #68	; 0x44
 800653a:	4aa7      	ldr	r2, [pc, #668]	; (80067d8 <config_motors+0xf70>)
 800653c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= PITCH_ANGLE_KI;
 800653e:	79bb      	ldrb	r3, [r7, #6]
 8006540:	4aa1      	ldr	r2, [pc, #644]	; (80067c8 <config_motors+0xf60>)
 8006542:	21a8      	movs	r1, #168	; 0xa8
 8006544:	fb01 f303 	mul.w	r3, r1, r3
 8006548:	4413      	add	r3, r2
 800654a:	3348      	adds	r3, #72	; 0x48
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= PITCH_ANGLE_KD;
 8006552:	79bb      	ldrb	r3, [r7, #6]
 8006554:	4a9c      	ldr	r2, [pc, #624]	; (80067c8 <config_motors+0xf60>)
 8006556:	21a8      	movs	r1, #168	; 0xa8
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	4413      	add	r3, r2
 800655e:	334c      	adds	r3, #76	; 0x4c
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= PITCH_ANGLE_INT_MAX;
 8006566:	79bb      	ldrb	r3, [r7, #6]
 8006568:	4a97      	ldr	r2, [pc, #604]	; (80067c8 <config_motors+0xf60>)
 800656a:	21a8      	movs	r1, #168	; 0xa8
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	4413      	add	r3, r2
 8006572:	335c      	adds	r3, #92	; 0x5c
 8006574:	4a99      	ldr	r2, [pc, #612]	; (80067dc <config_motors+0xf74>)
 8006576:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= PITCH_MAX_RPM;
 8006578:	79bb      	ldrb	r3, [r7, #6]
 800657a:	4a93      	ldr	r2, [pc, #588]	; (80067c8 <config_motors+0xf60>)
 800657c:	21a8      	movs	r1, #168	; 0xa8
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	4413      	add	r3, r2
 8006584:	3360      	adds	r3, #96	; 0x60
 8006586:	4a94      	ldr	r2, [pc, #592]	; (80067d8 <config_motors+0xf70>)
 8006588:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 800658a:	79bb      	ldrb	r3, [r7, #6]
 800658c:	4a8e      	ldr	r2, [pc, #568]	; (80067c8 <config_motors+0xf60>)
 800658e:	21a8      	movs	r1, #168	; 0xa8
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	3364      	adds	r3, #100	; 0x64
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= GM6020_MAX_RPM;
 800659e:	79bb      	ldrb	r3, [r7, #6]
 80065a0:	4a89      	ldr	r2, [pc, #548]	; (80067c8 <config_motors+0xf60>)
 80065a2:	21a8      	movs	r1, #168	; 0xa8
 80065a4:	fb01 f303 	mul.w	r3, r1, r3
 80065a8:	4413      	add	r3, r2
 80065aa:	336c      	adds	r3, #108	; 0x6c
 80065ac:	4a8c      	ldr	r2, [pc, #560]	; (80067e0 <config_motors+0xf78>)
 80065ae:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= PITCHRPM_KP;
 80065b0:	79bb      	ldrb	r3, [r7, #6]
 80065b2:	4a85      	ldr	r2, [pc, #532]	; (80067c8 <config_motors+0xf60>)
 80065b4:	21a8      	movs	r1, #168	; 0xa8
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	3310      	adds	r3, #16
 80065be:	4a89      	ldr	r2, [pc, #548]	; (80067e4 <config_motors+0xf7c>)
 80065c0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= PITCHRPM_KI;
 80065c2:	79bb      	ldrb	r3, [r7, #6]
 80065c4:	4a80      	ldr	r2, [pc, #512]	; (80067c8 <config_motors+0xf60>)
 80065c6:	21a8      	movs	r1, #168	; 0xa8
 80065c8:	fb01 f303 	mul.w	r3, r1, r3
 80065cc:	4413      	add	r3, r2
 80065ce:	3314      	adds	r3, #20
 80065d0:	4a85      	ldr	r2, [pc, #532]	; (80067e8 <config_motors+0xf80>)
 80065d2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= PITCHRPM_KD;
 80065d4:	79bb      	ldrb	r3, [r7, #6]
 80065d6:	4a7c      	ldr	r2, [pc, #496]	; (80067c8 <config_motors+0xf60>)
 80065d8:	21a8      	movs	r1, #168	; 0xa8
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	4413      	add	r3, r2
 80065e0:	3318      	adds	r3, #24
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= PITCHRPM_INT_MAX;
 80065e8:	79bb      	ldrb	r3, [r7, #6]
 80065ea:	4a77      	ldr	r2, [pc, #476]	; (80067c8 <config_motors+0xf60>)
 80065ec:	21a8      	movs	r1, #168	; 0xa8
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	3328      	adds	r3, #40	; 0x28
 80065f6:	4a7d      	ldr	r2, [pc, #500]	; (80067ec <config_motors+0xf84>)
 80065f8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= PITCH_MAX_CURRENT;
 80065fa:	79bb      	ldrb	r3, [r7, #6]
 80065fc:	4a72      	ldr	r2, [pc, #456]	; (80067c8 <config_motors+0xf60>)
 80065fe:	21a8      	movs	r1, #168	; 0xa8
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	332c      	adds	r3, #44	; 0x2c
 8006608:	4a79      	ldr	r2, [pc, #484]	; (80067f0 <config_motors+0xf88>)
 800660a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 800660c:	79bb      	ldrb	r3, [r7, #6]
 800660e:	4a6e      	ldr	r2, [pc, #440]	; (80067c8 <config_motors+0xf60>)
 8006610:	21a8      	movs	r1, #168	; 0xa8
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	3330      	adds	r3, #48	; 0x30
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= GM6020_MAX_OUTPUT;
 8006620:	79bb      	ldrb	r3, [r7, #6]
 8006622:	4a69      	ldr	r2, [pc, #420]	; (80067c8 <config_motors+0xf60>)
 8006624:	21a8      	movs	r1, #168	; 0xa8
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	4413      	add	r3, r2
 800662c:	3338      	adds	r3, #56	; 0x38
 800662e:	4a70      	ldr	r2, [pc, #448]	; (80067f0 <config_motors+0xf88>)
 8006630:	601a      	str	r2, [r3, #0]
#endif

#ifdef YAW_MOTOR_ID
	motor_id = YAW_MOTOR_ID -1;
 8006632:	2315      	movs	r3, #21
 8006634:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8006636:	79bb      	ldrb	r3, [r7, #6]
 8006638:	4a63      	ldr	r2, [pc, #396]	; (80067c8 <config_motors+0xf60>)
 800663a:	21a8      	movs	r1, #168	; 0xa8
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4413      	add	r3, r2
 8006642:	3302      	adds	r3, #2
 8006644:	2201      	movs	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = 0;//1;
 8006648:	79bb      	ldrb	r3, [r7, #6]
 800664a:	4a5f      	ldr	r2, [pc, #380]	; (80067c8 <config_motors+0xf60>)
 800664c:	21a8      	movs	r1, #168	; 0xa8
 800664e:	fb01 f303 	mul.w	r3, r1, r3
 8006652:	4413      	add	r3, r2
 8006654:	3390      	adds	r3, #144	; 0x90
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= YAW_CENTER;
 800665c:	79bb      	ldrb	r3, [r7, #6]
 800665e:	4a5a      	ldr	r2, [pc, #360]	; (80067c8 <config_motors+0xf60>)
 8006660:	21a8      	movs	r1, #168	; 0xa8
 8006662:	fb01 f303 	mul.w	r3, r1, r3
 8006666:	4413      	add	r3, r2
 8006668:	337c      	adds	r3, #124	; 0x7c
 800666a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800666e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= YAW_MAX_ANG;
 8006670:	79bb      	ldrb	r3, [r7, #6]
 8006672:	4a55      	ldr	r2, [pc, #340]	; (80067c8 <config_motors+0xf60>)
 8006674:	21a8      	movs	r1, #168	; 0xa8
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	4413      	add	r3, r2
 800667c:	3384      	adds	r3, #132	; 0x84
 800667e:	4a5d      	ldr	r2, [pc, #372]	; (80067f4 <config_motors+0xf8c>)
 8006680:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= YAW_MIN_ANG;
 8006682:	79bb      	ldrb	r3, [r7, #6]
 8006684:	4a50      	ldr	r2, [pc, #320]	; (80067c8 <config_motors+0xf60>)
 8006686:	21a8      	movs	r1, #168	; 0xa8
 8006688:	fb01 f303 	mul.w	r3, r1, r3
 800668c:	4413      	add	r3, r2
 800668e:	3380      	adds	r3, #128	; 0x80
 8006690:	4a59      	ldr	r2, [pc, #356]	; (80067f8 <config_motors+0xf90>)
 8006692:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8006694:	79bb      	ldrb	r3, [r7, #6]
 8006696:	4a4c      	ldr	r2, [pc, #304]	; (80067c8 <config_motors+0xf60>)
 8006698:	21a8      	movs	r1, #168	; 0xa8
 800669a:	fb01 f303 	mul.w	r3, r1, r3
 800669e:	4413      	add	r3, r2
 80066a0:	338c      	adds	r3, #140	; 0x8c
 80066a2:	4a4b      	ldr	r2, [pc, #300]	; (80067d0 <config_motors+0xf68>)
 80066a4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI; //angle before it overflows
 80066a6:	79bb      	ldrb	r3, [r7, #6]
 80066a8:	4a47      	ldr	r2, [pc, #284]	; (80067c8 <config_motors+0xf60>)
 80066aa:	21a8      	movs	r1, #168	; 0xa8
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	4413      	add	r3, r2
 80066b2:	3388      	adds	r3, #136	; 0x88
 80066b4:	4a47      	ldr	r2, [pc, #284]	; (80067d4 <config_motors+0xf6c>)
 80066b6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= YAW_ANGLE_KP;
 80066b8:	79bb      	ldrb	r3, [r7, #6]
 80066ba:	4a43      	ldr	r2, [pc, #268]	; (80067c8 <config_motors+0xf60>)
 80066bc:	21a8      	movs	r1, #168	; 0xa8
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	3344      	adds	r3, #68	; 0x44
 80066c6:	4a44      	ldr	r2, [pc, #272]	; (80067d8 <config_motors+0xf70>)
 80066c8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= YAW_ANGLE_KI;
 80066ca:	79bb      	ldrb	r3, [r7, #6]
 80066cc:	4a3e      	ldr	r2, [pc, #248]	; (80067c8 <config_motors+0xf60>)
 80066ce:	21a8      	movs	r1, #168	; 0xa8
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	3348      	adds	r3, #72	; 0x48
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= YAW_ANGLE_KD;
 80066de:	79bb      	ldrb	r3, [r7, #6]
 80066e0:	4a39      	ldr	r2, [pc, #228]	; (80067c8 <config_motors+0xf60>)
 80066e2:	21a8      	movs	r1, #168	; 0xa8
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	4413      	add	r3, r2
 80066ea:	334c      	adds	r3, #76	; 0x4c
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= YAW_ANGLE_INT_MAX;
 80066f2:	79bb      	ldrb	r3, [r7, #6]
 80066f4:	4a34      	ldr	r2, [pc, #208]	; (80067c8 <config_motors+0xf60>)
 80066f6:	21a8      	movs	r1, #168	; 0xa8
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	4413      	add	r3, r2
 80066fe:	335c      	adds	r3, #92	; 0x5c
 8006700:	4a3e      	ldr	r2, [pc, #248]	; (80067fc <config_motors+0xf94>)
 8006702:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= YAW_MAX_RPM;
 8006704:	79bb      	ldrb	r3, [r7, #6]
 8006706:	4a30      	ldr	r2, [pc, #192]	; (80067c8 <config_motors+0xf60>)
 8006708:	21a8      	movs	r1, #168	; 0xa8
 800670a:	fb01 f303 	mul.w	r3, r1, r3
 800670e:	4413      	add	r3, r2
 8006710:	3360      	adds	r3, #96	; 0x60
 8006712:	4a33      	ldr	r2, [pc, #204]	; (80067e0 <config_motors+0xf78>)
 8006714:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8006716:	79bb      	ldrb	r3, [r7, #6]
 8006718:	4a2b      	ldr	r2, [pc, #172]	; (80067c8 <config_motors+0xf60>)
 800671a:	21a8      	movs	r1, #168	; 0xa8
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	4413      	add	r3, r2
 8006722:	3364      	adds	r3, #100	; 0x64
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= GM6020_MAX_RPM;
 800672a:	79bb      	ldrb	r3, [r7, #6]
 800672c:	4a26      	ldr	r2, [pc, #152]	; (80067c8 <config_motors+0xf60>)
 800672e:	21a8      	movs	r1, #168	; 0xa8
 8006730:	fb01 f303 	mul.w	r3, r1, r3
 8006734:	4413      	add	r3, r2
 8006736:	336c      	adds	r3, #108	; 0x6c
 8006738:	4a29      	ldr	r2, [pc, #164]	; (80067e0 <config_motors+0xf78>)
 800673a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= YAWRPM_KP;
 800673c:	79bb      	ldrb	r3, [r7, #6]
 800673e:	4a22      	ldr	r2, [pc, #136]	; (80067c8 <config_motors+0xf60>)
 8006740:	21a8      	movs	r1, #168	; 0xa8
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	4413      	add	r3, r2
 8006748:	3310      	adds	r3, #16
 800674a:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <config_motors+0xf78>)
 800674c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= YAWRPM_KI;
 800674e:	79bb      	ldrb	r3, [r7, #6]
 8006750:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <config_motors+0xf60>)
 8006752:	21a8      	movs	r1, #168	; 0xa8
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	4413      	add	r3, r2
 800675a:	3314      	adds	r3, #20
 800675c:	4a28      	ldr	r2, [pc, #160]	; (8006800 <config_motors+0xf98>)
 800675e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= YAWRPM_KD;
 8006760:	79bb      	ldrb	r3, [r7, #6]
 8006762:	4a19      	ldr	r2, [pc, #100]	; (80067c8 <config_motors+0xf60>)
 8006764:	21a8      	movs	r1, #168	; 0xa8
 8006766:	fb01 f303 	mul.w	r3, r1, r3
 800676a:	4413      	add	r3, r2
 800676c:	3318      	adds	r3, #24
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= YAWRPM_INT_MAX;
 8006774:	79bb      	ldrb	r3, [r7, #6]
 8006776:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <config_motors+0xf60>)
 8006778:	21a8      	movs	r1, #168	; 0xa8
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	3328      	adds	r3, #40	; 0x28
 8006782:	4a20      	ldr	r2, [pc, #128]	; (8006804 <config_motors+0xf9c>)
 8006784:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= YAW_MAX_CURRENT;
 8006786:	79bb      	ldrb	r3, [r7, #6]
 8006788:	4a0f      	ldr	r2, [pc, #60]	; (80067c8 <config_motors+0xf60>)
 800678a:	21a8      	movs	r1, #168	; 0xa8
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	4413      	add	r3, r2
 8006792:	332c      	adds	r3, #44	; 0x2c
 8006794:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <config_motors+0xf88>)
 8006796:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 8006798:	79bb      	ldrb	r3, [r7, #6]
 800679a:	4a0b      	ldr	r2, [pc, #44]	; (80067c8 <config_motors+0xf60>)
 800679c:	21a8      	movs	r1, #168	; 0xa8
 800679e:	fb01 f303 	mul.w	r3, r1, r3
 80067a2:	4413      	add	r3, r2
 80067a4:	3330      	adds	r3, #48	; 0x30
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= GM6020_MAX_OUTPUT;
 80067ac:	79bb      	ldrb	r3, [r7, #6]
 80067ae:	4a06      	ldr	r2, [pc, #24]	; (80067c8 <config_motors+0xf60>)
 80067b0:	21a8      	movs	r1, #168	; 0xa8
 80067b2:	fb01 f303 	mul.w	r3, r1, r3
 80067b6:	4413      	add	r3, r2
 80067b8:	3338      	adds	r3, #56	; 0x38
 80067ba:	4a0d      	ldr	r2, [pc, #52]	; (80067f0 <config_motors+0xf88>)
 80067bc:	601a      	str	r2, [r3, #0]
#endif
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	e020      	b.n	8006808 <config_motors+0xfa0>
 80067c6:	bf00      	nop
 80067c8:	20000ea8 	.word	0x20000ea8
 80067cc:	becccccd 	.word	0xbecccccd
 80067d0:	40c90fdb 	.word	0x40c90fdb
 80067d4:	c0c90fdb 	.word	0xc0c90fdb
 80067d8:	43480000 	.word	0x43480000
 80067dc:	447a0000 	.word	0x447a0000
 80067e0:	43c80000 	.word	0x43c80000
 80067e4:	442f0000 	.word	0x442f0000
 80067e8:	3dcccccd 	.word	0x3dcccccd
 80067ec:	461c4000 	.word	0x461c4000
 80067f0:	469c4000 	.word	0x469c4000
 80067f4:	41490fdb 	.word	0x41490fdb
 80067f8:	c1490fdb 	.word	0xc1490fdb
 80067fc:	42c80000 	.word	0x42c80000
 8006800:	3c23d70a 	.word	0x3c23d70a
 8006804:	459c4000 	.word	0x459c4000
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop

08006810 <motor_calib_task>:


void motor_calib_task(void* argument)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 8006818:	2200      	movs	r2, #0
 800681a:	2100      	movs	r1, #0
 800681c:	4807      	ldr	r0, [pc, #28]	; (800683c <motor_calib_task+0x2c>)
 800681e:	f7fa fc17 	bl	8001050 <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 8006822:	2200      	movs	r2, #0
 8006824:	2100      	movs	r1, #0
 8006826:	4806      	ldr	r0, [pc, #24]	; (8006840 <motor_calib_task+0x30>)
 8006828:	f7fa fc12 	bl	8001050 <can_start>
	config_motors();
 800682c:	f7ff f81c 	bl	8005868 <config_motors>
	//insert can tester?
	while (1)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006830:	f04f 31ff 	mov.w	r1, #4294967295
 8006834:	2001      	movs	r0, #1
 8006836:	f00d f8c5 	bl	80139c4 <ulTaskNotifyTake>
 800683a:	e7f9      	b.n	8006830 <motor_calib_task+0x20>
 800683c:	2000021c 	.word	0x2000021c
 8006840:	20000244 	.word	0x20000244

08006844 <speed_pid>:
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */

void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {  //edited version
 8006844:	b580      	push	{r7, lr}
 8006846:	b08e      	sub	sp, #56	; 0x38
 8006848:	af00      	add	r7, sp, #0
 800684a:	ed87 0b04 	vstr	d0, [r7, #16]
 800684e:	ed87 1b02 	vstr	d1, [r7, #8]
 8006852:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
	pid->last_time[0] = get_microseconds();
 800685c:	f7fb f9c0 	bl	8001be0 <get_microseconds>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	62da      	str	r2, [r3, #44]	; 0x2c
	/*
	if (pid->last_time[1]>= pid->last_time[0]) {
		return;
	} */
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 8006866:	2301      	movs	r3, #1
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
	double Pout = 0;
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	f04f 0300 	mov.w	r3, #0
 800687e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8006882:	f04f 0200 	mov.w	r2, #0
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[0] = setpoint - curr_pt;
 800688e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006892:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006896:	f7f9 fcaf 	bl	80001f8 <__aeabi_dsub>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4610      	mov	r0, r2
 80068a0:	4619      	mov	r1, r3
 80068a2:	f7fa f959 	bl	8000b58 <__aeabi_d2f>
 80068a6:	4602      	mov	r2, r0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	edd3 7a00 	vldr	s15, [r3]
 80068b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ca:	ee17 0a90 	vmov	r0, s15
 80068ce:	f7f9 fdf3 	bl	80004b8 <__aeabi_f2d>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	Dout = (float)(curr_pt - pid->error[1]) * pid->kd * time_mult;  //(input-lastinput) * kd
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7f9 fdea 	bl	80004b8 <__aeabi_f2d>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068ec:	f7f9 fc84 	bl	80001f8 <__aeabi_dsub>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4610      	mov	r0, r2
 80068f6:	4619      	mov	r1, r3
 80068f8:	f7fa f92e 	bl	8000b58 <__aeabi_d2f>
 80068fc:	ee07 0a10 	vmov	s14, r0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	edd3 7a02 	vldr	s15, [r3, #8]
 8006906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800690a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690c:	ee07 3a90 	vmov	s15, r3
 8006910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006918:	ee17 0a90 	vmov	r0, s15
 800691c:	f7f9 fdcc 	bl	80004b8 <__aeabi_f2d>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->integral += pid->error[0] * pid->ki * time_mult;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	ed93 7a05 	vldr	s14, [r3, #20]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	edd3 6a03 	vldr	s13, [r3, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	edd3 7a01 	vldr	s15, [r3, #4]
 800693a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800693e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006940:	ee07 3a90 	vmov	s15, r3
 8006944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800694c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	edc3 7a05 	vstr	s15, [r3, #20]
	float_minmax(&pid->integral, pid->int_max, 0); //constrain integral term
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f103 0214 	add.w	r2, r3, #20
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	edd3 7a06 	vldr	s15, [r3, #24]
 8006962:	eddf 0a21 	vldr	s1, [pc, #132]	; 80069e8 <speed_pid+0x1a4>
 8006966:	eeb0 0a67 	vmov.f32	s0, s15
 800696a:	4610      	mov	r0, r2
 800696c:	f000 fb22 	bl	8006fb4 <float_minmax>
	Iout = pid->integral;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	4618      	mov	r0, r3
 8006976:	f7f9 fd9f 	bl	80004b8 <__aeabi_f2d>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout - Dout;
 8006982:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800698a:	f7f9 fc37 	bl	80001fc <__adddf3>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	4610      	mov	r0, r2
 8006994:	4619      	mov	r1, r3
 8006996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800699a:	f7f9 fc2d 	bl	80001f8 <__aeabi_dsub>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4610      	mov	r0, r2
 80069a4:	4619      	mov	r1, r3
 80069a6:	f7fa f8d7 	bl	8000b58 <__aeabi_d2f>
 80069aa:	4602      	mov	r2, r0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	625a      	str	r2, [r3, #36]	; 0x24
	constrain_value(&pid->output, pid->max_out, pid->min_out); //constrain output term
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	ed93 7a08 	vldr	s14, [r3, #32]
 80069c2:	eef0 0a47 	vmov.f32	s1, s14
 80069c6:	eeb0 0a67 	vmov.f32	s0, s15
 80069ca:	4610      	mov	r0, r2
 80069cc:	f000 fb32 	bl	8007034 <constrain_value>
	pid->error[1] = curr_pt;  // store lastinput
 80069d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069d4:	f7fa f8c0 	bl	8000b58 <__aeabi_d2f>
 80069d8:	4602      	mov	r2, r0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	611a      	str	r2, [r3, #16]
}
 80069de:	bf00      	nop
 80069e0:	3738      	adds	r7, #56	; 0x38
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	00000000 	.word	0x00000000

080069ec <motor_send_can>:
 */
void motor_send_can(motor_data_t motor_all[],
		uint8_t id_one,
		uint8_t id_two,
		uint8_t id_three,
		uint8_t id_four) {
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08e      	sub	sp, #56	; 0x38
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	70fb      	strb	r3, [r7, #3]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70bb      	strb	r3, [r7, #2]
 8006a02:	4613      	mov	r3, r2
 8006a04:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	uint32_t temp_checker = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	623b      	str	r3, [r7, #32]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_tx_message.DLC = 0x08;
 8006a12:	2308      	movs	r3, #8
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28
	if (id_one < 25 && id_one > 0) {
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	2b18      	cmp	r3, #24
 8006a1a:	d80b      	bhi.n	8006a34 <motor_send_can+0x48>
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d008      	beq.n	8006a34 <motor_send_can+0x48>
		temp_checker = temp_checker | 1 << (id_one - 1);
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	2201      	movs	r2, #1
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	4313      	orrs	r3, r2
 8006a32:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_two < 25 && id_two > 0) {
 8006a34:	78bb      	ldrb	r3, [r7, #2]
 8006a36:	2b18      	cmp	r3, #24
 8006a38:	d80b      	bhi.n	8006a52 <motor_send_can+0x66>
 8006a3a:	78bb      	ldrb	r3, [r7, #2]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d008      	beq.n	8006a52 <motor_send_can+0x66>
		temp_checker = temp_checker | 1 << (id_two - 1);
 8006a40:	78bb      	ldrb	r3, [r7, #2]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	2201      	movs	r2, #1
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_three < 25 && id_three > 0) {
 8006a52:	787b      	ldrb	r3, [r7, #1]
 8006a54:	2b18      	cmp	r3, #24
 8006a56:	d80b      	bhi.n	8006a70 <motor_send_can+0x84>
 8006a58:	787b      	ldrb	r3, [r7, #1]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d008      	beq.n	8006a70 <motor_send_can+0x84>
		temp_checker = temp_checker | 1 << (id_three - 1);
 8006a5e:	787b      	ldrb	r3, [r7, #1]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	2201      	movs	r2, #1
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_four < 25 && id_four > 0) {
 8006a70:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006a74:	2b18      	cmp	r3, #24
 8006a76:	d80d      	bhi.n	8006a94 <motor_send_can+0xa8>
 8006a78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <motor_send_can+0xa8>
		temp_checker = temp_checker | 1 << (id_four - 1);
 8006a80:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006a84:	3b01      	subs	r3, #1
 8006a86:	2201      	movs	r2, #1
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a90:	4313      	orrs	r3, r2
 8006a92:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (temp_checker & 0x00000F) {
 8006a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d054      	beq.n	8006b48 <motor_send_can+0x15c>
		CAN_tx_message.StdId = 0x200;
 8006a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa2:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0].rpm_pid.output;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aae:	ee17 3a90 	vmov	r3, s15
 8006ab2:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006ab4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006ab8:	121b      	asrs	r3, r3, #8
 8006aba:	b21b      	sxth	r3, r3
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006ac0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1].rpm_pid.output;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	33a8      	adds	r3, #168	; 0xa8
 8006aca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ad2:	ee17 3a90 	vmov	r3, s15
 8006ad6:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006ad8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006adc:	121b      	asrs	r3, r3, #8
 8006ade:	b21b      	sxth	r3, r3
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006ae4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2].rpm_pid.output;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006af0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006af8:	ee17 3a90 	vmov	r3, s15
 8006afc:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006afe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b02:	121b      	asrs	r3, r3, #8
 8006b04:	b21b      	sxth	r3, r3
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006b0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3].rpm_pid.output;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b16:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b1e:	ee17 3a90 	vmov	r3, s15
 8006b22:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006b24:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b28:	121b      	asrs	r3, r3, #8
 8006b2a:	b21b      	sxth	r3, r3
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006b30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006b36:	f107 030c 	add.w	r3, r7, #12
 8006b3a:	f107 0210 	add.w	r2, r7, #16
 8006b3e:	f107 0118 	add.w	r1, r7, #24
 8006b42:	48bc      	ldr	r0, [pc, #752]	; (8006e34 <motor_send_can+0x448>)
 8006b44:	f001 f9fc 	bl	8007f40 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0000F0) {
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d057      	beq.n	8006c02 <motor_send_can+0x216>
		CAN_tx_message.StdId = 0x1FF;
 8006b52:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006b56:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4].rpm_pid.output;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8006b5e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b66:	ee17 3a90 	vmov	r3, s15
 8006b6a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006b6c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b70:	121b      	asrs	r3, r3, #8
 8006b72:	b21b      	sxth	r3, r3
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006b78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5].rpm_pid.output;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006b84:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b8c:	ee17 3a90 	vmov	r3, s15
 8006b90:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006b92:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b96:	121b      	asrs	r3, r3, #8
 8006b98:	b21b      	sxth	r3, r3
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006b9e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6].rpm_pid.output;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8006baa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bb2:	ee17 3a90 	vmov	r3, s15
 8006bb6:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006bb8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006bbc:	121b      	asrs	r3, r3, #8
 8006bbe:	b21b      	sxth	r3, r3
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006bc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7].rpm_pid.output;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8006bd0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bd8:	ee17 3a90 	vmov	r3, s15
 8006bdc:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006bde:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006be2:	121b      	asrs	r3, r3, #8
 8006be4:	b21b      	sxth	r3, r3
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006bea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006bf0:	f107 030c 	add.w	r3, r7, #12
 8006bf4:	f107 0210 	add.w	r2, r7, #16
 8006bf8:	f107 0118 	add.w	r1, r7, #24
 8006bfc:	488d      	ldr	r0, [pc, #564]	; (8006e34 <motor_send_can+0x448>)
 8006bfe:	f001 f99f 	bl	8007f40 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x000F00) {
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d057      	beq.n	8006cbc <motor_send_can+0x2d0>
		CAN_tx_message.StdId = 0x2FF;
 8006c0c:	f240 23ff 	movw	r3, #767	; 0x2ff
 8006c10:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8].rpm_pid.output;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8006c18:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c20:	ee17 3a90 	vmov	r3, s15
 8006c24:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006c26:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006c2a:	121b      	asrs	r3, r3, #8
 8006c2c:	b21b      	sxth	r3, r3
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006c32:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9].rpm_pid.output;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8006c3e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c46:	ee17 3a90 	vmov	r3, s15
 8006c4a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006c4c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006c50:	121b      	asrs	r3, r3, #8
 8006c52:	b21b      	sxth	r3, r3
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006c58:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA].rpm_pid.output;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8006c64:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c6c:	ee17 3a90 	vmov	r3, s15
 8006c70:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006c72:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006c76:	121b      	asrs	r3, r3, #8
 8006c78:	b21b      	sxth	r3, r3
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006c7e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB].rpm_pid.output;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8006c8a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c92:	ee17 3a90 	vmov	r3, s15
 8006c96:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006c98:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006c9c:	121b      	asrs	r3, r3, #8
 8006c9e:	b21b      	sxth	r3, r3
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006ca4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006caa:	f107 030c 	add.w	r3, r7, #12
 8006cae:	f107 0210 	add.w	r2, r7, #16
 8006cb2:	f107 0118 	add.w	r1, r7, #24
 8006cb6:	485f      	ldr	r0, [pc, #380]	; (8006e34 <motor_send_can+0x448>)
 8006cb8:	f001 f942 	bl	8007f40 <HAL_CAN_AddTxMessage>
	}
#ifndef CHASSIS_MCU
	if (temp_checker & 0x00F000) {
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d057      	beq.n	8006d76 <motor_send_can+0x38a>
		CAN_tx_message.StdId = 0x200;
 8006cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cca:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0 + 12].rpm_pid.output;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8006cd2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cda:	ee17 3a90 	vmov	r3, s15
 8006cde:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006ce0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006ce4:	121b      	asrs	r3, r3, #8
 8006ce6:	b21b      	sxth	r3, r3
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1 + 12].rpm_pid.output;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8006cf8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d00:	ee17 3a90 	vmov	r3, s15
 8006d04:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006d06:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006d0a:	121b      	asrs	r3, r3, #8
 8006d0c:	b21b      	sxth	r3, r3
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006d12:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2 + 12].rpm_pid.output;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8006d1e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d26:	ee17 3a90 	vmov	r3, s15
 8006d2a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006d2c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006d30:	121b      	asrs	r3, r3, #8
 8006d32:	b21b      	sxth	r3, r3
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006d38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3 + 12].rpm_pid.output;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f603 13d8 	addw	r3, r3, #2520	; 0x9d8
 8006d44:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d4c:	ee17 3a90 	vmov	r3, s15
 8006d50:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006d52:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006d56:	121b      	asrs	r3, r3, #8
 8006d58:	b21b      	sxth	r3, r3
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006d5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006d64:	f107 030c 	add.w	r3, r7, #12
 8006d68:	f107 0210 	add.w	r2, r7, #16
 8006d6c:	f107 0118 	add.w	r1, r7, #24
 8006d70:	4831      	ldr	r0, [pc, #196]	; (8006e38 <motor_send_can+0x44c>)
 8006d72:	f001 f8e5 	bl	8007f40 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0F0000) {
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d78:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d05d      	beq.n	8006e3c <motor_send_can+0x450>
		CAN_tx_message.StdId = 0x1FF;
 8006d80:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006d84:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4 + 12].rpm_pid.output;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8006d8c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d94:	ee17 3a90 	vmov	r3, s15
 8006d98:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006d9a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006d9e:	121b      	asrs	r3, r3, #8
 8006da0:	b21b      	sxth	r3, r3
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006da6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5 + 12].rpm_pid.output;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8006db2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dba:	ee17 3a90 	vmov	r3, s15
 8006dbe:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006dc0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006dc4:	121b      	asrs	r3, r3, #8
 8006dc6:	b21b      	sxth	r3, r3
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006dcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6 + 12].rpm_pid.output;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8006dd8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006de0:	ee17 3a90 	vmov	r3, s15
 8006de4:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006de6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006dea:	121b      	asrs	r3, r3, #8
 8006dec:	b21b      	sxth	r3, r3
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006df2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7 + 12].rpm_pid.output;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8006dfe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e06:	ee17 3a90 	vmov	r3, s15
 8006e0a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006e0c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006e10:	121b      	asrs	r3, r3, #8
 8006e12:	b21b      	sxth	r3, r3
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006e18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006e1e:	f107 030c 	add.w	r3, r7, #12
 8006e22:	f107 0210 	add.w	r2, r7, #16
 8006e26:	f107 0118 	add.w	r1, r7, #24
 8006e2a:	4803      	ldr	r0, [pc, #12]	; (8006e38 <motor_send_can+0x44c>)
 8006e2c:	f001 f888 	bl	8007f40 <HAL_CAN_AddTxMessage>
 8006e30:	e004      	b.n	8006e3c <motor_send_can+0x450>
 8006e32:	bf00      	nop
 8006e34:	2000021c 	.word	0x2000021c
 8006e38:	20000244 	.word	0x20000244
	}
	if (temp_checker & 0xF00000) {
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d057      	beq.n	8006ef6 <motor_send_can+0x50a>
		CAN_tx_message.StdId = 0x2FF;
 8006e46:	f240 23ff 	movw	r3, #767	; 0x2ff
 8006e4a:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8 + 12].rpm_pid.output;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8006e52:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e5a:	ee17 3a90 	vmov	r3, s15
 8006e5e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006e60:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006e64:	121b      	asrs	r3, r3, #8
 8006e66:	b21b      	sxth	r3, r3
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006e6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9 + 12].rpm_pid.output;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 8006e78:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e80:	ee17 3a90 	vmov	r3, s15
 8006e84:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006e86:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006e8a:	121b      	asrs	r3, r3, #8
 8006e8c:	b21b      	sxth	r3, r3
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006e92:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA + 12].rpm_pid.output;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8006e9e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ea6:	ee17 3a90 	vmov	r3, s15
 8006eaa:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006eac:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006eb0:	121b      	asrs	r3, r3, #8
 8006eb2:	b21b      	sxth	r3, r3
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006eb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB + 12].rpm_pid.output;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f603 7318 	addw	r3, r3, #3864	; 0xf18
 8006ec4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ecc:	ee17 3a90 	vmov	r3, s15
 8006ed0:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006ed2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006ed6:	121b      	asrs	r3, r3, #8
 8006ed8:	b21b      	sxth	r3, r3
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006ede:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006ee4:	f107 030c 	add.w	r3, r7, #12
 8006ee8:	f107 0210 	add.w	r2, r7, #16
 8006eec:	f107 0118 	add.w	r1, r7, #24
 8006ef0:	4803      	ldr	r0, [pc, #12]	; (8006f00 <motor_send_can+0x514>)
 8006ef2:	f001 f825 	bl	8007f40 <HAL_CAN_AddTxMessage>
	}
#endif
}
 8006ef6:	bf00      	nop
 8006ef8:	3738      	adds	r7, #56	; 0x38
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000244 	.word	0x20000244

08006f04 <kill_can>:

void kill_can() {
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	; 0x28
 8006f08:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8] = { 0, };
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
	uint32_t send_mail_box;
	CAN_tx_message.IDE = CAN_ID_STD;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61bb      	str	r3, [r7, #24]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61fb      	str	r3, [r7, #28]
	CAN_tx_message.DLC = 0x08;
 8006f1a:	2308      	movs	r3, #8
 8006f1c:	623b      	str	r3, [r7, #32]

	CAN_tx_message.StdId = 0x200;
 8006f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f22:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f24:	1d3b      	adds	r3, r7, #4
 8006f26:	f107 0208 	add.w	r2, r7, #8
 8006f2a:	f107 0110 	add.w	r1, r7, #16
 8006f2e:	481f      	ldr	r0, [pc, #124]	; (8006fac <kill_can+0xa8>)
 8006f30:	f001 f806 	bl	8007f40 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x1FF;
 8006f34:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006f38:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	f107 0208 	add.w	r2, r7, #8
 8006f40:	f107 0110 	add.w	r1, r7, #16
 8006f44:	4819      	ldr	r0, [pc, #100]	; (8006fac <kill_can+0xa8>)
 8006f46:	f000 fffb 	bl	8007f40 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x2FF;
 8006f4a:	f240 23ff 	movw	r3, #767	; 0x2ff
 8006f4e:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f50:	1d3b      	adds	r3, r7, #4
 8006f52:	f107 0208 	add.w	r2, r7, #8
 8006f56:	f107 0110 	add.w	r1, r7, #16
 8006f5a:	4814      	ldr	r0, [pc, #80]	; (8006fac <kill_can+0xa8>)
 8006f5c:	f000 fff0 	bl	8007f40 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x200;
 8006f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f64:	613b      	str	r3, [r7, #16]
#ifndef CHASSIS_MCU
	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f66:	1d3b      	adds	r3, r7, #4
 8006f68:	f107 0208 	add.w	r2, r7, #8
 8006f6c:	f107 0110 	add.w	r1, r7, #16
 8006f70:	480f      	ldr	r0, [pc, #60]	; (8006fb0 <kill_can+0xac>)
 8006f72:	f000 ffe5 	bl	8007f40 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x1FF;
 8006f76:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006f7a:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f7c:	1d3b      	adds	r3, r7, #4
 8006f7e:	f107 0208 	add.w	r2, r7, #8
 8006f82:	f107 0110 	add.w	r1, r7, #16
 8006f86:	480a      	ldr	r0, [pc, #40]	; (8006fb0 <kill_can+0xac>)
 8006f88:	f000 ffda 	bl	8007f40 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x2FF;
 8006f8c:	f240 23ff 	movw	r3, #767	; 0x2ff
 8006f90:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f92:	1d3b      	adds	r3, r7, #4
 8006f94:	f107 0208 	add.w	r2, r7, #8
 8006f98:	f107 0110 	add.w	r1, r7, #16
 8006f9c:	4804      	ldr	r0, [pc, #16]	; (8006fb0 <kill_can+0xac>)
 8006f9e:	f000 ffcf 	bl	8007f40 <HAL_CAN_AddTxMessage>

#endif
}
 8006fa2:	bf00      	nop
 8006fa4:	3728      	adds	r7, #40	; 0x28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	2000021c 	.word	0x2000021c
 8006fb0:	20000244 	.word	0x20000244

08006fb4 <float_minmax>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_minmax(float *motor_in, float motor_max, float motor_min) {
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	ed87 0a02 	vstr	s0, [r7, #8]
 8006fc0:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	edd3 7a00 	vldr	s15, [r3]
 8006fca:	ed97 7a02 	vldr	s14, [r7, #8]
 8006fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd6:	d503      	bpl.n	8006fe0 <float_minmax+0x2c>
		*motor_in = motor_max;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e012      	b.n	8007006 <float_minmax+0x52>
	} else if (*motor_in < -motor_max) {
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	ed93 7a00 	vldr	s14, [r3]
 8006fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fea:	eef1 7a67 	vneg.f32	s15, s15
 8006fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff6:	d506      	bpl.n	8007006 <float_minmax+0x52>
		*motor_in = -motor_max;
 8006ff8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ffc:	eef1 7a67 	vneg.f32	s15, s15
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	edc3 7a00 	vstr	s15, [r3]
	}

	if (fabs(*motor_in) < motor_min) {
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	edd3 7a00 	vldr	s15, [r3]
 800700c:	eef0 7ae7 	vabs.f32	s15, s15
 8007010:	ed97 7a01 	vldr	s14, [r7, #4]
 8007014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701c:	dc00      	bgt.n	8007020 <float_minmax+0x6c>
		*motor_in = 0;
	}

}
 800701e:	e003      	b.n	8007028 <float_minmax+0x74>
		*motor_in = 0;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <constrain_value>:

void constrain_value(float *motor_in, float motor_max, float motor_min) {
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007040:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	edd3 7a00 	vldr	s15, [r3]
 800704a:	ed97 7a02 	vldr	s14, [r7, #8]
 800704e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007056:	d503      	bpl.n	8007060 <constrain_value+0x2c>
		*motor_in = motor_max;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	601a      	str	r2, [r3, #0]

//	if (fabs(*motor_in) < motor_min) {
//		*motor_in = 0;
//	}

}
 800705e:	e00d      	b.n	800707c <constrain_value+0x48>
	} else if (*motor_in < motor_min) {
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	edd3 7a00 	vldr	s15, [r3]
 8007066:	ed97 7a01 	vldr	s14, [r7, #4]
 800706a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007072:	dc00      	bgt.n	8007076 <constrain_value+0x42>
}
 8007074:	e002      	b.n	800707c <constrain_value+0x48>
		*motor_in = motor_min;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	601a      	str	r2, [r3, #0]
}
 800707c:	bf00      	nop
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <motor_feedback_task>:
extern long current_orient;
long target_orient;
static uint8_t lastturn = 0;


void motor_feedback_task(void *argument) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af02      	add	r7, sp, #8
 800708e:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		start_time = xTaskGetTickCount();
 8007090:	f00b ffe8 	bl	8013064 <xTaskGetTickCount>
 8007094:	4603      	mov	r3, r0
 8007096:	60fb      	str	r3, [r7, #12]
		xEventGroupWaitBits(chassis_event_group, 0b1100, pdTRUE, pdTRUE, portMAX_DELAY); //wait for all motors to connect
 8007098:	4b20      	ldr	r3, [pc, #128]	; (800711c <motor_feedback_task+0x94>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	f04f 33ff 	mov.w	r3, #4294967295
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	2301      	movs	r3, #1
 80070a4:	2201      	movs	r2, #1
 80070a6:	210c      	movs	r1, #12
 80070a8:	f00a fcca 	bl	8011a40 <xEventGroupWaitBits>

		if (chassis_ctrl_data.enabled) {   // RE ENABLE!!!
 80070ac:	4b1c      	ldr	r3, [pc, #112]	; (8007120 <motor_feedback_task+0x98>)
 80070ae:	7b1b      	ldrb	r3, [r3, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <motor_feedback_task+0x3a>
			chassis_feedback_loop(can_motors + FR_MOTOR_ID - 1, can_motors + FL_MOTOR_ID - 1);
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <motor_feedback_task+0x9c>)
 80070b6:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <motor_feedback_task+0xa0>)
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 f83c 	bl	8007138 <chassis_feedback_loop>
 80070c0:	e01b      	b.n	80070fa <motor_feedback_task+0x72>
		} else {
			can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;  //can_motors[13-1]
 80070c2:	4b1a      	ldr	r3, [pc, #104]	; (800712c <motor_feedback_task+0xa4>)
 80070c4:	f603 0314 	addw	r3, r3, #2068	; 0x814
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
			can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;  //can_motors[14-1]
 80070ce:	4b17      	ldr	r3, [pc, #92]	; (800712c <motor_feedback_task+0xa4>)
 80070d0:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
			fl_speed = 0;
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <motor_feedback_task+0xa8>)
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
			fr_speed = 0;
 80070e2:	4b14      	ldr	r3, [pc, #80]	; (8007134 <motor_feedback_task+0xac>)
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
			motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, 0, 0);
 80070ea:	2300      	movs	r3, #0
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2300      	movs	r3, #0
 80070f0:	220e      	movs	r2, #14
 80070f2:	210d      	movs	r1, #13
 80070f4:	480d      	ldr	r0, [pc, #52]	; (800712c <motor_feedback_task+0xa4>)
 80070f6:	f7ff fc79 	bl	80069ec <motor_send_can>
		}

		//delays task for other tasks to run
		status_led(3, off_led);
 80070fa:	2101      	movs	r1, #1
 80070fc:	2003      	movs	r0, #3
 80070fe:	f7fa fcd9 	bl	8001ab4 <status_led>

		xEventGroupClearBits(chassis_event_group, 0b1111);
 8007102:	4b06      	ldr	r3, [pc, #24]	; (800711c <motor_feedback_task+0x94>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	210f      	movs	r1, #15
 8007108:	4618      	mov	r0, r3
 800710a:	f00a fd67 	bl	8011bdc <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 800710e:	f107 030c 	add.w	r3, r7, #12
 8007112:	2102      	movs	r1, #2
 8007114:	4618      	mov	r0, r3
 8007116:	f00b fdd7 	bl	8012cc8 <vTaskDelayUntil>
		start_time = xTaskGetTickCount();
 800711a:	e7b9      	b.n	8007090 <motor_feedback_task+0x8>
 800711c:	2000028c 	.word	0x2000028c
 8007120:	20001e8c 	.word	0x20001e8c
 8007124:	20001688 	.word	0x20001688
 8007128:	20001730 	.word	0x20001730
 800712c:	20000ea8 	.word	0x20000ea8
 8007130:	20001fe8 	.word	0x20001fe8
 8007134:	20001fec 	.word	0x20001fec

08007138 <chassis_feedback_loop>:
	}
	osThreadTerminate(NULL);
}

void chassis_feedback_loop(motor_data_t *motorfr,
		motor_data_t *motorfl){
 8007138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af02      	add	r7, sp, #8
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
	motor_calc_odometry(&can_motors[13].raw_data, &can_motors[13].angle_data,  //note: is disabled in can_msg_processor.c
 8007144:	4a60      	ldr	r2, [pc, #384]	; (80072c8 <chassis_feedback_loop+0x190>)
 8007146:	4961      	ldr	r1, [pc, #388]	; (80072cc <chassis_feedback_loop+0x194>)
 8007148:	4861      	ldr	r0, [pc, #388]	; (80072d0 <chassis_feedback_loop+0x198>)
 800714a:	f7fc fded 	bl	8003d28 <motor_calc_odometry>
								can_motors[13].last_time);
	motor_calc_odometry(&can_motors[12].raw_data, &can_motors[12].angle_data,
 800714e:	4a61      	ldr	r2, [pc, #388]	; (80072d4 <chassis_feedback_loop+0x19c>)
 8007150:	4961      	ldr	r1, [pc, #388]	; (80072d8 <chassis_feedback_loop+0x1a0>)
 8007152:	4862      	ldr	r0, [pc, #392]	; (80072dc <chassis_feedback_loop+0x1a4>)
 8007154:	f7fc fde8 	bl	8003d28 <motor_calc_odometry>
								can_motors[12].last_time);
	if (fabs(chassis_ctrl_data.yaw) >= 0.05) {
 8007158:	4b61      	ldr	r3, [pc, #388]	; (80072e0 <chassis_feedback_loop+0x1a8>)
 800715a:	edd3 7a02 	vldr	s15, [r3, #8]
 800715e:	eef0 7ae7 	vabs.f32	s15, s15
 8007162:	ee17 0a90 	vmov	r0, s15
 8007166:	f7f9 f9a7 	bl	80004b8 <__aeabi_f2d>
 800716a:	a355      	add	r3, pc, #340	; (adr r3, 80072c0 <chassis_feedback_loop+0x188>)
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f7f9 fc80 	bl	8000a74 <__aeabi_dcmpge>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d017      	beq.n	80071aa <chassis_feedback_loop+0x72>
		lastturn = 1 ;
 800717a:	4b5a      	ldr	r3, [pc, #360]	; (80072e4 <chassis_feedback_loop+0x1ac>)
 800717c:	2201      	movs	r2, #1
 800717e:	701a      	strb	r2, [r3, #0]
		target_orient = current_orient - chassis_ctrl_data.yaw*30000; // 30000
 8007180:	4b59      	ldr	r3, [pc, #356]	; (80072e8 <chassis_feedback_loop+0x1b0>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800718c:	4b54      	ldr	r3, [pc, #336]	; (80072e0 <chassis_feedback_loop+0x1a8>)
 800718e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007192:	eddf 6a56 	vldr	s13, [pc, #344]	; 80072ec <chassis_feedback_loop+0x1b4>
 8007196:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800719a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800719e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071a2:	ee17 2a90 	vmov	r2, s15
 80071a6:	4b52      	ldr	r3, [pc, #328]	; (80072f0 <chassis_feedback_loop+0x1b8>)
 80071a8:	601a      	str	r2, [r3, #0]
		}

	if (fabs(chassis_ctrl_data.yaw) < 0.05 && lastturn == 1) {
 80071aa:	4b4d      	ldr	r3, [pc, #308]	; (80072e0 <chassis_feedback_loop+0x1a8>)
 80071ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80071b0:	eef0 7ae7 	vabs.f32	s15, s15
 80071b4:	ee17 0a90 	vmov	r0, s15
 80071b8:	f7f9 f97e 	bl	80004b8 <__aeabi_f2d>
 80071bc:	a340      	add	r3, pc, #256	; (adr r3, 80072c0 <chassis_feedback_loop+0x188>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f7f9 fc43 	bl	8000a4c <__aeabi_dcmplt>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <chassis_feedback_loop+0xaa>
 80071cc:	4b45      	ldr	r3, [pc, #276]	; (80072e4 <chassis_feedback_loop+0x1ac>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d106      	bne.n	80071e2 <chassis_feedback_loop+0xaa>
		target_orient = current_orient;
 80071d4:	4b44      	ldr	r3, [pc, #272]	; (80072e8 <chassis_feedback_loop+0x1b0>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a45      	ldr	r2, [pc, #276]	; (80072f0 <chassis_feedback_loop+0x1b8>)
 80071da:	6013      	str	r3, [r2, #0]
		lastturn = 0 ;
 80071dc:	4b41      	ldr	r3, [pc, #260]	; (80072e4 <chassis_feedback_loop+0x1ac>)
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]
		}
	speed_pid(target_orient, current_orient,&b_orient_pid);
 80071e2:	4b43      	ldr	r3, [pc, #268]	; (80072f0 <chassis_feedback_loop+0x1b8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7f9 f954 	bl	8000494 <__aeabi_i2d>
 80071ec:	4604      	mov	r4, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	4b3d      	ldr	r3, [pc, #244]	; (80072e8 <chassis_feedback_loop+0x1b0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7f9 f94d 	bl	8000494 <__aeabi_i2d>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	483d      	ldr	r0, [pc, #244]	; (80072f4 <chassis_feedback_loop+0x1bc>)
 8007200:	ec43 2b11 	vmov	d1, r2, r3
 8007204:	ec45 4b10 	vmov	d0, r4, r5
 8007208:	f7ff fb1c 	bl	8006844 <speed_pid>


//	rotation = chassis_ctrl_data.yaw * 1000;
	rotation = b_orient_pid.output;
 800720c:	4b39      	ldr	r3, [pc, #228]	; (80072f4 <chassis_feedback_loop+0x1bc>)
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	4a39      	ldr	r2, [pc, #228]	; (80072f8 <chassis_feedback_loop+0x1c0>)
 8007212:	6013      	str	r3, [r2, #0]
	fl_speed = +b_angle_pid.output - rotation;  // motors run in opp directions
 8007214:	4b39      	ldr	r3, [pc, #228]	; (80072fc <chassis_feedback_loop+0x1c4>)
 8007216:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800721a:	4b37      	ldr	r3, [pc, #220]	; (80072f8 <chassis_feedback_loop+0x1c0>)
 800721c:	edd3 7a00 	vldr	s15, [r3]
 8007220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007224:	4b36      	ldr	r3, [pc, #216]	; (8007300 <chassis_feedback_loop+0x1c8>)
 8007226:	edc3 7a00 	vstr	s15, [r3]
	fr_speed = -b_angle_pid.output - rotation;
 800722a:	4b34      	ldr	r3, [pc, #208]	; (80072fc <chassis_feedback_loop+0x1c4>)
 800722c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007230:	eeb1 7a67 	vneg.f32	s14, s15
 8007234:	4b30      	ldr	r3, [pc, #192]	; (80072f8 <chassis_feedback_loop+0x1c0>)
 8007236:	edd3 7a00 	vldr	s15, [r3]
 800723a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800723e:	4b31      	ldr	r3, [pc, #196]	; (8007304 <chassis_feedback_loop+0x1cc>)
 8007240:	edc3 7a00 	vstr	s15, [r3]


	speed_pid(fl_speed, motorfl->raw_data.rpm,&motorfl->rpm_pid);
 8007244:	4b2e      	ldr	r3, [pc, #184]	; (8007300 <chassis_feedback_loop+0x1c8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f7f9 f935 	bl	80004b8 <__aeabi_f2d>
 800724e:	4604      	mov	r4, r0
 8007250:	460d      	mov	r5, r1
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007258:	4618      	mov	r0, r3
 800725a:	f7f9 f91b 	bl	8000494 <__aeabi_i2d>
 800725e:	4680      	mov	r8, r0
 8007260:	4689      	mov	r9, r1
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	3310      	adds	r3, #16
 8007266:	4618      	mov	r0, r3
 8007268:	ec49 8b11 	vmov	d1, r8, r9
 800726c:	ec45 4b10 	vmov	d0, r4, r5
 8007270:	f7ff fae8 	bl	8006844 <speed_pid>
	speed_pid(fr_speed, motorfr->raw_data.rpm,&motorfr->rpm_pid);
 8007274:	4b23      	ldr	r3, [pc, #140]	; (8007304 <chassis_feedback_loop+0x1cc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7f9 f91d 	bl	80004b8 <__aeabi_f2d>
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007288:	4618      	mov	r0, r3
 800728a:	f7f9 f903 	bl	8000494 <__aeabi_i2d>
 800728e:	4680      	mov	r8, r0
 8007290:	4689      	mov	r9, r1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3310      	adds	r3, #16
 8007296:	4618      	mov	r0, r3
 8007298:	ec49 8b11 	vmov	d1, r8, r9
 800729c:	ec45 4b10 	vmov	d0, r4, r5
 80072a0:	f7ff fad0 	bl	8006844 <speed_pid>

	motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, 0, 0); // 0 0  since only 2 motors
 80072a4:	2300      	movs	r3, #0
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	2300      	movs	r3, #0
 80072aa:	220e      	movs	r2, #14
 80072ac:	210d      	movs	r1, #13
 80072ae:	4816      	ldr	r0, [pc, #88]	; (8007308 <chassis_feedback_loop+0x1d0>)
 80072b0:	f7ff fb9c 	bl	80069ec <motor_send_can>
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80072be:	bf00      	nop
 80072c0:	9999999a 	.word	0x9999999a
 80072c4:	3fa99999 	.word	0x3fa99999
 80072c8:	200017d0 	.word	0x200017d0
 80072cc:	200017a8 	.word	0x200017a8
 80072d0:	20001734 	.word	0x20001734
 80072d4:	20001728 	.word	0x20001728
 80072d8:	20001700 	.word	0x20001700
 80072dc:	2000168c 	.word	0x2000168c
 80072e0:	20001e8c 	.word	0x20001e8c
 80072e4:	20001ff8 	.word	0x20001ff8
 80072e8:	200020d8 	.word	0x200020d8
 80072ec:	46ea6000 	.word	0x46ea6000
 80072f0:	20001ff4 	.word	0x20001ff4
 80072f4:	20002030 	.word	0x20002030
 80072f8:	20001ff0 	.word	0x20001ff0
 80072fc:	20001ffc 	.word	0x20001ffc
 8007300:	20001fe8 	.word	0x20001fe8
 8007304:	20001fec 	.word	0x20001fec
 8007308:	20000ea8 	.word	0x20000ea8

0800730c <movement_control_task>:
//static float k4 = 317;
//static float LQRmat[4][4] = {{0,    1.0000,  0,    0}, {-12.2348,  -14.5780,   88.1321,   25.5993}, {0,         0,         0,    1.0000},{ -18.7578,  -22.3503,  150.1450 ,  39.2476}};
//static float Cmat[4] = {1, 0 , 0, 0};


void movement_control_task(void *argument) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	b_angle_pid.kp 			=	B_ANGLE_KP;
 8007314:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <movement_control_task+0xc4>)
 8007316:	4a2f      	ldr	r2, [pc, #188]	; (80073d4 <movement_control_task+0xc8>)
 8007318:	601a      	str	r2, [r3, #0]
	b_angle_pid.ki 			=	B_ANGLE_KI;
 800731a:	4b2d      	ldr	r3, [pc, #180]	; (80073d0 <movement_control_task+0xc4>)
 800731c:	4a2e      	ldr	r2, [pc, #184]	; (80073d8 <movement_control_task+0xcc>)
 800731e:	605a      	str	r2, [r3, #4]
	b_angle_pid.kd 			= 	B_ANGLE_KD;
 8007320:	4b2b      	ldr	r3, [pc, #172]	; (80073d0 <movement_control_task+0xc4>)
 8007322:	4a2e      	ldr	r2, [pc, #184]	; (80073dc <movement_control_task+0xd0>)
 8007324:	609a      	str	r2, [r3, #8]
	b_angle_pid.int_max		= 	B_ANGLE_INT_MAX;
 8007326:	4b2a      	ldr	r3, [pc, #168]	; (80073d0 <movement_control_task+0xc4>)
 8007328:	4a2d      	ldr	r2, [pc, #180]	; (80073e0 <movement_control_task+0xd4>)
 800732a:	619a      	str	r2, [r3, #24]
	b_angle_pid.max_out		= 	B_ANGLE_MAX_OUT;
 800732c:	4b28      	ldr	r3, [pc, #160]	; (80073d0 <movement_control_task+0xc4>)
 800732e:	4a2d      	ldr	r2, [pc, #180]	; (80073e4 <movement_control_task+0xd8>)
 8007330:	61da      	str	r2, [r3, #28]
	b_angle_pid.min_out		=	-B_ANGLE_MAX_OUT;
 8007332:	4b27      	ldr	r3, [pc, #156]	; (80073d0 <movement_control_task+0xc4>)
 8007334:	4a2c      	ldr	r2, [pc, #176]	; (80073e8 <movement_control_task+0xdc>)
 8007336:	621a      	str	r2, [r3, #32]
//	b_angle_pid.physical_max=	1000;

	b_accel_pid.kp 			= 	B_ACCEL_KP;
 8007338:	4b2c      	ldr	r3, [pc, #176]	; (80073ec <movement_control_task+0xe0>)
 800733a:	4a2d      	ldr	r2, [pc, #180]	; (80073f0 <movement_control_task+0xe4>)
 800733c:	601a      	str	r2, [r3, #0]
	b_accel_pid.ki 			= 	B_ACCEL_KI;
 800733e:	4b2b      	ldr	r3, [pc, #172]	; (80073ec <movement_control_task+0xe0>)
 8007340:	4a2c      	ldr	r2, [pc, #176]	; (80073f4 <movement_control_task+0xe8>)
 8007342:	605a      	str	r2, [r3, #4]
	b_accel_pid.kd 			=	B_ACCEL_KD;
 8007344:	4b29      	ldr	r3, [pc, #164]	; (80073ec <movement_control_task+0xe0>)
 8007346:	4a2c      	ldr	r2, [pc, #176]	; (80073f8 <movement_control_task+0xec>)
 8007348:	609a      	str	r2, [r3, #8]
	b_accel_pid.int_max		=	B_ACCEL_INT_MAX;
 800734a:	4b28      	ldr	r3, [pc, #160]	; (80073ec <movement_control_task+0xe0>)
 800734c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007350:	619a      	str	r2, [r3, #24]
	b_accel_pid.max_out		= 	B_ACCEL_MAX_OUT;
 8007352:	4b26      	ldr	r3, [pc, #152]	; (80073ec <movement_control_task+0xe0>)
 8007354:	4a29      	ldr	r2, [pc, #164]	; (80073fc <movement_control_task+0xf0>)
 8007356:	61da      	str	r2, [r3, #28]
	b_accel_pid.min_out		= 	-B_ACCEL_MAX_OUT;
 8007358:	4b24      	ldr	r3, [pc, #144]	; (80073ec <movement_control_task+0xe0>)
 800735a:	4a29      	ldr	r2, [pc, #164]	; (8007400 <movement_control_task+0xf4>)
 800735c:	621a      	str	r2, [r3, #32]

	b_orient_pid.kp 			= 	B_ORIENT_KP;
 800735e:	4b29      	ldr	r3, [pc, #164]	; (8007404 <movement_control_task+0xf8>)
 8007360:	4a25      	ldr	r2, [pc, #148]	; (80073f8 <movement_control_task+0xec>)
 8007362:	601a      	str	r2, [r3, #0]
	b_orient_pid.ki 			= 	B_ORIENT_KI;
 8007364:	4b27      	ldr	r3, [pc, #156]	; (8007404 <movement_control_task+0xf8>)
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	605a      	str	r2, [r3, #4]
	b_orient_pid.kd 			=	B_ORIENT_KD;
 800736c:	4b25      	ldr	r3, [pc, #148]	; (8007404 <movement_control_task+0xf8>)
 800736e:	4a26      	ldr	r2, [pc, #152]	; (8007408 <movement_control_task+0xfc>)
 8007370:	609a      	str	r2, [r3, #8]
	b_orient_pid.int_max		=	B_ORIENT_INT_MAX;
 8007372:	4b24      	ldr	r3, [pc, #144]	; (8007404 <movement_control_task+0xf8>)
 8007374:	4a25      	ldr	r2, [pc, #148]	; (800740c <movement_control_task+0x100>)
 8007376:	619a      	str	r2, [r3, #24]
	b_orient_pid.max_out		= 	B_ORIENT_MAX_OUT;
 8007378:	4b22      	ldr	r3, [pc, #136]	; (8007404 <movement_control_task+0xf8>)
 800737a:	4a24      	ldr	r2, [pc, #144]	; (800740c <movement_control_task+0x100>)
 800737c:	61da      	str	r2, [r3, #28]
	b_orient_pid.min_out		= 	-B_ORIENT_MAX_OUT;
 800737e:	4b21      	ldr	r3, [pc, #132]	; (8007404 <movement_control_task+0xf8>)
 8007380:	4a23      	ldr	r2, [pc, #140]	; (8007410 <movement_control_task+0x104>)
 8007382:	621a      	str	r2, [r3, #32]

	while (1) {
		start_time = xTaskGetTickCount();
 8007384:	f00b fe6e 	bl	8013064 <xTaskGetTickCount>
 8007388:	4603      	mov	r3, r0
 800738a:	60fb      	str	r3, [r7, #12]

		if (chassis_ctrl_data.enabled) {   // RE_ENABLE!!!!
 800738c:	4b21      	ldr	r3, [pc, #132]	; (8007414 <movement_control_task+0x108>)
 800738e:	7b1b      	ldrb	r3, [r3, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d006      	beq.n	80073a2 <movement_control_task+0x96>
			chassis_motion_control(can_motors + FR_MOTOR_ID - 1, can_motors + FL_MOTOR_ID - 1);
 8007394:	4b20      	ldr	r3, [pc, #128]	; (8007418 <movement_control_task+0x10c>)
 8007396:	4a21      	ldr	r2, [pc, #132]	; (800741c <movement_control_task+0x110>)
 8007398:	4611      	mov	r1, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f844 	bl	8007428 <chassis_motion_control>
 80073a0:	e00b      	b.n	80073ba <movement_control_task+0xae>
		} else { //kill motors
			can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;
 80073a2:	4b1f      	ldr	r3, [pc, #124]	; (8007420 <movement_control_task+0x114>)
 80073a4:	f603 0314 	addw	r3, r3, #2068	; 0x814
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
			can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;
 80073ae:	4b1c      	ldr	r3, [pc, #112]	; (8007420 <movement_control_task+0x114>)
 80073b0:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
		}

		//delays task for other tasks to run
		status_led(3, off_led);
 80073ba:	2101      	movs	r1, #1
 80073bc:	2003      	movs	r0, #3
 80073be:	f7fa fb79 	bl	8001ab4 <status_led>
		vTaskDelayUntil(&start_time, BALANCE_DELAY);
 80073c2:	f107 030c 	add.w	r3, r7, #12
 80073c6:	210a      	movs	r1, #10
 80073c8:	4618      	mov	r0, r3
 80073ca:	f00b fc7d 	bl	8012cc8 <vTaskDelayUntil>
		start_time = xTaskGetTickCount();
 80073ce:	e7d9      	b.n	8007384 <movement_control_task+0x78>
 80073d0:	20001ffc 	.word	0x20001ffc
 80073d4:	44160000 	.word	0x44160000
 80073d8:	42700000 	.word	0x42700000
 80073dc:	44960000 	.word	0x44960000
 80073e0:	459c4000 	.word	0x459c4000
 80073e4:	461c4000 	.word	0x461c4000
 80073e8:	c61c4000 	.word	0xc61c4000
 80073ec:	20002064 	.word	0x20002064
 80073f0:	40400000 	.word	0x40400000
 80073f4:	3e4ccccd 	.word	0x3e4ccccd
 80073f8:	3dcccccd 	.word	0x3dcccccd
 80073fc:	41700000 	.word	0x41700000
 8007400:	c1700000 	.word	0xc1700000
 8007404:	20002030 	.word	0x20002030
 8007408:	38d1b717 	.word	0x38d1b717
 800740c:	447a0000 	.word	0x447a0000
 8007410:	c47a0000 	.word	0xc47a0000
 8007414:	20001e8c 	.word	0x20001e8c
 8007418:	20001688 	.word	0x20001688
 800741c:	20001730 	.word	0x20001730
 8007420:	20000ea8 	.word	0x20000ea8
 8007424:	00000000 	.word	0x00000000

08007428 <chassis_motion_control>:
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
	}
}

void chassis_motion_control(motor_data_t *motorfr,
		motor_data_t *motorfl) {
 8007428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]

	currentangle = imu_heading.pit* 57.2958 - ANGLE_OFFSET;
 8007434:	4b40      	ldr	r3, [pc, #256]	; (8007538 <chassis_motion_control+0x110>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f7f9 f83d 	bl	80004b8 <__aeabi_f2d>
 800743e:	a33a      	add	r3, pc, #232	; (adr r3, 8007528 <chassis_motion_control+0x100>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	f7f9 f890 	bl	8000568 <__aeabi_dmul>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4610      	mov	r0, r2
 800744e:	4619      	mov	r1, r3
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	4b39      	ldr	r3, [pc, #228]	; (800753c <chassis_motion_control+0x114>)
 8007456:	f7f8 fed1 	bl	80001fc <__adddf3>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4610      	mov	r0, r2
 8007460:	4619      	mov	r1, r3
 8007462:	f7f9 fb79 	bl	8000b58 <__aeabi_d2f>
 8007466:	4603      	mov	r3, r0
 8007468:	4a35      	ldr	r2, [pc, #212]	; (8007540 <chassis_motion_control+0x118>)
 800746a:	6013      	str	r3, [r2, #0]

	if (first_run==1){  //orientation intialise
 800746c:	4b35      	ldr	r3, [pc, #212]	; (8007544 <chassis_motion_control+0x11c>)
 800746e:	f993 3000 	ldrsb.w	r3, [r3]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d115      	bne.n	80074a2 <chassis_motion_control+0x7a>
		zero_orient[1] =motorfl->angle_data.ticks;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800747a:	4a33      	ldr	r2, [pc, #204]	; (8007548 <chassis_motion_control+0x120>)
 800747c:	6053      	str	r3, [r2, #4]
		zero_orient[2] = motorfr->angle_data.ticks;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007482:	4a31      	ldr	r2, [pc, #196]	; (8007548 <chassis_motion_control+0x120>)
 8007484:	6093      	str	r3, [r2, #8]
		zero_orient[0] = zero_orient[1]-zero_orient[2];
 8007486:	4b30      	ldr	r3, [pc, #192]	; (8007548 <chassis_motion_control+0x120>)
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	4b2f      	ldr	r3, [pc, #188]	; (8007548 <chassis_motion_control+0x120>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	4a2d      	ldr	r2, [pc, #180]	; (8007548 <chassis_motion_control+0x120>)
 8007492:	6013      	str	r3, [r2, #0]
		target_orient = current_orient;
 8007494:	4b2d      	ldr	r3, [pc, #180]	; (800754c <chassis_motion_control+0x124>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a2d      	ldr	r2, [pc, #180]	; (8007550 <chassis_motion_control+0x128>)
 800749a:	6013      	str	r3, [r2, #0]
		first_run = 0;
 800749c:	4b29      	ldr	r3, [pc, #164]	; (8007544 <chassis_motion_control+0x11c>)
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]

	}
	last_ticks[1] = -(motorfl->angle_data.ticks-zero_orient[1]);   //orientation calc
 80074a2:	4b29      	ldr	r3, [pc, #164]	; (8007548 <chassis_motion_control+0x120>)
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	4a29      	ldr	r2, [pc, #164]	; (8007554 <chassis_motion_control+0x12c>)
 80074ae:	6053      	str	r3, [r2, #4]
	last_ticks[2] = motorfr->angle_data.ticks-zero_orient[2];
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80074b4:	4b24      	ldr	r3, [pc, #144]	; (8007548 <chassis_motion_control+0x120>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	4a26      	ldr	r2, [pc, #152]	; (8007554 <chassis_motion_control+0x12c>)
 80074bc:	6093      	str	r3, [r2, #8]
	current_orient = last_ticks[1] - last_ticks[2];
 80074be:	4b25      	ldr	r3, [pc, #148]	; (8007554 <chassis_motion_control+0x12c>)
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	4b24      	ldr	r3, [pc, #144]	; (8007554 <chassis_motion_control+0x12c>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	4a20      	ldr	r2, [pc, #128]	; (800754c <chassis_motion_control+0x124>)
 80074ca:	6013      	str	r3, [r2, #0]

	if (remote_cmd.left_switch == 2){   // if tipped over, manually toggle to standback up
 80074cc:	4b22      	ldr	r3, [pc, #136]	; (8007558 <chassis_motion_control+0x130>)
 80074ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d148      	bne.n	8007568 <chassis_motion_control+0x140>
//		if (first_rebalance == 1){
//		b_angle_pid.integral*=0;
//		first_rebalance = 0;
//		}
		b_angle_pid.kp 			=	B_ANGLE_KP*0.5;
 80074d6:	4b21      	ldr	r3, [pc, #132]	; (800755c <chassis_motion_control+0x134>)
 80074d8:	4a21      	ldr	r2, [pc, #132]	; (8007560 <chassis_motion_control+0x138>)
 80074da:	601a      	str	r2, [r3, #0]
		b_angle_pid.kd 			=	B_ANGLE_KD *2;
 80074dc:	4b1f      	ldr	r3, [pc, #124]	; (800755c <chassis_motion_control+0x134>)
 80074de:	4a21      	ldr	r2, [pc, #132]	; (8007564 <chassis_motion_control+0x13c>)
 80074e0:	609a      	str	r2, [r3, #8]
		speed_pid(0, imu_heading.pit* 57.2958 - ANGLE_OFFSET, &b_angle_pid);
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <chassis_motion_control+0x110>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7f8 ffe6 	bl	80004b8 <__aeabi_f2d>
 80074ec:	a30e      	add	r3, pc, #56	; (adr r3, 8007528 <chassis_motion_control+0x100>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f9 f839 	bl	8000568 <__aeabi_dmul>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	f04f 0200 	mov.w	r2, #0
 8007502:	4b0e      	ldr	r3, [pc, #56]	; (800753c <chassis_motion_control+0x114>)
 8007504:	f7f8 fe7a 	bl	80001fc <__adddf3>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	ec43 2b17 	vmov	d7, r2, r3
 8007510:	4812      	ldr	r0, [pc, #72]	; (800755c <chassis_motion_control+0x134>)
 8007512:	eeb0 1a47 	vmov.f32	s2, s14
 8007516:	eef0 1a67 	vmov.f32	s3, s15
 800751a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8007530 <chassis_motion_control+0x108>
 800751e:	f7ff f991 	bl	8006844 <speed_pid>



	}

}
 8007522:	e20a      	b.n	800793a <chassis_motion_control+0x512>
 8007524:	f3af 8000 	nop.w
 8007528:	c63f1412 	.word	0xc63f1412
 800752c:	404ca5dc 	.word	0x404ca5dc
	...
 8007538:	20001fa4 	.word	0x20001fa4
 800753c:	40140000 	.word	0x40140000
 8007540:	200020c8 	.word	0x200020c8
 8007544:	2000000c 	.word	0x2000000c
 8007548:	200020cc 	.word	0x200020cc
 800754c:	200020d8 	.word	0x200020d8
 8007550:	20001ff4 	.word	0x20001ff4
 8007554:	200020dc 	.word	0x200020dc
 8007558:	20001e68 	.word	0x20001e68
 800755c:	20001ffc 	.word	0x20001ffc
 8007560:	43960000 	.word	0x43960000
 8007564:	45160000 	.word	0x45160000
		target_speed = chassis_ctrl_data.forward * MAX_SPEED;
 8007568:	4ba5      	ldr	r3, [pc, #660]	; (8007800 <chassis_motion_control+0x3d8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4aa5      	ldr	r2, [pc, #660]	; (8007804 <chassis_motion_control+0x3dc>)
 800756e:	6013      	str	r3, [r2, #0]
		avg_wheel_speed = (motorfr->raw_data.rpm - motorfl->raw_data.rpm)/38.4   //motors running in opposite directions, so (L+(-R))/2 / gear ratio 19.2
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007576:	461a      	mov	r2, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	4618      	mov	r0, r3
 8007582:	f7f8 ff87 	bl	8000494 <__aeabi_i2d>
 8007586:	a394      	add	r3, pc, #592	; (adr r3, 80077d8 <chassis_motion_control+0x3b0>)
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	f7f9 f916 	bl	80007bc <__aeabi_ddiv>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4610      	mov	r0, r2
 8007596:	4619      	mov	r1, r3
											* WHEEL_CIRC/100 *1/60;		//rpm * wheel circ in cm /100 * 1/60  = m/s
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	4b9a      	ldr	r3, [pc, #616]	; (8007808 <chassis_motion_control+0x3e0>)
 800759e:	f7f8 ffe3 	bl	8000568 <__aeabi_dmul>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4610      	mov	r0, r2
 80075a8:	4619      	mov	r1, r3
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	4b97      	ldr	r3, [pc, #604]	; (800780c <chassis_motion_control+0x3e4>)
 80075b0:	f7f9 f904 	bl	80007bc <__aeabi_ddiv>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4610      	mov	r0, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	4b93      	ldr	r3, [pc, #588]	; (8007810 <chassis_motion_control+0x3e8>)
 80075c2:	f7f9 f8fb 	bl	80007bc <__aeabi_ddiv>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	f7f9 fac3 	bl	8000b58 <__aeabi_d2f>
 80075d2:	4603      	mov	r3, r0
		avg_wheel_speed = (motorfr->raw_data.rpm - motorfl->raw_data.rpm)/38.4   //motors running in opposite directions, so (L+(-R))/2 / gear ratio 19.2
 80075d4:	4a8f      	ldr	r2, [pc, #572]	; (8007814 <chassis_motion_control+0x3ec>)
 80075d6:	6013      	str	r3, [r2, #0]
		last_angle_time[0] = HAL_GetTick(); //ms
 80075d8:	f000 fa62 	bl	8007aa0 <HAL_GetTick>
 80075dc:	4603      	mov	r3, r0
 80075de:	4a8e      	ldr	r2, [pc, #568]	; (8007818 <chassis_motion_control+0x3f0>)
 80075e0:	6013      	str	r3, [r2, #0]
		last_angles[0] = imu_heading.pit;
 80075e2:	4b8e      	ldr	r3, [pc, #568]	; (800781c <chassis_motion_control+0x3f4>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a8e      	ldr	r2, [pc, #568]	; (8007820 <chassis_motion_control+0x3f8>)
 80075e8:	6013      	str	r3, [r2, #0]
		float dt = ((float) (last_angle_time[0] - last_angle_time[1]) / 1000.0f);
 80075ea:	4b8b      	ldr	r3, [pc, #556]	; (8007818 <chassis_motion_control+0x3f0>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b8a      	ldr	r3, [pc, #552]	; (8007818 <chassis_motion_control+0x3f0>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075fc:	eddf 6a89 	vldr	s13, [pc, #548]	; 8007824 <chassis_motion_control+0x3fc>
 8007600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007604:	edc7 7a03 	vstr	s15, [r7, #12]
		angular_vel = (last_angles[0] - last_angles[1]) / dt;
 8007608:	4b85      	ldr	r3, [pc, #532]	; (8007820 <chassis_motion_control+0x3f8>)
 800760a:	ed93 7a00 	vldr	s14, [r3]
 800760e:	4b84      	ldr	r3, [pc, #528]	; (8007820 <chassis_motion_control+0x3f8>)
 8007610:	edd3 7a01 	vldr	s15, [r3, #4]
 8007614:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007618:	ed97 7a03 	vldr	s14, [r7, #12]
 800761c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007620:	4b81      	ldr	r3, [pc, #516]	; (8007828 <chassis_motion_control+0x400>)
 8007622:	edc3 7a00 	vstr	s15, [r3]
		velocity = avg_wheel_speed - CG_radius * angular_vel * cos(last_angles[0]);   // v = wheel vel - r* w* cos( theta )
 8007626:	4b7b      	ldr	r3, [pc, #492]	; (8007814 <chassis_motion_control+0x3ec>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f7f8 ff44 	bl	80004b8 <__aeabi_f2d>
 8007630:	4604      	mov	r4, r0
 8007632:	460d      	mov	r5, r1
 8007634:	4b7c      	ldr	r3, [pc, #496]	; (8007828 <chassis_motion_control+0x400>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f7f8 ff3d 	bl	80004b8 <__aeabi_f2d>
 800763e:	a368      	add	r3, pc, #416	; (adr r3, 80077e0 <chassis_motion_control+0x3b8>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f8 ff90 	bl	8000568 <__aeabi_dmul>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4690      	mov	r8, r2
 800764e:	4699      	mov	r9, r3
 8007650:	4b73      	ldr	r3, [pc, #460]	; (8007820 <chassis_motion_control+0x3f8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4618      	mov	r0, r3
 8007656:	f7f8 ff2f 	bl	80004b8 <__aeabi_f2d>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	ec43 2b10 	vmov	d0, r2, r3
 8007662:	f00e f8dd 	bl	8015820 <cos>
 8007666:	ec53 2b10 	vmov	r2, r3, d0
 800766a:	4640      	mov	r0, r8
 800766c:	4649      	mov	r1, r9
 800766e:	f7f8 ff7b 	bl	8000568 <__aeabi_dmul>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	f7f8 fdbd 	bl	80001f8 <__aeabi_dsub>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	f7f9 fa67 	bl	8000b58 <__aeabi_d2f>
 800768a:	4603      	mov	r3, r0
 800768c:	4a67      	ldr	r2, [pc, #412]	; (800782c <chassis_motion_control+0x404>)
 800768e:	6013      	str	r3, [r2, #0]
		last_vel[0] = velocity;
 8007690:	4b66      	ldr	r3, [pc, #408]	; (800782c <chassis_motion_control+0x404>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a66      	ldr	r2, [pc, #408]	; (8007830 <chassis_motion_control+0x408>)
 8007696:	6013      	str	r3, [r2, #0]
		accel = ((float) (last_vel[0] - last_vel[1]) / 1000.0f);
 8007698:	4b65      	ldr	r3, [pc, #404]	; (8007830 <chassis_motion_control+0x408>)
 800769a:	ed93 7a00 	vldr	s14, [r3]
 800769e:	4b64      	ldr	r3, [pc, #400]	; (8007830 <chassis_motion_control+0x408>)
 80076a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80076a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007824 <chassis_motion_control+0x3fc>
 80076ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076b0:	4b60      	ldr	r3, [pc, #384]	; (8007834 <chassis_motion_control+0x40c>)
 80076b2:	edc3 7a00 	vstr	s15, [r3]
		last_angles[1] = last_angles[0];
 80076b6:	4b5a      	ldr	r3, [pc, #360]	; (8007820 <chassis_motion_control+0x3f8>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a59      	ldr	r2, [pc, #356]	; (8007820 <chassis_motion_control+0x3f8>)
 80076bc:	6053      	str	r3, [r2, #4]
		last_vel[1] = last_vel[0];
 80076be:	4b5c      	ldr	r3, [pc, #368]	; (8007830 <chassis_motion_control+0x408>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a5b      	ldr	r2, [pc, #364]	; (8007830 <chassis_motion_control+0x408>)
 80076c4:	6053      	str	r3, [r2, #4]
		last_angle_time[1] = last_angle_time[0];
 80076c6:	4b54      	ldr	r3, [pc, #336]	; (8007818 <chassis_motion_control+0x3f0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a53      	ldr	r2, [pc, #332]	; (8007818 <chassis_motion_control+0x3f0>)
 80076cc:	6053      	str	r3, [r2, #4]
		if (remote_cmd.left_switch == 1){  //left switch up for Cascade PID control
 80076ce:	4b5a      	ldr	r3, [pc, #360]	; (8007838 <chassis_motion_control+0x410>)
 80076d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	f040 80c3 	bne.w	8007860 <chassis_motion_control+0x438>
			b_angle_pid.kp 			=	B_ANGLE_KP;  //reset
 80076da:	4b58      	ldr	r3, [pc, #352]	; (800783c <chassis_motion_control+0x414>)
 80076dc:	4a58      	ldr	r2, [pc, #352]	; (8007840 <chassis_motion_control+0x418>)
 80076de:	601a      	str	r2, [r3, #0]
			b_angle_pid.ki 			=	B_ANGLE_KI;  //reset
 80076e0:	4b56      	ldr	r3, [pc, #344]	; (800783c <chassis_motion_control+0x414>)
 80076e2:	4a58      	ldr	r2, [pc, #352]	; (8007844 <chassis_motion_control+0x41c>)
 80076e4:	605a      	str	r2, [r3, #4]
			b_angle_pid.kd 			=	B_ANGLE_KD;
 80076e6:	4b55      	ldr	r3, [pc, #340]	; (800783c <chassis_motion_control+0x414>)
 80076e8:	4a57      	ldr	r2, [pc, #348]	; (8007848 <chassis_motion_control+0x420>)
 80076ea:	609a      	str	r2, [r3, #8]
			b_accel_pid.max_out		= 	B_ACCEL_MAX_OUT;
 80076ec:	4b57      	ldr	r3, [pc, #348]	; (800784c <chassis_motion_control+0x424>)
 80076ee:	4a58      	ldr	r2, [pc, #352]	; (8007850 <chassis_motion_control+0x428>)
 80076f0:	61da      	str	r2, [r3, #28]
			b_accel_pid.kp 			= 	B_ACCEL_KP;
 80076f2:	4b56      	ldr	r3, [pc, #344]	; (800784c <chassis_motion_control+0x424>)
 80076f4:	4a57      	ldr	r2, [pc, #348]	; (8007854 <chassis_motion_control+0x42c>)
 80076f6:	601a      	str	r2, [r3, #0]
			if (counter == 10){
 80076f8:	4b57      	ldr	r3, [pc, #348]	; (8007858 <chassis_motion_control+0x430>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b0a      	cmp	r3, #10
 80076fe:	d13c      	bne.n	800777a <chassis_motion_control+0x352>
				if (fabs(chassis_ctrl_data.forward) <0.05){  //decay integral faster to stop if minimal fwd input
 8007700:	4b3f      	ldr	r3, [pc, #252]	; (8007800 <chassis_motion_control+0x3d8>)
 8007702:	edd3 7a00 	vldr	s15, [r3]
 8007706:	eef0 7ae7 	vabs.f32	s15, s15
 800770a:	ee17 0a90 	vmov	r0, s15
 800770e:	f7f8 fed3 	bl	80004b8 <__aeabi_f2d>
 8007712:	a335      	add	r3, pc, #212	; (adr r3, 80077e8 <chassis_motion_control+0x3c0>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f7f9 f998 	bl	8000a4c <__aeabi_dcmplt>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d012      	beq.n	8007748 <chassis_motion_control+0x320>
						b_accel_pid.integral*=0.8;
 8007722:	4b4a      	ldr	r3, [pc, #296]	; (800784c <chassis_motion_control+0x424>)
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	4618      	mov	r0, r3
 8007728:	f7f8 fec6 	bl	80004b8 <__aeabi_f2d>
 800772c:	a330      	add	r3, pc, #192	; (adr r3, 80077f0 <chassis_motion_control+0x3c8>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 ff19 	bl	8000568 <__aeabi_dmul>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4610      	mov	r0, r2
 800773c:	4619      	mov	r1, r3
 800773e:	f7f9 fa0b 	bl	8000b58 <__aeabi_d2f>
 8007742:	4603      	mov	r3, r0
 8007744:	4a41      	ldr	r2, [pc, #260]	; (800784c <chassis_motion_control+0x424>)
 8007746:	6153      	str	r3, [r2, #20]
				speed_pid(target_speed, velocity, &b_accel_pid); //velocity PID calc
 8007748:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <chassis_motion_control+0x3dc>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f7f8 feb3 	bl	80004b8 <__aeabi_f2d>
 8007752:	4604      	mov	r4, r0
 8007754:	460d      	mov	r5, r1
 8007756:	4b35      	ldr	r3, [pc, #212]	; (800782c <chassis_motion_control+0x404>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f7f8 feac 	bl	80004b8 <__aeabi_f2d>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4839      	ldr	r0, [pc, #228]	; (800784c <chassis_motion_control+0x424>)
 8007766:	ec43 2b11 	vmov	d1, r2, r3
 800776a:	ec45 4b10 	vmov	d0, r4, r5
 800776e:	f7ff f869 	bl	8006844 <speed_pid>
				counter = 0;
 8007772:	4b39      	ldr	r3, [pc, #228]	; (8007858 <chassis_motion_control+0x430>)
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	e004      	b.n	8007784 <chassis_motion_control+0x35c>
				counter+=1;
 800777a:	4b37      	ldr	r3, [pc, #220]	; (8007858 <chassis_motion_control+0x430>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3301      	adds	r3, #1
 8007780:	4a35      	ldr	r2, [pc, #212]	; (8007858 <chassis_motion_control+0x430>)
 8007782:	6013      	str	r3, [r2, #0]
			speed_pid(b_accel_pid.output, imu_heading.pit* 57.2958 - ANGLE_OFFSET, &b_angle_pid); //angle PID calc
 8007784:	4b31      	ldr	r3, [pc, #196]	; (800784c <chassis_motion_control+0x424>)
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	4618      	mov	r0, r3
 800778a:	f7f8 fe95 	bl	80004b8 <__aeabi_f2d>
 800778e:	4604      	mov	r4, r0
 8007790:	460d      	mov	r5, r1
 8007792:	4b22      	ldr	r3, [pc, #136]	; (800781c <chassis_motion_control+0x3f4>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f7f8 fe8e 	bl	80004b8 <__aeabi_f2d>
 800779c:	a316      	add	r3, pc, #88	; (adr r3, 80077f8 <chassis_motion_control+0x3d0>)
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	f7f8 fee1 	bl	8000568 <__aeabi_dmul>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4610      	mov	r0, r2
 80077ac:	4619      	mov	r1, r3
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	4b2a      	ldr	r3, [pc, #168]	; (800785c <chassis_motion_control+0x434>)
 80077b4:	f7f8 fd22 	bl	80001fc <__adddf3>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	ec43 2b17 	vmov	d7, r2, r3
 80077c0:	481e      	ldr	r0, [pc, #120]	; (800783c <chassis_motion_control+0x414>)
 80077c2:	eeb0 1a47 	vmov.f32	s2, s14
 80077c6:	eef0 1a67 	vmov.f32	s3, s15
 80077ca:	ec45 4b10 	vmov	d0, r4, r5
 80077ce:	f7ff f839 	bl	8006844 <speed_pid>
}
 80077d2:	e0b2      	b.n	800793a <chassis_motion_control+0x512>
 80077d4:	f3af 8000 	nop.w
 80077d8:	33333333 	.word	0x33333333
 80077dc:	40433333 	.word	0x40433333
 80077e0:	4dd2f1aa 	.word	0x4dd2f1aa
 80077e4:	3fa81062 	.word	0x3fa81062
 80077e8:	9999999a 	.word	0x9999999a
 80077ec:	3fa99999 	.word	0x3fa99999
 80077f0:	9999999a 	.word	0x9999999a
 80077f4:	3fe99999 	.word	0x3fe99999
 80077f8:	c63f1412 	.word	0xc63f1412
 80077fc:	404ca5dc 	.word	0x404ca5dc
 8007800:	20001e8c 	.word	0x20001e8c
 8007804:	20002098 	.word	0x20002098
 8007808:	403e0000 	.word	0x403e0000
 800780c:	40590000 	.word	0x40590000
 8007810:	404e0000 	.word	0x404e0000
 8007814:	2000209c 	.word	0x2000209c
 8007818:	200020bc 	.word	0x200020bc
 800781c:	20001fa4 	.word	0x20001fa4
 8007820:	200020ac 	.word	0x200020ac
 8007824:	447a0000 	.word	0x447a0000
 8007828:	200020a0 	.word	0x200020a0
 800782c:	200020a4 	.word	0x200020a4
 8007830:	200020b4 	.word	0x200020b4
 8007834:	200020a8 	.word	0x200020a8
 8007838:	20001e68 	.word	0x20001e68
 800783c:	20001ffc 	.word	0x20001ffc
 8007840:	44160000 	.word	0x44160000
 8007844:	42700000 	.word	0x42700000
 8007848:	44960000 	.word	0x44960000
 800784c:	20002064 	.word	0x20002064
 8007850:	41700000 	.word	0x41700000
 8007854:	40400000 	.word	0x40400000
 8007858:	200020c4 	.word	0x200020c4
 800785c:	40140000 	.word	0x40140000
		else if (remote_cmd.left_switch == 3){   //left switch middle  for State Space control
 8007860:	4b3b      	ldr	r3, [pc, #236]	; (8007950 <chassis_motion_control+0x528>)
 8007862:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d167      	bne.n	800793a <chassis_motion_control+0x512>
			b_angle_pid.output = - (currentangle * k1 + angular_vel * k2 + (velocity-target_speed*0.8 )* k3 + accel * k4);
 800786a:	4b3a      	ldr	r3, [pc, #232]	; (8007954 <chassis_motion_control+0x52c>)
 800786c:	ed93 7a00 	vldr	s14, [r3]
 8007870:	4b39      	ldr	r3, [pc, #228]	; (8007958 <chassis_motion_control+0x530>)
 8007872:	edd3 7a00 	vldr	s15, [r3]
 8007876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800787a:	4b38      	ldr	r3, [pc, #224]	; (800795c <chassis_motion_control+0x534>)
 800787c:	edd3 6a00 	vldr	s13, [r3]
 8007880:	4b37      	ldr	r3, [pc, #220]	; (8007960 <chassis_motion_control+0x538>)
 8007882:	edd3 7a00 	vldr	s15, [r3]
 8007886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800788a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800788e:	ee17 0a90 	vmov	r0, s15
 8007892:	f7f8 fe11 	bl	80004b8 <__aeabi_f2d>
 8007896:	4604      	mov	r4, r0
 8007898:	460d      	mov	r5, r1
 800789a:	4b32      	ldr	r3, [pc, #200]	; (8007964 <chassis_motion_control+0x53c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7f8 fe0a 	bl	80004b8 <__aeabi_f2d>
 80078a4:	4680      	mov	r8, r0
 80078a6:	4689      	mov	r9, r1
 80078a8:	4b2f      	ldr	r3, [pc, #188]	; (8007968 <chassis_motion_control+0x540>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7f8 fe03 	bl	80004b8 <__aeabi_f2d>
 80078b2:	a325      	add	r3, pc, #148	; (adr r3, 8007948 <chassis_motion_control+0x520>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f8 fe56 	bl	8000568 <__aeabi_dmul>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f8 fc98 	bl	80001f8 <__aeabi_dsub>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4690      	mov	r8, r2
 80078ce:	4699      	mov	r9, r3
 80078d0:	4b26      	ldr	r3, [pc, #152]	; (800796c <chassis_motion_control+0x544>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7f8 fdef 	bl	80004b8 <__aeabi_f2d>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f8 fe41 	bl	8000568 <__aeabi_dmul>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4620      	mov	r0, r4
 80078ec:	4629      	mov	r1, r5
 80078ee:	f7f8 fc85 	bl	80001fc <__adddf3>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4614      	mov	r4, r2
 80078f8:	461d      	mov	r5, r3
 80078fa:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <chassis_motion_control+0x548>)
 80078fc:	ed93 7a00 	vldr	s14, [r3]
 8007900:	4b1c      	ldr	r3, [pc, #112]	; (8007974 <chassis_motion_control+0x54c>)
 8007902:	edd3 7a00 	vldr	s15, [r3]
 8007906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790a:	ee17 0a90 	vmov	r0, s15
 800790e:	f7f8 fdd3 	bl	80004b8 <__aeabi_f2d>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4620      	mov	r0, r4
 8007918:	4629      	mov	r1, r5
 800791a:	f7f8 fc6f 	bl	80001fc <__adddf3>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4610      	mov	r0, r2
 8007924:	4619      	mov	r1, r3
 8007926:	f7f9 f917 	bl	8000b58 <__aeabi_d2f>
 800792a:	4603      	mov	r3, r0
 800792c:	ee07 3a90 	vmov	s15, r3
 8007930:	eef1 7a67 	vneg.f32	s15, s15
 8007934:	4b10      	ldr	r3, [pc, #64]	; (8007978 <chassis_motion_control+0x550>)
 8007936:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800793a:	bf00      	nop
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007944:	f3af 8000 	nop.w
 8007948:	9999999a 	.word	0x9999999a
 800794c:	3fe99999 	.word	0x3fe99999
 8007950:	20001e68 	.word	0x20001e68
 8007954:	200020c8 	.word	0x200020c8
 8007958:	20000010 	.word	0x20000010
 800795c:	200020a0 	.word	0x200020a0
 8007960:	20000014 	.word	0x20000014
 8007964:	200020a4 	.word	0x200020a4
 8007968:	20002098 	.word	0x20002098
 800796c:	20000018 	.word	0x20000018
 8007970:	200020a8 	.word	0x200020a8
 8007974:	2000001c 	.word	0x2000001c
 8007978:	20001ffc 	.word	0x20001ffc

0800797c <startup_task>:
extern remote_cmd_t remote_cmd;
extern float pitch;
extern float yaw;
uint16_t error = 0b111111111;

void startup_task() {
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
	led_on();
 8007980:	f7fa f872 	bl	8001a68 <led_on>
	buzzer_init();
 8007984:	f7f9 fb1e 	bl	8000fc4 <buzzer_init>
	imu_config();
 8007988:	f7f9 fe7a 	bl	8001680 <imu_config>
	HAL_Delay(STARTUP_DELAY);
 800798c:	2064      	movs	r0, #100	; 0x64
 800798e:	f000 f893 	bl	8007ab8 <HAL_Delay>
	led_green_off();
 8007992:	f7fa f85d 	bl	8001a50 <led_green_off>
	start_micros_timer();
 8007996:	f7fa f90b 	bl	8001bb0 <start_micros_timer>
	//motor online check, code does not continue if any fails
	ok_buzzer(1, 1);
 800799a:	2101      	movs	r1, #1
 800799c:	2001      	movs	r0, #1
 800799e:	f000 f804 	bl	80079aa <ok_buzzer>
	led_toggle();
 80079a2:	f7fa f875 	bl	8001a90 <led_toggle>

}
 80079a6:	bf00      	nop
 80079a8:	bd80      	pop	{r7, pc}

080079aa <ok_buzzer>:
		HAL_Delay(BUZZER_DELAY);
	}
	HAL_Delay(BUZZER_DELAY * 2);
}

void ok_buzzer(uint8_t high, uint8_t low) {
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	4603      	mov	r3, r0
 80079b2:	460a      	mov	r2, r1
 80079b4:	71fb      	strb	r3, [r7, #7]
 80079b6:	4613      	mov	r3, r2
 80079b8:	71bb      	strb	r3, [r7, #6]
	for (int8_t i = 0; i < high; i++) {
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
 80079be:	e012      	b.n	80079e6 <ok_buzzer+0x3c>
		//PWM
		buzzer(HIGH_FREQ);
 80079c0:	f44f 705c 	mov.w	r0, #880	; 0x370
 80079c4:	f7f9 fadc 	bl	8000f80 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 80079c8:	2046      	movs	r0, #70	; 0x46
 80079ca:	f000 f875 	bl	8007ab8 <HAL_Delay>
		buzzer(0);
 80079ce:	2000      	movs	r0, #0
 80079d0:	f7f9 fad6 	bl	8000f80 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 80079d4:	2046      	movs	r0, #70	; 0x46
 80079d6:	f000 f86f 	bl	8007ab8 <HAL_Delay>
	for (int8_t i = 0; i < high; i++) {
 80079da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	3301      	adds	r3, #1
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	73fb      	strb	r3, [r7, #15]
 80079e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80079ea:	79fb      	ldrb	r3, [r7, #7]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	dbe7      	blt.n	80079c0 <ok_buzzer+0x16>
	}
	for (int8_t i = 0; i < low; i++) {
 80079f0:	2300      	movs	r3, #0
 80079f2:	73bb      	strb	r3, [r7, #14]
 80079f4:	e012      	b.n	8007a1c <ok_buzzer+0x72>
		buzzer(LOW_FREQ);
 80079f6:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80079fa:	f7f9 fac1 	bl	8000f80 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 80079fe:	2046      	movs	r0, #70	; 0x46
 8007a00:	f000 f85a 	bl	8007ab8 <HAL_Delay>
		buzzer(0);
 8007a04:	2000      	movs	r0, #0
 8007a06:	f7f9 fabb 	bl	8000f80 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8007a0a:	2046      	movs	r0, #70	; 0x46
 8007a0c:	f000 f854 	bl	8007ab8 <HAL_Delay>
	for (int8_t i = 0; i < low; i++) {
 8007a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	3301      	adds	r3, #1
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	73bb      	strb	r3, [r7, #14]
 8007a1c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007a20:	79bb      	ldrb	r3, [r7, #6]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	dbe7      	blt.n	80079f6 <ok_buzzer+0x4c>
	}
	HAL_Delay(BUZZER_DELAY * 2);
 8007a26:	208c      	movs	r0, #140	; 0x8c
 8007a28:	f000 f846 	bl	8007ab8 <HAL_Delay>
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a38:	4b0e      	ldr	r3, [pc, #56]	; (8007a74 <HAL_Init+0x40>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a0d      	ldr	r2, [pc, #52]	; (8007a74 <HAL_Init+0x40>)
 8007a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a44:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <HAL_Init+0x40>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a0a      	ldr	r2, [pc, #40]	; (8007a74 <HAL_Init+0x40>)
 8007a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a50:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <HAL_Init+0x40>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a07      	ldr	r2, [pc, #28]	; (8007a74 <HAL_Init+0x40>)
 8007a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a5c:	2003      	movs	r0, #3
 8007a5e:	f000 ff7c 	bl	800895a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a62:	2000      	movs	r0, #0
 8007a64:	f7fa feec 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007a68:	f7fa fea0 	bl	80027ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40023c00 	.word	0x40023c00

08007a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <HAL_IncTick+0x20>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <HAL_IncTick+0x24>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4413      	add	r3, r2
 8007a88:	4a04      	ldr	r2, [pc, #16]	; (8007a9c <HAL_IncTick+0x24>)
 8007a8a:	6013      	str	r3, [r2, #0]
}
 8007a8c:	bf00      	nop
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000024 	.word	0x20000024
 8007a9c:	200020e8 	.word	0x200020e8

08007aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8007aa4:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <HAL_GetTick+0x14>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	200020e8 	.word	0x200020e8

08007ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ac0:	f7ff ffee 	bl	8007aa0 <HAL_GetTick>
 8007ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad0:	d005      	beq.n	8007ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ad2:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <HAL_Delay+0x44>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007ade:	bf00      	nop
 8007ae0:	f7ff ffde 	bl	8007aa0 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d8f7      	bhi.n	8007ae0 <HAL_Delay+0x28>
  {
  }
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000024 	.word	0x20000024

08007b00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e0ed      	b.n	8007cee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fa f952 	bl	8001dc8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0201 	orr.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b34:	f7ff ffb4 	bl	8007aa0 <HAL_GetTick>
 8007b38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b3a:	e012      	b.n	8007b62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b3c:	f7ff ffb0 	bl	8007aa0 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b0a      	cmp	r3, #10
 8007b48:	d90b      	bls.n	8007b62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2205      	movs	r2, #5
 8007b5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e0c5      	b.n	8007cee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0e5      	beq.n	8007b3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0202 	bic.w	r2, r2, #2
 8007b7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b80:	f7ff ff8e 	bl	8007aa0 <HAL_GetTick>
 8007b84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007b86:	e012      	b.n	8007bae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b88:	f7ff ff8a 	bl	8007aa0 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b0a      	cmp	r3, #10
 8007b94:	d90b      	bls.n	8007bae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e09f      	b.n	8007cee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e5      	bne.n	8007b88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	7e1b      	ldrb	r3, [r3, #24]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d108      	bne.n	8007bd6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e007      	b.n	8007be6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7e5b      	ldrb	r3, [r3, #25]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d108      	bne.n	8007c00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e007      	b.n	8007c10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	7e9b      	ldrb	r3, [r3, #26]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d108      	bne.n	8007c2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0220 	orr.w	r2, r2, #32
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	e007      	b.n	8007c3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0220 	bic.w	r2, r2, #32
 8007c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	7edb      	ldrb	r3, [r3, #27]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d108      	bne.n	8007c54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0210 	bic.w	r2, r2, #16
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e007      	b.n	8007c64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0210 	orr.w	r2, r2, #16
 8007c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	7f1b      	ldrb	r3, [r3, #28]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d108      	bne.n	8007c7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0208 	orr.w	r2, r2, #8
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	e007      	b.n	8007c8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0208 	bic.w	r2, r2, #8
 8007c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	7f5b      	ldrb	r3, [r3, #29]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d108      	bne.n	8007ca8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f042 0204 	orr.w	r2, r2, #4
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	e007      	b.n	8007cb8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0204 	bic.w	r2, r2, #4
 8007cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	ea42 0103 	orr.w	r1, r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	1e5a      	subs	r2, r3, #1
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d0e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007d10:	7cfb      	ldrb	r3, [r7, #19]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d003      	beq.n	8007d1e <HAL_CAN_ConfigFilter+0x26>
 8007d16:	7cfb      	ldrb	r3, [r7, #19]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	f040 80be 	bne.w	8007e9a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007d1e:	4b65      	ldr	r3, [pc, #404]	; (8007eb4 <HAL_CAN_ConfigFilter+0x1bc>)
 8007d20:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d28:	f043 0201 	orr.w	r2, r3, #1
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	f003 031f 	and.w	r3, r3, #31
 8007d5e:	2201      	movs	r2, #1
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	43db      	mvns	r3, r3
 8007d70:	401a      	ands	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d123      	bne.n	8007dc8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	43db      	mvns	r3, r3
 8007d8a:	401a      	ands	r2, r3
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007da2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	3248      	adds	r2, #72	; 0x48
 8007da8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007dbc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007dbe:	6979      	ldr	r1, [r7, #20]
 8007dc0:	3348      	adds	r3, #72	; 0x48
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	440b      	add	r3, r1
 8007dc6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d122      	bne.n	8007e16 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007df0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	3248      	adds	r2, #72	; 0x48
 8007df6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007e0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007e0c:	6979      	ldr	r1, [r7, #20]
 8007e0e:	3348      	adds	r3, #72	; 0x48
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	440b      	add	r3, r1
 8007e14:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	43db      	mvns	r3, r3
 8007e28:	401a      	ands	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007e30:	e007      	b.n	8007e42 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	43db      	mvns	r3, r3
 8007e54:	401a      	ands	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007e5c:	e007      	b.n	8007e6e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	431a      	orrs	r2, r3
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d107      	bne.n	8007e86 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e8c:	f023 0201 	bic.w	r2, r3, #1
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	e006      	b.n	8007ea8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
  }
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	371c      	adds	r7, #28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	40006400 	.word	0x40006400

08007eb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d12e      	bne.n	8007f2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ee4:	f7ff fddc 	bl	8007aa0 <HAL_GetTick>
 8007ee8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007eea:	e012      	b.n	8007f12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007eec:	f7ff fdd8 	bl	8007aa0 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b0a      	cmp	r3, #10
 8007ef8:	d90b      	bls.n	8007f12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2205      	movs	r2, #5
 8007f0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e012      	b.n	8007f38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e5      	bne.n	8007eec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	e006      	b.n	8007f38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
  }
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b089      	sub	sp, #36	; 0x24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007f5e:	7ffb      	ldrb	r3, [r7, #31]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d003      	beq.n	8007f6c <HAL_CAN_AddTxMessage+0x2c>
 8007f64:	7ffb      	ldrb	r3, [r7, #31]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	f040 80b8 	bne.w	80080dc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d105      	bne.n	8007f8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80a0 	beq.w	80080cc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	0e1b      	lsrs	r3, r3, #24
 8007f90:	f003 0303 	and.w	r3, r3, #3
 8007f94:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d907      	bls.n	8007fac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e09e      	b.n	80080ea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007fac:	2201      	movs	r2, #1
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	409a      	lsls	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10d      	bne.n	8007fda <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007fc8:	68f9      	ldr	r1, [r7, #12]
 8007fca:	6809      	ldr	r1, [r1, #0]
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	3318      	adds	r3, #24
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	440b      	add	r3, r1
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e00f      	b.n	8007ffa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fe4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007fee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3318      	adds	r3, #24
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	440b      	add	r3, r1
 8007ff8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6819      	ldr	r1, [r3, #0]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	691a      	ldr	r2, [r3, #16]
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	3318      	adds	r3, #24
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	440b      	add	r3, r1
 800800a:	3304      	adds	r3, #4
 800800c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	7d1b      	ldrb	r3, [r3, #20]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d111      	bne.n	800803a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	3318      	adds	r3, #24
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	4413      	add	r3, r2
 8008022:	3304      	adds	r3, #4
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	6811      	ldr	r1, [r2, #0]
 800802a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	3318      	adds	r3, #24
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	440b      	add	r3, r1
 8008036:	3304      	adds	r3, #4
 8008038:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3307      	adds	r3, #7
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	061a      	lsls	r2, r3, #24
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3306      	adds	r3, #6
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	041b      	lsls	r3, r3, #16
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3305      	adds	r3, #5
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	4313      	orrs	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	3204      	adds	r2, #4
 800805a:	7812      	ldrb	r2, [r2, #0]
 800805c:	4610      	mov	r0, r2
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	6811      	ldr	r1, [r2, #0]
 8008062:	ea43 0200 	orr.w	r2, r3, r0
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	440b      	add	r3, r1
 800806c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008070:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3303      	adds	r3, #3
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	061a      	lsls	r2, r3, #24
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3302      	adds	r3, #2
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	041b      	lsls	r3, r3, #16
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3301      	adds	r3, #1
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	4313      	orrs	r3, r2
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	7812      	ldrb	r2, [r2, #0]
 8008092:	4610      	mov	r0, r2
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	6811      	ldr	r1, [r2, #0]
 8008098:	ea43 0200 	orr.w	r2, r3, r0
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	011b      	lsls	r3, r3, #4
 80080a0:	440b      	add	r3, r1
 80080a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80080a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	3318      	adds	r3, #24
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	4413      	add	r3, r2
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	6811      	ldr	r1, [r2, #0]
 80080ba:	f043 0201 	orr.w	r2, r3, #1
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	3318      	adds	r3, #24
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	440b      	add	r3, r1
 80080c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	e00e      	b.n	80080ea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e006      	b.n	80080ea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3724      	adds	r7, #36	; 0x24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80080f6:	b480      	push	{r7}
 80080f8:	b087      	sub	sp, #28
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
 8008102:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800810a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d003      	beq.n	800811a <HAL_CAN_GetRxMessage+0x24>
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2b02      	cmp	r3, #2
 8008116:	f040 80f3 	bne.w	8008300 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10e      	bne.n	800813e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d116      	bne.n	800815c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e0e7      	b.n	800830e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f003 0303 	and.w	r3, r3, #3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d107      	bne.n	800815c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e0d8      	b.n	800830e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	331b      	adds	r3, #27
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	4413      	add	r3, r2
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0204 	and.w	r2, r3, #4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10c      	bne.n	8008194 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	331b      	adds	r3, #27
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	4413      	add	r3, r2
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	0d5b      	lsrs	r3, r3, #21
 800818a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	e00b      	b.n	80081ac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	331b      	adds	r3, #27
 800819c:	011b      	lsls	r3, r3, #4
 800819e:	4413      	add	r3, r2
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	08db      	lsrs	r3, r3, #3
 80081a4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	331b      	adds	r3, #27
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	4413      	add	r3, r2
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0202 	and.w	r2, r3, #2
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	331b      	adds	r3, #27
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	4413      	add	r3, r2
 80081ce:	3304      	adds	r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 020f 	and.w	r2, r3, #15
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	331b      	adds	r3, #27
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	4413      	add	r3, r2
 80081e6:	3304      	adds	r3, #4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	0a1b      	lsrs	r3, r3, #8
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	331b      	adds	r3, #27
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	4413      	add	r3, r2
 80081fe:	3304      	adds	r3, #4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	0c1b      	lsrs	r3, r3, #16
 8008204:	b29a      	uxth	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	4413      	add	r3, r2
 8008214:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	b2da      	uxtb	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	4413      	add	r3, r2
 800822a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	0a1a      	lsrs	r2, r3, #8
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	3301      	adds	r3, #1
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	4413      	add	r3, r2
 8008244:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	0c1a      	lsrs	r2, r3, #16
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	3302      	adds	r3, #2
 8008250:	b2d2      	uxtb	r2, r2
 8008252:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	4413      	add	r3, r2
 800825e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	0e1a      	lsrs	r2, r3, #24
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	3303      	adds	r3, #3
 800826a:	b2d2      	uxtb	r2, r2
 800826c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	4413      	add	r3, r2
 8008278:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	3304      	adds	r3, #4
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	4413      	add	r3, r2
 8008290:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	0a1a      	lsrs	r2, r3, #8
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	3305      	adds	r3, #5
 800829c:	b2d2      	uxtb	r2, r2
 800829e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	0c1a      	lsrs	r2, r3, #16
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	3306      	adds	r3, #6
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	0e1a      	lsrs	r2, r3, #24
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	3307      	adds	r3, #7
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d108      	bne.n	80082ec <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f042 0220 	orr.w	r2, r2, #32
 80082e8:	60da      	str	r2, [r3, #12]
 80082ea:	e007      	b.n	80082fc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	691a      	ldr	r2, [r3, #16]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0220 	orr.w	r2, r2, #32
 80082fa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	e006      	b.n	800830e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
  }
}
 800830e:	4618      	mov	r0, r3
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800831a:	b480      	push	{r7}
 800831c:	b085      	sub	sp, #20
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800832a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d002      	beq.n	8008338 <HAL_CAN_ActivateNotification+0x1e>
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d109      	bne.n	800834c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6959      	ldr	r1, [r3, #20]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	e006      	b.n	800835a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
  }
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8008366:	b480      	push	{r7}
 8008368:	b085      	sub	sp, #20
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008376:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d002      	beq.n	8008384 <HAL_CAN_DeactivateNotification+0x1e>
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	2b02      	cmp	r3, #2
 8008382:	d10a      	bne.n	800839a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6959      	ldr	r1, [r3, #20]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	43da      	mvns	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	400a      	ands	r2, r1
 8008394:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	e006      	b.n	80083a8 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
  }
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08a      	sub	sp, #40	; 0x28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80083bc:	2300      	movs	r3, #0
 80083be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d07c      	beq.n	80084f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	d023      	beq.n	800844c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2201      	movs	r2, #1
 800840a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f983 	bl	8008722 <HAL_CAN_TxMailbox0CompleteCallback>
 800841c:	e016      	b.n	800844c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d004      	beq.n	8008432 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
 8008430:	e00c      	b.n	800844c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
 8008444:	e002      	b.n	800844c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f989 	bl	800875e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008452:	2b00      	cmp	r3, #0
 8008454:	d024      	beq.n	80084a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800845e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f963 	bl	8008736 <HAL_CAN_TxMailbox1CompleteCallback>
 8008470:	e016      	b.n	80084a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
 8008484:	e00c      	b.n	80084a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
 8008498:	e002      	b.n	80084a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f969 	bl	8008772 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d024      	beq.n	80084f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80084b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f943 	bl	800874a <HAL_CAN_TxMailbox2CompleteCallback>
 80084c4:	e016      	b.n	80084f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24
 80084d8:	e00c      	b.n	80084f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
 80084ec:	e002      	b.n	80084f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f949 	bl	8008786 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	f003 0308 	and.w	r3, r3, #8
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00c      	beq.n	8008518 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800850e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2210      	movs	r2, #16
 8008516:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00b      	beq.n	800853a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f003 0308 	and.w	r3, r3, #8
 8008528:	2b00      	cmp	r3, #0
 800852a:	d006      	beq.n	800853a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2208      	movs	r2, #8
 8008532:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f930 	bl	800879a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d009      	beq.n	8008558 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7f8 fd44 	bl	8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00c      	beq.n	800857c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	2b00      	cmp	r3, #0
 800856a:	d007      	beq.n	800857c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008572:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2210      	movs	r2, #16
 800857a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00b      	beq.n	800859e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	2b00      	cmp	r3, #0
 800858e:	d006      	beq.n	800859e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2208      	movs	r2, #8
 8008596:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f908 	bl	80087ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	f003 0310 	and.w	r3, r3, #16
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d009      	beq.n	80085bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7f8 fd1d 	bl	8000ff6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00b      	beq.n	80085de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d006      	beq.n	80085de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2210      	movs	r2, #16
 80085d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f8f2 	bl	80087c2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d006      	beq.n	8008600 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2208      	movs	r2, #8
 80085f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f8eb 	bl	80087d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d07b      	beq.n	8008702 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d072      	beq.n	80086fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861a:	2b00      	cmp	r3, #0
 800861c:	d008      	beq.n	8008630 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008624:	2b00      	cmp	r3, #0
 8008626:	d003      	beq.n	8008630 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	f043 0301 	orr.w	r3, r3, #1
 800862e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008636:	2b00      	cmp	r3, #0
 8008638:	d008      	beq.n	800864c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	f043 0302 	orr.w	r3, r3, #2
 800864a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008652:	2b00      	cmp	r3, #0
 8008654:	d008      	beq.n	8008668 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	f043 0304 	orr.w	r3, r3, #4
 8008666:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800866e:	2b00      	cmp	r3, #0
 8008670:	d043      	beq.n	80086fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008678:	2b00      	cmp	r3, #0
 800867a:	d03e      	beq.n	80086fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008682:	2b60      	cmp	r3, #96	; 0x60
 8008684:	d02b      	beq.n	80086de <HAL_CAN_IRQHandler+0x32a>
 8008686:	2b60      	cmp	r3, #96	; 0x60
 8008688:	d82e      	bhi.n	80086e8 <HAL_CAN_IRQHandler+0x334>
 800868a:	2b50      	cmp	r3, #80	; 0x50
 800868c:	d022      	beq.n	80086d4 <HAL_CAN_IRQHandler+0x320>
 800868e:	2b50      	cmp	r3, #80	; 0x50
 8008690:	d82a      	bhi.n	80086e8 <HAL_CAN_IRQHandler+0x334>
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d019      	beq.n	80086ca <HAL_CAN_IRQHandler+0x316>
 8008696:	2b40      	cmp	r3, #64	; 0x40
 8008698:	d826      	bhi.n	80086e8 <HAL_CAN_IRQHandler+0x334>
 800869a:	2b30      	cmp	r3, #48	; 0x30
 800869c:	d010      	beq.n	80086c0 <HAL_CAN_IRQHandler+0x30c>
 800869e:	2b30      	cmp	r3, #48	; 0x30
 80086a0:	d822      	bhi.n	80086e8 <HAL_CAN_IRQHandler+0x334>
 80086a2:	2b10      	cmp	r3, #16
 80086a4:	d002      	beq.n	80086ac <HAL_CAN_IRQHandler+0x2f8>
 80086a6:	2b20      	cmp	r3, #32
 80086a8:	d005      	beq.n	80086b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80086aa:	e01d      	b.n	80086e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	f043 0308 	orr.w	r3, r3, #8
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086b4:	e019      	b.n	80086ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	f043 0310 	orr.w	r3, r3, #16
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086be:	e014      	b.n	80086ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	f043 0320 	orr.w	r3, r3, #32
 80086c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086c8:	e00f      	b.n	80086ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086d2:	e00a      	b.n	80086ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086dc:	e005      	b.n	80086ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086e6:	e000      	b.n	80086ea <HAL_CAN_IRQHandler+0x336>
            break;
 80086e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	699a      	ldr	r2, [r3, #24]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2204      	movs	r2, #4
 8008700:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	2b00      	cmp	r3, #0
 8008706:	d008      	beq.n	800871a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f868 	bl	80087ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800871a:	bf00      	nop
 800871c:	3728      	adds	r7, #40	; 0x28
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f003 0307 	and.w	r3, r3, #7
 800880e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008810:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <__NVIC_SetPriorityGrouping+0x44>)
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800881c:	4013      	ands	r3, r2
 800881e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800882c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008832:	4a04      	ldr	r2, [pc, #16]	; (8008844 <__NVIC_SetPriorityGrouping+0x44>)
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	60d3      	str	r3, [r2, #12]
}
 8008838:	bf00      	nop
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	e000ed00 	.word	0xe000ed00

08008848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800884c:	4b04      	ldr	r3, [pc, #16]	; (8008860 <__NVIC_GetPriorityGrouping+0x18>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	0a1b      	lsrs	r3, r3, #8
 8008852:	f003 0307 	and.w	r3, r3, #7
}
 8008856:	4618      	mov	r0, r3
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	e000ed00 	.word	0xe000ed00

08008864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800886e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008872:	2b00      	cmp	r3, #0
 8008874:	db0b      	blt.n	800888e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	f003 021f 	and.w	r2, r3, #31
 800887c:	4907      	ldr	r1, [pc, #28]	; (800889c <__NVIC_EnableIRQ+0x38>)
 800887e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008882:	095b      	lsrs	r3, r3, #5
 8008884:	2001      	movs	r0, #1
 8008886:	fa00 f202 	lsl.w	r2, r0, r2
 800888a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	e000e100 	.word	0xe000e100

080088a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	6039      	str	r1, [r7, #0]
 80088aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db0a      	blt.n	80088ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	490c      	ldr	r1, [pc, #48]	; (80088ec <__NVIC_SetPriority+0x4c>)
 80088ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088be:	0112      	lsls	r2, r2, #4
 80088c0:	b2d2      	uxtb	r2, r2
 80088c2:	440b      	add	r3, r1
 80088c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80088c8:	e00a      	b.n	80088e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	4908      	ldr	r1, [pc, #32]	; (80088f0 <__NVIC_SetPriority+0x50>)
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	f003 030f 	and.w	r3, r3, #15
 80088d6:	3b04      	subs	r3, #4
 80088d8:	0112      	lsls	r2, r2, #4
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	440b      	add	r3, r1
 80088de:	761a      	strb	r2, [r3, #24]
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	e000e100 	.word	0xe000e100
 80088f0:	e000ed00 	.word	0xe000ed00

080088f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b089      	sub	sp, #36	; 0x24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	f1c3 0307 	rsb	r3, r3, #7
 800890e:	2b04      	cmp	r3, #4
 8008910:	bf28      	it	cs
 8008912:	2304      	movcs	r3, #4
 8008914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	3304      	adds	r3, #4
 800891a:	2b06      	cmp	r3, #6
 800891c:	d902      	bls.n	8008924 <NVIC_EncodePriority+0x30>
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	3b03      	subs	r3, #3
 8008922:	e000      	b.n	8008926 <NVIC_EncodePriority+0x32>
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008928:	f04f 32ff 	mov.w	r2, #4294967295
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	fa02 f303 	lsl.w	r3, r2, r3
 8008932:	43da      	mvns	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	401a      	ands	r2, r3
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800893c:	f04f 31ff 	mov.w	r1, #4294967295
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	fa01 f303 	lsl.w	r3, r1, r3
 8008946:	43d9      	mvns	r1, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800894c:	4313      	orrs	r3, r2
         );
}
 800894e:	4618      	mov	r0, r3
 8008950:	3724      	adds	r7, #36	; 0x24
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff ff4c 	bl	8008800 <__NVIC_SetPriorityGrouping>
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008982:	f7ff ff61 	bl	8008848 <__NVIC_GetPriorityGrouping>
 8008986:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68b9      	ldr	r1, [r7, #8]
 800898c:	6978      	ldr	r0, [r7, #20]
 800898e:	f7ff ffb1 	bl	80088f4 <NVIC_EncodePriority>
 8008992:	4602      	mov	r2, r0
 8008994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008998:	4611      	mov	r1, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f7ff ff80 	bl	80088a0 <__NVIC_SetPriority>
}
 80089a0:	bf00      	nop
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	4603      	mov	r3, r0
 80089b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80089b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff ff54 	bl	8008864 <__NVIC_EnableIRQ>
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80089d0:	f7ff f866 	bl	8007aa0 <HAL_GetTick>
 80089d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e099      	b.n	8008b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0201 	bic.w	r2, r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a00:	e00f      	b.n	8008a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008a02:	f7ff f84d 	bl	8007aa0 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b05      	cmp	r3, #5
 8008a0e:	d908      	bls.n	8008a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2220      	movs	r2, #32
 8008a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2203      	movs	r2, #3
 8008a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e078      	b.n	8008b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e8      	bne.n	8008a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	4b38      	ldr	r3, [pc, #224]	; (8008b1c <HAL_DMA_Init+0x158>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d107      	bne.n	8008a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a84:	4313      	orrs	r3, r2
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f023 0307 	bic.w	r3, r3, #7
 8008aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	d117      	bne.n	8008ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00e      	beq.n	8008ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fb01 	bl	80090d0 <DMA_CheckFifoParam>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2240      	movs	r2, #64	; 0x40
 8008ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e016      	b.n	8008b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fab8 	bl	8009064 <DMA_CalcBaseAndBitshift>
 8008af4:	4603      	mov	r3, r0
 8008af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008afc:	223f      	movs	r2, #63	; 0x3f
 8008afe:	409a      	lsls	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	f010803f 	.word	0xf010803f

08008b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d101      	bne.n	8008b46 <HAL_DMA_Start_IT+0x26>
 8008b42:	2302      	movs	r3, #2
 8008b44:	e040      	b.n	8008bc8 <HAL_DMA_Start_IT+0xa8>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d12f      	bne.n	8008bba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	68b9      	ldr	r1, [r7, #8]
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 fa4a 	bl	8009008 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b78:	223f      	movs	r2, #63	; 0x3f
 8008b7a:	409a      	lsls	r2, r3
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f042 0216 	orr.w	r2, r2, #22
 8008b8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f042 0208 	orr.w	r2, r2, #8
 8008ba6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0201 	orr.w	r2, r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	e005      	b.n	8008bc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008bde:	f7fe ff5f 	bl	8007aa0 <HAL_GetTick>
 8008be2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d008      	beq.n	8008c02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2280      	movs	r2, #128	; 0x80
 8008bf4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e052      	b.n	8008ca8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0216 	bic.w	r2, r2, #22
 8008c10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	695a      	ldr	r2, [r3, #20]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d103      	bne.n	8008c32 <HAL_DMA_Abort+0x62>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d007      	beq.n	8008c42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0208 	bic.w	r2, r2, #8
 8008c40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0201 	bic.w	r2, r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c52:	e013      	b.n	8008c7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c54:	f7fe ff24 	bl	8007aa0 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d90c      	bls.n	8008c7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2220      	movs	r2, #32
 8008c66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2203      	movs	r2, #3
 8008c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e015      	b.n	8008ca8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e4      	bne.n	8008c54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c8e:	223f      	movs	r2, #63	; 0x3f
 8008c90:	409a      	lsls	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d004      	beq.n	8008cce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2280      	movs	r2, #128	; 0x80
 8008cc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e00c      	b.n	8008ce8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2205      	movs	r2, #5
 8008cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0201 	bic.w	r2, r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d00:	4b8e      	ldr	r3, [pc, #568]	; (8008f3c <HAL_DMA_IRQHandler+0x248>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a8e      	ldr	r2, [pc, #568]	; (8008f40 <HAL_DMA_IRQHandler+0x24c>)
 8008d06:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0a:	0a9b      	lsrs	r3, r3, #10
 8008d0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d1e:	2208      	movs	r2, #8
 8008d20:	409a      	lsls	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4013      	ands	r3, r2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d01a      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d013      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 0204 	bic.w	r2, r2, #4
 8008d46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4c:	2208      	movs	r2, #8
 8008d4e:	409a      	lsls	r2, r3
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d58:	f043 0201 	orr.w	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d64:	2201      	movs	r2, #1
 8008d66:	409a      	lsls	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d012      	beq.n	8008d96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d82:	2201      	movs	r2, #1
 8008d84:	409a      	lsls	r2, r3
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8e:	f043 0202 	orr.w	r2, r3, #2
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d9a:	2204      	movs	r2, #4
 8008d9c:	409a      	lsls	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4013      	ands	r3, r2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d012      	beq.n	8008dcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db8:	2204      	movs	r2, #4
 8008dba:	409a      	lsls	r2, r3
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc4:	f043 0204 	orr.w	r2, r3, #4
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd0:	2210      	movs	r2, #16
 8008dd2:	409a      	lsls	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d043      	beq.n	8008e64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d03c      	beq.n	8008e64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dee:	2210      	movs	r2, #16
 8008df0:	409a      	lsls	r2, r3
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d018      	beq.n	8008e36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d108      	bne.n	8008e24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d024      	beq.n	8008e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	4798      	blx	r3
 8008e22:	e01f      	b.n	8008e64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01b      	beq.n	8008e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	4798      	blx	r3
 8008e34:	e016      	b.n	8008e64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d107      	bne.n	8008e54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 0208 	bic.w	r2, r2, #8
 8008e52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e68:	2220      	movs	r2, #32
 8008e6a:	409a      	lsls	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 808f 	beq.w	8008f94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 8087 	beq.w	8008f94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	409a      	lsls	r2, r3
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b05      	cmp	r3, #5
 8008e9c:	d136      	bne.n	8008f0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0216 	bic.w	r2, r2, #22
 8008eac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	695a      	ldr	r2, [r3, #20]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ebc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d103      	bne.n	8008ece <HAL_DMA_IRQHandler+0x1da>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d007      	beq.n	8008ede <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0208 	bic.w	r2, r2, #8
 8008edc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee2:	223f      	movs	r2, #63	; 0x3f
 8008ee4:	409a      	lsls	r2, r3
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d07e      	beq.n	8009000 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	4798      	blx	r3
        }
        return;
 8008f0a:	e079      	b.n	8009000 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d01d      	beq.n	8008f56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10d      	bne.n	8008f44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d031      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3
 8008f38:	e02c      	b.n	8008f94 <HAL_DMA_IRQHandler+0x2a0>
 8008f3a:	bf00      	nop
 8008f3c:	20000000 	.word	0x20000000
 8008f40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d023      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	4798      	blx	r3
 8008f54:	e01e      	b.n	8008f94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10f      	bne.n	8008f84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0210 	bic.w	r2, r2, #16
 8008f72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d032      	beq.n	8009002 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d022      	beq.n	8008fee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2205      	movs	r2, #5
 8008fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0201 	bic.w	r2, r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	60bb      	str	r3, [r7, #8]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d307      	bcc.n	8008fdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1f2      	bne.n	8008fc0 <HAL_DMA_IRQHandler+0x2cc>
 8008fda:	e000      	b.n	8008fde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008fdc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	4798      	blx	r3
 8008ffe:	e000      	b.n	8009002 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009000:	bf00      	nop
    }
  }
}
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009024:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	2b40      	cmp	r3, #64	; 0x40
 8009034:	d108      	bne.n	8009048 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009046:	e007      	b.n	8009058 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	60da      	str	r2, [r3, #12]
}
 8009058:	bf00      	nop
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	3b10      	subs	r3, #16
 8009074:	4a14      	ldr	r2, [pc, #80]	; (80090c8 <DMA_CalcBaseAndBitshift+0x64>)
 8009076:	fba2 2303 	umull	r2, r3, r2, r3
 800907a:	091b      	lsrs	r3, r3, #4
 800907c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800907e:	4a13      	ldr	r2, [pc, #76]	; (80090cc <DMA_CalcBaseAndBitshift+0x68>)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4413      	add	r3, r2
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b03      	cmp	r3, #3
 8009090:	d909      	bls.n	80090a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800909a:	f023 0303 	bic.w	r3, r3, #3
 800909e:	1d1a      	adds	r2, r3, #4
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	659a      	str	r2, [r3, #88]	; 0x58
 80090a4:	e007      	b.n	80090b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80090ae:	f023 0303 	bic.w	r3, r3, #3
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	aaaaaaab 	.word	0xaaaaaaab
 80090cc:	08017784 	.word	0x08017784

080090d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d11f      	bne.n	800912a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d856      	bhi.n	800919e <DMA_CheckFifoParam+0xce>
 80090f0:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <DMA_CheckFifoParam+0x28>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	08009109 	.word	0x08009109
 80090fc:	0800911b 	.word	0x0800911b
 8009100:	08009109 	.word	0x08009109
 8009104:	0800919f 	.word	0x0800919f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d046      	beq.n	80091a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009118:	e043      	b.n	80091a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009122:	d140      	bne.n	80091a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009128:	e03d      	b.n	80091a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009132:	d121      	bne.n	8009178 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b03      	cmp	r3, #3
 8009138:	d837      	bhi.n	80091aa <DMA_CheckFifoParam+0xda>
 800913a:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <DMA_CheckFifoParam+0x70>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	08009151 	.word	0x08009151
 8009144:	08009157 	.word	0x08009157
 8009148:	08009151 	.word	0x08009151
 800914c:	08009169 	.word	0x08009169
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]
      break;
 8009154:	e030      	b.n	80091b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d025      	beq.n	80091ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009166:	e022      	b.n	80091ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009170:	d11f      	bne.n	80091b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009176:	e01c      	b.n	80091b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d903      	bls.n	8009186 <DMA_CheckFifoParam+0xb6>
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b03      	cmp	r3, #3
 8009182:	d003      	beq.n	800918c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009184:	e018      	b.n	80091b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	73fb      	strb	r3, [r7, #15]
      break;
 800918a:	e015      	b.n	80091b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00e      	beq.n	80091b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	73fb      	strb	r3, [r7, #15]
      break;
 800919c:	e00b      	b.n	80091b6 <DMA_CheckFifoParam+0xe6>
      break;
 800919e:	bf00      	nop
 80091a0:	e00a      	b.n	80091b8 <DMA_CheckFifoParam+0xe8>
      break;
 80091a2:	bf00      	nop
 80091a4:	e008      	b.n	80091b8 <DMA_CheckFifoParam+0xe8>
      break;
 80091a6:	bf00      	nop
 80091a8:	e006      	b.n	80091b8 <DMA_CheckFifoParam+0xe8>
      break;
 80091aa:	bf00      	nop
 80091ac:	e004      	b.n	80091b8 <DMA_CheckFifoParam+0xe8>
      break;
 80091ae:	bf00      	nop
 80091b0:	e002      	b.n	80091b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80091b2:	bf00      	nop
 80091b4:	e000      	b.n	80091b8 <DMA_CheckFifoParam+0xe8>
      break;
 80091b6:	bf00      	nop
    }
  } 
  
  return status; 
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop

080091c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b089      	sub	sp, #36	; 0x24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80091da:	2300      	movs	r3, #0
 80091dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
 80091e2:	e177      	b.n	80094d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80091e4:	2201      	movs	r2, #1
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4013      	ands	r3, r2
 80091f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	f040 8166 	bne.w	80094ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	2b01      	cmp	r3, #1
 800920c:	d005      	beq.n	800921a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009216:	2b02      	cmp	r3, #2
 8009218:	d130      	bne.n	800927c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	2203      	movs	r2, #3
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	43db      	mvns	r3, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4013      	ands	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	fa02 f303 	lsl.w	r3, r2, r3
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	4313      	orrs	r3, r2
 8009242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009250:	2201      	movs	r2, #1
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	43db      	mvns	r3, r3
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	4013      	ands	r3, r2
 800925e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	091b      	lsrs	r3, r3, #4
 8009266:	f003 0201 	and.w	r2, r3, #1
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	fa02 f303 	lsl.w	r3, r2, r3
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	4313      	orrs	r3, r2
 8009274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f003 0303 	and.w	r3, r3, #3
 8009284:	2b03      	cmp	r3, #3
 8009286:	d017      	beq.n	80092b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	2203      	movs	r2, #3
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	43db      	mvns	r3, r3
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	4013      	ands	r3, r2
 800929e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d123      	bne.n	800930c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	08da      	lsrs	r2, r3, #3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3208      	adds	r2, #8
 80092cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	f003 0307 	and.w	r3, r3, #7
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	220f      	movs	r2, #15
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	43db      	mvns	r3, r3
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	4013      	ands	r3, r2
 80092e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	fa02 f303 	lsl.w	r3, r2, r3
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	08da      	lsrs	r2, r3, #3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3208      	adds	r2, #8
 8009306:	69b9      	ldr	r1, [r7, #24]
 8009308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	2203      	movs	r2, #3
 8009318:	fa02 f303 	lsl.w	r3, r2, r3
 800931c:	43db      	mvns	r3, r3
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	4013      	ands	r3, r2
 8009322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f003 0203 	and.w	r2, r3, #3
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	4313      	orrs	r3, r2
 8009338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 80c0 	beq.w	80094ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	4b66      	ldr	r3, [pc, #408]	; (80094ec <HAL_GPIO_Init+0x324>)
 8009354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009356:	4a65      	ldr	r2, [pc, #404]	; (80094ec <HAL_GPIO_Init+0x324>)
 8009358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800935c:	6453      	str	r3, [r2, #68]	; 0x44
 800935e:	4b63      	ldr	r3, [pc, #396]	; (80094ec <HAL_GPIO_Init+0x324>)
 8009360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800936a:	4a61      	ldr	r2, [pc, #388]	; (80094f0 <HAL_GPIO_Init+0x328>)
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	089b      	lsrs	r3, r3, #2
 8009370:	3302      	adds	r3, #2
 8009372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	220f      	movs	r2, #15
 8009382:	fa02 f303 	lsl.w	r3, r2, r3
 8009386:	43db      	mvns	r3, r3
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	4013      	ands	r3, r2
 800938c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a58      	ldr	r2, [pc, #352]	; (80094f4 <HAL_GPIO_Init+0x32c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d037      	beq.n	8009406 <HAL_GPIO_Init+0x23e>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a57      	ldr	r2, [pc, #348]	; (80094f8 <HAL_GPIO_Init+0x330>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d031      	beq.n	8009402 <HAL_GPIO_Init+0x23a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a56      	ldr	r2, [pc, #344]	; (80094fc <HAL_GPIO_Init+0x334>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d02b      	beq.n	80093fe <HAL_GPIO_Init+0x236>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a55      	ldr	r2, [pc, #340]	; (8009500 <HAL_GPIO_Init+0x338>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d025      	beq.n	80093fa <HAL_GPIO_Init+0x232>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a54      	ldr	r2, [pc, #336]	; (8009504 <HAL_GPIO_Init+0x33c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d01f      	beq.n	80093f6 <HAL_GPIO_Init+0x22e>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a53      	ldr	r2, [pc, #332]	; (8009508 <HAL_GPIO_Init+0x340>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d019      	beq.n	80093f2 <HAL_GPIO_Init+0x22a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a52      	ldr	r2, [pc, #328]	; (800950c <HAL_GPIO_Init+0x344>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d013      	beq.n	80093ee <HAL_GPIO_Init+0x226>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a51      	ldr	r2, [pc, #324]	; (8009510 <HAL_GPIO_Init+0x348>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00d      	beq.n	80093ea <HAL_GPIO_Init+0x222>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a50      	ldr	r2, [pc, #320]	; (8009514 <HAL_GPIO_Init+0x34c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d007      	beq.n	80093e6 <HAL_GPIO_Init+0x21e>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a4f      	ldr	r2, [pc, #316]	; (8009518 <HAL_GPIO_Init+0x350>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d101      	bne.n	80093e2 <HAL_GPIO_Init+0x21a>
 80093de:	2309      	movs	r3, #9
 80093e0:	e012      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093e2:	230a      	movs	r3, #10
 80093e4:	e010      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093e6:	2308      	movs	r3, #8
 80093e8:	e00e      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093ea:	2307      	movs	r3, #7
 80093ec:	e00c      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093ee:	2306      	movs	r3, #6
 80093f0:	e00a      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093f2:	2305      	movs	r3, #5
 80093f4:	e008      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093f6:	2304      	movs	r3, #4
 80093f8:	e006      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093fa:	2303      	movs	r3, #3
 80093fc:	e004      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093fe:	2302      	movs	r3, #2
 8009400:	e002      	b.n	8009408 <HAL_GPIO_Init+0x240>
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <HAL_GPIO_Init+0x240>
 8009406:	2300      	movs	r3, #0
 8009408:	69fa      	ldr	r2, [r7, #28]
 800940a:	f002 0203 	and.w	r2, r2, #3
 800940e:	0092      	lsls	r2, r2, #2
 8009410:	4093      	lsls	r3, r2
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	4313      	orrs	r3, r2
 8009416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009418:	4935      	ldr	r1, [pc, #212]	; (80094f0 <HAL_GPIO_Init+0x328>)
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	089b      	lsrs	r3, r3, #2
 800941e:	3302      	adds	r3, #2
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009426:	4b3d      	ldr	r3, [pc, #244]	; (800951c <HAL_GPIO_Init+0x354>)
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	43db      	mvns	r3, r3
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	4013      	ands	r3, r2
 8009434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	4313      	orrs	r3, r2
 8009448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800944a:	4a34      	ldr	r2, [pc, #208]	; (800951c <HAL_GPIO_Init+0x354>)
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009450:	4b32      	ldr	r3, [pc, #200]	; (800951c <HAL_GPIO_Init+0x354>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	43db      	mvns	r3, r3
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	4013      	ands	r3, r2
 800945e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4313      	orrs	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009474:	4a29      	ldr	r2, [pc, #164]	; (800951c <HAL_GPIO_Init+0x354>)
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800947a:	4b28      	ldr	r3, [pc, #160]	; (800951c <HAL_GPIO_Init+0x354>)
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	43db      	mvns	r3, r3
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	4013      	ands	r3, r2
 8009488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800949e:	4a1f      	ldr	r2, [pc, #124]	; (800951c <HAL_GPIO_Init+0x354>)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80094a4:	4b1d      	ldr	r3, [pc, #116]	; (800951c <HAL_GPIO_Init+0x354>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	43db      	mvns	r3, r3
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	4013      	ands	r3, r2
 80094b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80094c8:	4a14      	ldr	r2, [pc, #80]	; (800951c <HAL_GPIO_Init+0x354>)
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	3301      	adds	r3, #1
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2b0f      	cmp	r3, #15
 80094d8:	f67f ae84 	bls.w	80091e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	3724      	adds	r7, #36	; 0x24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	40023800 	.word	0x40023800
 80094f0:	40013800 	.word	0x40013800
 80094f4:	40020000 	.word	0x40020000
 80094f8:	40020400 	.word	0x40020400
 80094fc:	40020800 	.word	0x40020800
 8009500:	40020c00 	.word	0x40020c00
 8009504:	40021000 	.word	0x40021000
 8009508:	40021400 	.word	0x40021400
 800950c:	40021800 	.word	0x40021800
 8009510:	40021c00 	.word	0x40021c00
 8009514:	40022000 	.word	0x40022000
 8009518:	40022400 	.word	0x40022400
 800951c:	40013c00 	.word	0x40013c00

08009520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	807b      	strh	r3, [r7, #2]
 800952c:	4613      	mov	r3, r2
 800952e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009530:	787b      	ldrb	r3, [r7, #1]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009536:	887a      	ldrh	r2, [r7, #2]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800953c:	e003      	b.n	8009546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800953e:	887b      	ldrh	r3, [r7, #2]
 8009540:	041a      	lsls	r2, r3, #16
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	619a      	str	r2, [r3, #24]
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
	...

08009554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800955e:	4b08      	ldr	r3, [pc, #32]	; (8009580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009560:	695a      	ldr	r2, [r3, #20]
 8009562:	88fb      	ldrh	r3, [r7, #6]
 8009564:	4013      	ands	r3, r2
 8009566:	2b00      	cmp	r3, #0
 8009568:	d006      	beq.n	8009578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800956a:	4a05      	ldr	r2, [pc, #20]	; (8009580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800956c:	88fb      	ldrh	r3, [r7, #6]
 800956e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009570:	88fb      	ldrh	r3, [r7, #6]
 8009572:	4618      	mov	r0, r3
 8009574:	f7f8 fa46 	bl	8001a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	40013c00 	.word	0x40013c00

08009584 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009586:	b08f      	sub	sp, #60	; 0x3c
 8009588:	af0a      	add	r7, sp, #40	; 0x28
 800958a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e10f      	b.n	80097b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d106      	bne.n	80095b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f00b fcd3 	bl	8014f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2203      	movs	r2, #3
 80095ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f004 fe1a 	bl	800e20e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	603b      	str	r3, [r7, #0]
 80095e0:	687e      	ldr	r6, [r7, #4]
 80095e2:	466d      	mov	r5, sp
 80095e4:	f106 0410 	add.w	r4, r6, #16
 80095e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80095f8:	1d33      	adds	r3, r6, #4
 80095fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095fc:	6838      	ldr	r0, [r7, #0]
 80095fe:	f004 fcf1 	bl	800dfe4 <USB_CoreInit>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e0d0      	b.n	80097b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2100      	movs	r1, #0
 800961a:	4618      	mov	r0, r3
 800961c:	f004 fe08 	bl	800e230 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
 8009624:	e04a      	b.n	80096bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009626:	7bfa      	ldrb	r2, [r7, #15]
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	4613      	mov	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	333d      	adds	r3, #61	; 0x3d
 8009636:	2201      	movs	r2, #1
 8009638:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800963a:	7bfa      	ldrb	r2, [r7, #15]
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	4613      	mov	r3, r2
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	4413      	add	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	440b      	add	r3, r1
 8009648:	333c      	adds	r3, #60	; 0x3c
 800964a:	7bfa      	ldrb	r2, [r7, #15]
 800964c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800964e:	7bfa      	ldrb	r2, [r7, #15]
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	b298      	uxth	r0, r3
 8009654:	6879      	ldr	r1, [r7, #4]
 8009656:	4613      	mov	r3, r2
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	440b      	add	r3, r1
 8009660:	3344      	adds	r3, #68	; 0x44
 8009662:	4602      	mov	r2, r0
 8009664:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009666:	7bfa      	ldrb	r2, [r7, #15]
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	4613      	mov	r3, r2
 800966c:	00db      	lsls	r3, r3, #3
 800966e:	4413      	add	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	440b      	add	r3, r1
 8009674:	3340      	adds	r3, #64	; 0x40
 8009676:	2200      	movs	r2, #0
 8009678:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800967a:	7bfa      	ldrb	r2, [r7, #15]
 800967c:	6879      	ldr	r1, [r7, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	440b      	add	r3, r1
 8009688:	3348      	adds	r3, #72	; 0x48
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800968e:	7bfa      	ldrb	r2, [r7, #15]
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	334c      	adds	r3, #76	; 0x4c
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80096a2:	7bfa      	ldrb	r2, [r7, #15]
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	4613      	mov	r3, r2
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	4413      	add	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	440b      	add	r3, r1
 80096b0:	3354      	adds	r3, #84	; 0x54
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	3301      	adds	r3, #1
 80096ba:	73fb      	strb	r3, [r7, #15]
 80096bc:	7bfa      	ldrb	r2, [r7, #15]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d3af      	bcc.n	8009626 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
 80096ca:	e044      	b.n	8009756 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80096cc:	7bfa      	ldrb	r2, [r7, #15]
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4613      	mov	r3, r2
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	440b      	add	r3, r1
 80096da:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80096de:	2200      	movs	r2, #0
 80096e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80096e2:	7bfa      	ldrb	r2, [r7, #15]
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	4613      	mov	r3, r2
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	440b      	add	r3, r1
 80096f0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80096f4:	7bfa      	ldrb	r2, [r7, #15]
 80096f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096f8:	7bfa      	ldrb	r2, [r7, #15]
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	4613      	mov	r3, r2
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	440b      	add	r3, r1
 8009706:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800970e:	7bfa      	ldrb	r2, [r7, #15]
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	4613      	mov	r3, r2
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	440b      	add	r3, r1
 800971c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009720:	2200      	movs	r2, #0
 8009722:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009724:	7bfa      	ldrb	r2, [r7, #15]
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4613      	mov	r3, r2
 800972a:	00db      	lsls	r3, r3, #3
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	440b      	add	r3, r1
 8009732:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009736:	2200      	movs	r2, #0
 8009738:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800973a:	7bfa      	ldrb	r2, [r7, #15]
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	00db      	lsls	r3, r3, #3
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	440b      	add	r3, r1
 8009748:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800974c:	2200      	movs	r2, #0
 800974e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	3301      	adds	r3, #1
 8009754:	73fb      	strb	r3, [r7, #15]
 8009756:	7bfa      	ldrb	r2, [r7, #15]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	d3b5      	bcc.n	80096cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	603b      	str	r3, [r7, #0]
 8009766:	687e      	ldr	r6, [r7, #4]
 8009768:	466d      	mov	r5, sp
 800976a:	f106 0410 	add.w	r4, r6, #16
 800976e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800977a:	e885 0003 	stmia.w	r5, {r0, r1}
 800977e:	1d33      	adds	r3, r6, #4
 8009780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009782:	6838      	ldr	r0, [r7, #0]
 8009784:	f004 fda0 	bl	800e2c8 <USB_DevInit>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2202      	movs	r2, #2
 8009792:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e00d      	b.n	80097b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f005 feef 	bl	800f592 <USB_DevDisconnect>

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_PCD_Start+0x1c>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e020      	b.n	800981c <HAL_PCD_Start+0x5e>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d109      	bne.n	80097fe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d005      	beq.n	80097fe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f004 fcf2 	bl	800e1ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4618      	mov	r0, r3
 800980e:	f005 fe9f 	bl	800f550 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009824:	b590      	push	{r4, r7, lr}
 8009826:	b08d      	sub	sp, #52	; 0x34
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4618      	mov	r0, r3
 800983c:	f005 ff5d 	bl	800f6fa <USB_GetMode>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	f040 848a 	bne.w	800a15c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4618      	mov	r0, r3
 800984e:	f005 fec1 	bl	800f5d4 <USB_ReadInterrupts>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 8480 	beq.w	800a15a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	0a1b      	lsrs	r3, r3, #8
 8009864:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f005 feae 	bl	800f5d4 <USB_ReadInterrupts>
 8009878:	4603      	mov	r3, r0
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b02      	cmp	r3, #2
 8009880:	d107      	bne.n	8009892 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	695a      	ldr	r2, [r3, #20]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f002 0202 	and.w	r2, r2, #2
 8009890:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4618      	mov	r0, r3
 8009898:	f005 fe9c 	bl	800f5d4 <USB_ReadInterrupts>
 800989c:	4603      	mov	r3, r0
 800989e:	f003 0310 	and.w	r3, r3, #16
 80098a2:	2b10      	cmp	r3, #16
 80098a4:	d161      	bne.n	800996a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	699a      	ldr	r2, [r3, #24]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0210 	bic.w	r2, r2, #16
 80098b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	f003 020f 	and.w	r2, r3, #15
 80098c2:	4613      	mov	r3, r2
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	4413      	add	r3, r2
 80098d2:	3304      	adds	r3, #4
 80098d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	0c5b      	lsrs	r3, r3, #17
 80098da:	f003 030f 	and.w	r3, r3, #15
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d124      	bne.n	800992c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80098e8:	4013      	ands	r3, r2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d035      	beq.n	800995a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	091b      	lsrs	r3, r3, #4
 80098f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	6a38      	ldr	r0, [r7, #32]
 8009902:	f005 fcd3 	bl	800f2ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	691a      	ldr	r2, [r3, #16]
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	091b      	lsrs	r3, r3, #4
 800990e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009912:	441a      	add	r2, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	6a1a      	ldr	r2, [r3, #32]
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	091b      	lsrs	r3, r3, #4
 8009920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009924:	441a      	add	r2, r3
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	621a      	str	r2, [r3, #32]
 800992a:	e016      	b.n	800995a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	0c5b      	lsrs	r3, r3, #17
 8009930:	f003 030f 	and.w	r3, r3, #15
 8009934:	2b06      	cmp	r3, #6
 8009936:	d110      	bne.n	800995a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800993e:	2208      	movs	r2, #8
 8009940:	4619      	mov	r1, r3
 8009942:	6a38      	ldr	r0, [r7, #32]
 8009944:	f005 fcb2 	bl	800f2ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	6a1a      	ldr	r2, [r3, #32]
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	091b      	lsrs	r3, r3, #4
 8009950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009954:	441a      	add	r2, r3
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	699a      	ldr	r2, [r3, #24]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f042 0210 	orr.w	r2, r2, #16
 8009968:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4618      	mov	r0, r3
 8009970:	f005 fe30 	bl	800f5d4 <USB_ReadInterrupts>
 8009974:	4603      	mov	r3, r0
 8009976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800997a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800997e:	f040 80a7 	bne.w	8009ad0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009982:	2300      	movs	r3, #0
 8009984:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f005 fe35 	bl	800f5fa <USB_ReadDevAllOutEpInterrupt>
 8009990:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009992:	e099      	b.n	8009ac8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 808e 	beq.w	8009abc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a6:	b2d2      	uxtb	r2, r2
 80099a8:	4611      	mov	r1, r2
 80099aa:	4618      	mov	r0, r3
 80099ac:	f005 fe59 	bl	800f662 <USB_ReadDevOutEPInterrupt>
 80099b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00c      	beq.n	80099d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c8:	461a      	mov	r2, r3
 80099ca:	2301      	movs	r3, #1
 80099cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80099ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fec3 	bl	800a75c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00c      	beq.n	80099fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ec:	461a      	mov	r2, r3
 80099ee:	2308      	movs	r3, #8
 80099f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80099f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 ff99 	bl	800a92c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f003 0310 	and.w	r3, r3, #16
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d008      	beq.n	8009a16 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a10:	461a      	mov	r2, r3
 8009a12:	2310      	movs	r3, #16
 8009a14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d030      	beq.n	8009a82 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009a20:	6a3b      	ldr	r3, [r7, #32]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a28:	2b80      	cmp	r3, #128	; 0x80
 8009a2a:	d109      	bne.n	8009a40 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a3e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a42:	4613      	mov	r3, r2
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	3304      	adds	r3, #4
 8009a54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	78db      	ldrb	r3, [r3, #3]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d108      	bne.n	8009a70 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2200      	movs	r2, #0
 8009a62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f00b fb7c 	bl	8015168 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	2302      	movs	r3, #2
 8009a80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f003 0320 	and.w	r3, r3, #32
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d008      	beq.n	8009a9e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a98:	461a      	mov	r2, r3
 8009a9a:	2320      	movs	r3, #32
 8009a9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d009      	beq.n	8009abc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009aba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	3301      	adds	r3, #1
 8009ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	085b      	lsrs	r3, r3, #1
 8009ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f47f af62 	bne.w	8009994 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f005 fd7d 	bl	800f5d4 <USB_ReadInterrupts>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ae4:	f040 80db 	bne.w	8009c9e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f005 fd9e 	bl	800f62e <USB_ReadDevAllInEpInterrupt>
 8009af2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009af8:	e0cd      	b.n	8009c96 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 80c2 	beq.w	8009c8a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0c:	b2d2      	uxtb	r2, r2
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f005 fdc4 	bl	800f69e <USB_ReadDevInEPInterrupt>
 8009b16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d057      	beq.n	8009bd2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	f003 030f 	and.w	r3, r3, #15
 8009b28:	2201      	movs	r2, #1
 8009b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	69f9      	ldr	r1, [r7, #28]
 8009b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b42:	4013      	ands	r3, r2
 8009b44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b52:	461a      	mov	r2, r3
 8009b54:	2301      	movs	r3, #1
 8009b56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d132      	bne.n	8009bc6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b64:	4613      	mov	r3, r2
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	440b      	add	r3, r1
 8009b6e:	334c      	adds	r3, #76	; 0x4c
 8009b70:	6819      	ldr	r1, [r3, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b76:	4613      	mov	r3, r2
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4403      	add	r3, r0
 8009b80:	3348      	adds	r3, #72	; 0x48
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4419      	add	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	4413      	add	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4403      	add	r3, r0
 8009b94:	334c      	adds	r3, #76	; 0x4c
 8009b96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d113      	bne.n	8009bc6 <HAL_PCD_IRQHandler+0x3a2>
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	3354      	adds	r3, #84	; 0x54
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d108      	bne.n	8009bc6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6818      	ldr	r0, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	f005 fdcb 	bl	800f75c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f00b fa46 	bl	801505e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d008      	beq.n	8009bee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be8:	461a      	mov	r2, r3
 8009bea:	2308      	movs	r3, #8
 8009bec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f003 0310 	and.w	r3, r3, #16
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d008      	beq.n	8009c0a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c04:	461a      	mov	r2, r3
 8009c06:	2310      	movs	r3, #16
 8009c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d008      	beq.n	8009c26 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c20:	461a      	mov	r2, r3
 8009c22:	2340      	movs	r3, #64	; 0x40
 8009c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d023      	beq.n	8009c78 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c32:	6a38      	ldr	r0, [r7, #32]
 8009c34:	f004 fcac 	bl	800e590 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	00db      	lsls	r3, r3, #3
 8009c3e:	4413      	add	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	3338      	adds	r3, #56	; 0x38
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	4413      	add	r3, r2
 8009c48:	3304      	adds	r3, #4
 8009c4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	78db      	ldrb	r3, [r3, #3]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d108      	bne.n	8009c66 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2200      	movs	r2, #0
 8009c58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f00b fa93 	bl	801518c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c72:	461a      	mov	r2, r3
 8009c74:	2302      	movs	r3, #2
 8009c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fcdb 	bl	800a640 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	085b      	lsrs	r3, r3, #1
 8009c94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f47f af2e 	bne.w	8009afa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f005 fc96 	bl	800f5d4 <USB_ReadInterrupts>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cb2:	d122      	bne.n	8009cfa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	69fa      	ldr	r2, [r7, #28]
 8009cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cc2:	f023 0301 	bic.w	r3, r3, #1
 8009cc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d108      	bne.n	8009ce4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009cda:	2100      	movs	r1, #0
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fec3 	bl	800aa68 <HAL_PCDEx_LPM_Callback>
 8009ce2:	e002      	b.n	8009cea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f00b fa31 	bl	801514c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	695a      	ldr	r2, [r3, #20]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f005 fc68 	bl	800f5d4 <USB_ReadInterrupts>
 8009d04:	4603      	mov	r3, r0
 8009d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d0e:	d112      	bne.n	8009d36 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d102      	bne.n	8009d26 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f00b f9ed 	bl	8015100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	695a      	ldr	r2, [r3, #20]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009d34:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f005 fc4a 	bl	800f5d4 <USB_ReadInterrupts>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d4a:	f040 80b7 	bne.w	8009ebc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2110      	movs	r1, #16
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f004 fc11 	bl	800e590 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d6e:	2300      	movs	r3, #0
 8009d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d72:	e046      	b.n	8009e02 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d76:	015a      	lsls	r2, r3, #5
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d80:	461a      	mov	r2, r3
 8009d82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d86:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009da6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db4:	461a      	mov	r2, r3
 8009db6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009dba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dcc:	0151      	lsls	r1, r2, #5
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	440a      	add	r2, r1
 8009dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dec:	0151      	lsls	r1, r2, #5
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	440a      	add	r2, r1
 8009df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dfa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	3301      	adds	r3, #1
 8009e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d3b3      	bcc.n	8009d74 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e1a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009e1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d016      	beq.n	8009e56 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e38:	f043 030b 	orr.w	r3, r3, #11
 8009e3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e48:	69fa      	ldr	r2, [r7, #28]
 8009e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e4e:	f043 030b 	orr.w	r3, r3, #11
 8009e52:	6453      	str	r3, [r2, #68]	; 0x44
 8009e54:	e015      	b.n	8009e82 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e68:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009e6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	69fa      	ldr	r2, [r7, #28]
 8009e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e7c:	f043 030b 	orr.w	r3, r3, #11
 8009e80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f005 fc58 	bl	800f75c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	695a      	ldr	r2, [r3, #20]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f005 fb87 	bl	800f5d4 <USB_ReadInterrupts>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ed0:	d124      	bne.n	8009f1c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f005 fc1d 	bl	800f716 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f004 fbd2 	bl	800e68a <USB_GetDevSpeed>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	461a      	mov	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681c      	ldr	r4, [r3, #0]
 8009ef2:	f001 f9e9 	bl	800b2c8 <HAL_RCC_GetHCLKFreq>
 8009ef6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	461a      	mov	r2, r3
 8009f00:	4620      	mov	r0, r4
 8009f02:	f004 f8d1 	bl	800e0a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f00b f8d1 	bl	80150ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	695a      	ldr	r2, [r3, #20]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f005 fb57 	bl	800f5d4 <USB_ReadInterrupts>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f003 0308 	and.w	r3, r3, #8
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d10a      	bne.n	8009f46 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f00b f8ae 	bl	8015092 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	695a      	ldr	r2, [r3, #20]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f002 0208 	and.w	r2, r2, #8
 8009f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f005 fb42 	bl	800f5d4 <USB_ReadInterrupts>
 8009f50:	4603      	mov	r3, r0
 8009f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f56:	2b80      	cmp	r3, #128	; 0x80
 8009f58:	d122      	bne.n	8009fa0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f66:	2301      	movs	r3, #1
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6a:	e014      	b.n	8009f96 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f70:	4613      	mov	r3, r2
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	4413      	add	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	440b      	add	r3, r1
 8009f7a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d105      	bne.n	8009f90 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fb27 	bl	800a5de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	3301      	adds	r3, #1
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d3e5      	bcc.n	8009f6c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f005 fb15 	bl	800f5d4 <USB_ReadInterrupts>
 8009faa:	4603      	mov	r3, r0
 8009fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fb4:	d13b      	bne.n	800a02e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8009fba:	e02b      	b.n	800a014 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	00db      	lsls	r3, r3, #3
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	440b      	add	r3, r1
 8009fda:	3340      	adds	r3, #64	; 0x40
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d115      	bne.n	800a00e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009fe2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	da12      	bge.n	800a00e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fec:	4613      	mov	r3, r2
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	4413      	add	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	440b      	add	r3, r1
 8009ff6:	333f      	adds	r3, #63	; 0x3f
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a004:	b2db      	uxtb	r3, r3
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fae8 	bl	800a5de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	3301      	adds	r3, #1
 800a012:	627b      	str	r3, [r7, #36]	; 0x24
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d3ce      	bcc.n	8009fbc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	695a      	ldr	r2, [r3, #20]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a02c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4618      	mov	r0, r3
 800a034:	f005 face 	bl	800f5d4 <USB_ReadInterrupts>
 800a038:	4603      	mov	r3, r0
 800a03a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a03e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a042:	d155      	bne.n	800a0f0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a044:	2301      	movs	r3, #1
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
 800a048:	e045      	b.n	800a0d6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05e:	4613      	mov	r3, r2
 800a060:	00db      	lsls	r3, r3, #3
 800a062:	4413      	add	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	440b      	add	r3, r1
 800a068:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d12e      	bne.n	800a0d0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a072:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a074:	2b00      	cmp	r3, #0
 800a076:	da2b      	bge.n	800a0d0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a084:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a088:	429a      	cmp	r2, r3
 800a08a:	d121      	bne.n	800a0d0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a08c:	6879      	ldr	r1, [r7, #4]
 800a08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a090:	4613      	mov	r3, r2
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	440b      	add	r3, r1
 800a09a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a09e:	2201      	movs	r2, #1
 800a0a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0cc:	6053      	str	r3, [r2, #4]
            break;
 800a0ce:	e007      	b.n	800a0e0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d3b4      	bcc.n	800a04a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	695a      	ldr	r2, [r3, #20]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a0ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f005 fa6d 	bl	800f5d4 <USB_ReadInterrupts>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a104:	d10a      	bne.n	800a11c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f00b f852 	bl	80151b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	695a      	ldr	r2, [r3, #20]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a11a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4618      	mov	r0, r3
 800a122:	f005 fa57 	bl	800f5d4 <USB_ReadInterrupts>
 800a126:	4603      	mov	r3, r0
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d115      	bne.n	800a15c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f003 0304 	and.w	r3, r3, #4
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f00b f842 	bl	80151cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6859      	ldr	r1, [r3, #4]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69ba      	ldr	r2, [r7, #24]
 800a154:	430a      	orrs	r2, r1
 800a156:	605a      	str	r2, [r3, #4]
 800a158:	e000      	b.n	800a15c <HAL_PCD_IRQHandler+0x938>
      return;
 800a15a:	bf00      	nop
    }
  }
}
 800a15c:	3734      	adds	r7, #52	; 0x34
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd90      	pop	{r4, r7, pc}

0800a162 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_PCD_SetAddress+0x1a>
 800a178:	2302      	movs	r3, #2
 800a17a:	e013      	b.n	800a1a4 <HAL_PCD_SetAddress+0x42>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	78fa      	ldrb	r2, [r7, #3]
 800a188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	78fa      	ldrb	r2, [r7, #3]
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f005 f9b5 	bl	800f504 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	70fb      	strb	r3, [r7, #3]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	803b      	strh	r3, [r7, #0]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a1ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	da0f      	bge.n	800a1f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	f003 020f 	and.w	r2, r3, #15
 800a1d8:	4613      	mov	r3, r2
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	3338      	adds	r3, #56	; 0x38
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	705a      	strb	r2, [r3, #1]
 800a1f0:	e00f      	b.n	800a212 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	f003 020f 	and.w	r2, r3, #15
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	4413      	add	r3, r2
 800a208:	3304      	adds	r3, #4
 800a20a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a212:	78fb      	ldrb	r3, [r7, #3]
 800a214:	f003 030f 	and.w	r3, r3, #15
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a21e:	883a      	ldrh	r2, [r7, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	78ba      	ldrb	r2, [r7, #2]
 800a228:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	785b      	ldrb	r3, [r3, #1]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d004      	beq.n	800a23c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b29a      	uxth	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a23c:	78bb      	ldrb	r3, [r7, #2]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d102      	bne.n	800a248 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d101      	bne.n	800a256 <HAL_PCD_EP_Open+0xaa>
 800a252:	2302      	movs	r3, #2
 800a254:	e00e      	b.n	800a274 <HAL_PCD_EP_Open+0xc8>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68f9      	ldr	r1, [r7, #12]
 800a264:	4618      	mov	r0, r3
 800a266:	f004 fa35 	bl	800e6d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a272:	7afb      	ldrb	r3, [r7, #11]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	da0f      	bge.n	800a2b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	f003 020f 	and.w	r2, r3, #15
 800a296:	4613      	mov	r3, r2
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	3338      	adds	r3, #56	; 0x38
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	705a      	strb	r2, [r3, #1]
 800a2ae:	e00f      	b.n	800a2d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	f003 020f 	and.w	r2, r3, #15
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	4413      	add	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	f003 030f 	and.w	r3, r3, #15
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d101      	bne.n	800a2ea <HAL_PCD_EP_Close+0x6e>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e00e      	b.n	800a308 <HAL_PCD_EP_Close+0x8c>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68f9      	ldr	r1, [r7, #12]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f004 fa73 	bl	800e7e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	607a      	str	r2, [r7, #4]
 800a31a:	603b      	str	r3, [r7, #0]
 800a31c:	460b      	mov	r3, r1
 800a31e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a320:	7afb      	ldrb	r3, [r7, #11]
 800a322:	f003 020f 	and.w	r2, r3, #15
 800a326:	4613      	mov	r3, r2
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	4413      	add	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	4413      	add	r3, r2
 800a336:	3304      	adds	r3, #4
 800a338:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2200      	movs	r2, #0
 800a34a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2200      	movs	r2, #0
 800a350:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a352:	7afb      	ldrb	r3, [r7, #11]
 800a354:	f003 030f 	and.w	r3, r3, #15
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d102      	bne.n	800a36c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	f003 030f 	and.w	r3, r3, #15
 800a372:	2b00      	cmp	r3, #0
 800a374:	d109      	bne.n	800a38a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	461a      	mov	r2, r3
 800a382:	6979      	ldr	r1, [r7, #20]
 800a384:	f004 fd52 	bl	800ee2c <USB_EP0StartXfer>
 800a388:	e008      	b.n	800a39c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	b2db      	uxtb	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	6979      	ldr	r1, [r7, #20]
 800a398:	f004 fb00 	bl	800e99c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a3b2:	78fb      	ldrb	r3, [r7, #3]
 800a3b4:	f003 020f 	and.w	r2, r3, #15
 800a3b8:	6879      	ldr	r1, [r7, #4]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	00db      	lsls	r3, r3, #3
 800a3be:	4413      	add	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	440b      	add	r3, r1
 800a3c4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a3c8:	681b      	ldr	r3, [r3, #0]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b086      	sub	sp, #24
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	603b      	str	r3, [r7, #0]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	f003 020f 	and.w	r2, r3, #15
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	00db      	lsls	r3, r3, #3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	3338      	adds	r3, #56	; 0x38
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2200      	movs	r2, #0
 800a40e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2201      	movs	r2, #1
 800a414:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a416:	7afb      	ldrb	r3, [r7, #11]
 800a418:	f003 030f 	and.w	r3, r3, #15
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d102      	bne.n	800a430 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a430:	7afb      	ldrb	r3, [r7, #11]
 800a432:	f003 030f 	and.w	r3, r3, #15
 800a436:	2b00      	cmp	r3, #0
 800a438:	d109      	bne.n	800a44e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	461a      	mov	r2, r3
 800a446:	6979      	ldr	r1, [r7, #20]
 800a448:	f004 fcf0 	bl	800ee2c <USB_EP0StartXfer>
 800a44c:	e008      	b.n	800a460 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	6979      	ldr	r1, [r7, #20]
 800a45c:	f004 fa9e 	bl	800e99c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	460b      	mov	r3, r1
 800a474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a476:	78fb      	ldrb	r3, [r7, #3]
 800a478:	f003 020f 	and.w	r2, r3, #15
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	429a      	cmp	r2, r3
 800a482:	d901      	bls.n	800a488 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e050      	b.n	800a52a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	da0f      	bge.n	800a4b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a490:	78fb      	ldrb	r3, [r7, #3]
 800a492:	f003 020f 	and.w	r2, r3, #15
 800a496:	4613      	mov	r3, r2
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	4413      	add	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	3338      	adds	r3, #56	; 0x38
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	705a      	strb	r2, [r3, #1]
 800a4ae:	e00d      	b.n	800a4cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a4b0:	78fa      	ldrb	r2, [r7, #3]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	4413      	add	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	f003 030f 	and.w	r3, r3, #15
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d101      	bne.n	800a4ec <HAL_PCD_EP_SetStall+0x82>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	e01e      	b.n	800a52a <HAL_PCD_EP_SetStall+0xc0>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68f9      	ldr	r1, [r7, #12]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f004 ff2e 	bl	800f35c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	b2d9      	uxtb	r1, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a51a:	461a      	mov	r2, r3
 800a51c:	f005 f91e 	bl	800f75c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	460b      	mov	r3, r1
 800a53c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a53e:	78fb      	ldrb	r3, [r7, #3]
 800a540:	f003 020f 	and.w	r2, r3, #15
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d901      	bls.n	800a550 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e042      	b.n	800a5d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a554:	2b00      	cmp	r3, #0
 800a556:	da0f      	bge.n	800a578 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	f003 020f 	and.w	r2, r3, #15
 800a55e:	4613      	mov	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	4413      	add	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	3338      	adds	r3, #56	; 0x38
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	4413      	add	r3, r2
 800a56c:	3304      	adds	r3, #4
 800a56e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	705a      	strb	r2, [r3, #1]
 800a576:	e00f      	b.n	800a598 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a578:	78fb      	ldrb	r3, [r7, #3]
 800a57a:	f003 020f 	and.w	r2, r3, #15
 800a57e:	4613      	mov	r3, r2
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	4413      	add	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	4413      	add	r3, r2
 800a58e:	3304      	adds	r3, #4
 800a590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	f003 030f 	and.w	r3, r3, #15
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_PCD_EP_ClrStall+0x86>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e00e      	b.n	800a5d6 <HAL_PCD_EP_ClrStall+0xa4>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68f9      	ldr	r1, [r7, #12]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f004 ff36 	bl	800f438 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b084      	sub	sp, #16
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a5ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	da0c      	bge.n	800a60c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5f2:	78fb      	ldrb	r3, [r7, #3]
 800a5f4:	f003 020f 	and.w	r2, r3, #15
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	00db      	lsls	r3, r3, #3
 800a5fc:	4413      	add	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	3338      	adds	r3, #56	; 0x38
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	4413      	add	r3, r2
 800a606:	3304      	adds	r3, #4
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	e00c      	b.n	800a626 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a60c:	78fb      	ldrb	r3, [r7, #3]
 800a60e:	f003 020f 	and.w	r2, r3, #15
 800a612:	4613      	mov	r3, r2
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	4413      	add	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	4413      	add	r3, r2
 800a622:	3304      	adds	r3, #4
 800a624:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68f9      	ldr	r1, [r7, #12]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f004 fd55 	bl	800f0dc <USB_EPStopXfer>
 800a632:	4603      	mov	r3, r0
 800a634:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a636:	7afb      	ldrb	r3, [r7, #11]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08a      	sub	sp, #40	; 0x28
 800a644:	af02      	add	r7, sp, #8
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	4613      	mov	r3, r2
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	3338      	adds	r3, #56	; 0x38
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	4413      	add	r3, r2
 800a664:	3304      	adds	r3, #4
 800a666:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6a1a      	ldr	r2, [r3, #32]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	429a      	cmp	r2, r3
 800a672:	d901      	bls.n	800a678 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e06c      	b.n	800a752 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	699a      	ldr	r2, [r3, #24]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	69fa      	ldr	r2, [r7, #28]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d902      	bls.n	800a694 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	3303      	adds	r3, #3
 800a698:	089b      	lsrs	r3, r3, #2
 800a69a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a69c:	e02b      	b.n	800a6f6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	699a      	ldr	r2, [r3, #24]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	69fa      	ldr	r2, [r7, #28]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d902      	bls.n	800a6ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	3303      	adds	r3, #3
 800a6be:	089b      	lsrs	r3, r3, #2
 800a6c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6919      	ldr	r1, [r3, #16]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	6978      	ldr	r0, [r7, #20]
 800a6da:	f004 fda9 	bl	800f230 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	691a      	ldr	r2, [r3, #16]
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	441a      	add	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6a1a      	ldr	r2, [r3, #32]
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	441a      	add	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d809      	bhi.n	800a720 <PCD_WriteEmptyTxFifo+0xe0>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a1a      	ldr	r2, [r3, #32]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a714:	429a      	cmp	r2, r3
 800a716:	d203      	bcs.n	800a720 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1be      	bne.n	800a69e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	699a      	ldr	r2, [r3, #24]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d811      	bhi.n	800a750 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	f003 030f 	and.w	r3, r3, #15
 800a732:	2201      	movs	r2, #1
 800a734:	fa02 f303 	lsl.w	r3, r2, r3
 800a738:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	43db      	mvns	r3, r3
 800a746:	6939      	ldr	r1, [r7, #16]
 800a748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a74c:	4013      	ands	r3, r2
 800a74e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3720      	adds	r7, #32
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
	...

0800a75c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	333c      	adds	r3, #60	; 0x3c
 800a774:	3304      	adds	r3, #4
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	4413      	add	r3, r2
 800a782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d17b      	bne.n	800a88a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f003 0308 	and.w	r3, r3, #8
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d015      	beq.n	800a7c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	4a61      	ldr	r2, [pc, #388]	; (800a924 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	f240 80b9 	bls.w	800a918 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 80b3 	beq.w	800a918 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	015a      	lsls	r2, r3, #5
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7be:	461a      	mov	r2, r3
 800a7c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7c4:	6093      	str	r3, [r2, #8]
 800a7c6:	e0a7      	b.n	800a918 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f003 0320 	and.w	r3, r3, #32
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d009      	beq.n	800a7e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7de:	461a      	mov	r2, r3
 800a7e0:	2320      	movs	r3, #32
 800a7e2:	6093      	str	r3, [r2, #8]
 800a7e4:	e098      	b.n	800a918 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f040 8093 	bne.w	800a918 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	4a4b      	ldr	r2, [pc, #300]	; (800a924 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d90f      	bls.n	800a81a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00a      	beq.n	800a81a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a810:	461a      	mov	r2, r3
 800a812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a816:	6093      	str	r3, [r2, #8]
 800a818:	e07e      	b.n	800a918 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	4613      	mov	r3, r2
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	4413      	add	r3, r2
 800a82c:	3304      	adds	r3, #4
 800a82e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	69da      	ldr	r2, [r3, #28]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	0159      	lsls	r1, r3, #5
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	440b      	add	r3, r1
 800a83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a846:	1ad2      	subs	r2, r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d114      	bne.n	800a87c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d109      	bne.n	800a86e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a864:	461a      	mov	r2, r3
 800a866:	2101      	movs	r1, #1
 800a868:	f004 ff78 	bl	800f75c <USB_EP0_OutStart>
 800a86c:	e006      	b.n	800a87c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	691a      	ldr	r2, [r3, #16]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	441a      	add	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f00a fbd0 	bl	8015028 <HAL_PCD_DataOutStageCallback>
 800a888:	e046      	b.n	800a918 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	4a26      	ldr	r2, [pc, #152]	; (800a928 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d124      	bne.n	800a8dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00a      	beq.n	800a8b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8ae:	6093      	str	r3, [r2, #8]
 800a8b0:	e032      	b.n	800a918 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f003 0320 	and.w	r3, r3, #32
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d008      	beq.n	800a8ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	2320      	movs	r3, #32
 800a8cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f00a fba7 	bl	8015028 <HAL_PCD_DataOutStageCallback>
 800a8da:	e01d      	b.n	800a918 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d114      	bne.n	800a90c <PCD_EP_OutXfrComplete_int+0x1b0>
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	00db      	lsls	r3, r3, #3
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	440b      	add	r3, r1
 800a8f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d108      	bne.n	800a90c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6818      	ldr	r0, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a904:	461a      	mov	r2, r3
 800a906:	2100      	movs	r1, #0
 800a908:	f004 ff28 	bl	800f75c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f00a fb88 	bl	8015028 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3720      	adds	r7, #32
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	4f54300a 	.word	0x4f54300a
 800a928:	4f54310a 	.word	0x4f54310a

0800a92c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b086      	sub	sp, #24
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	333c      	adds	r3, #60	; 0x3c
 800a944:	3304      	adds	r3, #4
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	4413      	add	r3, r2
 800a952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4a15      	ldr	r2, [pc, #84]	; (800a9b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d90e      	bls.n	800a980 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d009      	beq.n	800a980 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	015a      	lsls	r2, r3, #5
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	4413      	add	r3, r2
 800a974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a978:	461a      	mov	r2, r3
 800a97a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a97e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f00a fb3f 	bl	8015004 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4a0a      	ldr	r2, [pc, #40]	; (800a9b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d90c      	bls.n	800a9a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d108      	bne.n	800a9a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6818      	ldr	r0, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	f004 feda 	bl	800f75c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	4f54300a 	.word	0x4f54300a

0800a9b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d107      	bne.n	800a9e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a9d6:	883b      	ldrh	r3, [r7, #0]
 800a9d8:	0419      	lsls	r1, r3, #16
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	629a      	str	r2, [r3, #40]	; 0x28
 800a9e4:	e028      	b.n	800aa38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ec:	0c1b      	lsrs	r3, r3, #16
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73fb      	strb	r3, [r7, #15]
 800a9f8:	e00d      	b.n	800aa16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	7bfb      	ldrb	r3, [r7, #15]
 800aa00:	3340      	adds	r3, #64	; 0x40
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	0c1b      	lsrs	r3, r3, #16
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
 800aa12:	3301      	adds	r3, #1
 800aa14:	73fb      	strb	r3, [r7, #15]
 800aa16:	7bfa      	ldrb	r2, [r7, #15]
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d3ec      	bcc.n	800a9fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800aa20:	883b      	ldrh	r3, [r7, #0]
 800aa22:	0418      	lsls	r0, r3, #16
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6819      	ldr	r1, [r3, #0]
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	4302      	orrs	r2, r0
 800aa30:	3340      	adds	r3, #64	; 0x40
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	440b      	add	r3, r1
 800aa36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b083      	sub	sp, #12
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	460b      	mov	r3, r1
 800aa50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	887a      	ldrh	r2, [r7, #2]
 800aa58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e267      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d075      	beq.n	800ab8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa9e:	4b88      	ldr	r3, [pc, #544]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	f003 030c 	and.w	r3, r3, #12
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d00c      	beq.n	800aac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aaaa:	4b85      	ldr	r3, [pc, #532]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aab2:	2b08      	cmp	r3, #8
 800aab4:	d112      	bne.n	800aadc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aab6:	4b82      	ldr	r3, [pc, #520]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aabe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aac2:	d10b      	bne.n	800aadc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aac4:	4b7e      	ldr	r3, [pc, #504]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d05b      	beq.n	800ab88 <HAL_RCC_OscConfig+0x108>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d157      	bne.n	800ab88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e242      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aae4:	d106      	bne.n	800aaf4 <HAL_RCC_OscConfig+0x74>
 800aae6:	4b76      	ldr	r3, [pc, #472]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a75      	ldr	r2, [pc, #468]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800aaec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	e01d      	b.n	800ab30 <HAL_RCC_OscConfig+0xb0>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aafc:	d10c      	bne.n	800ab18 <HAL_RCC_OscConfig+0x98>
 800aafe:	4b70      	ldr	r3, [pc, #448]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a6f      	ldr	r2, [pc, #444]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab08:	6013      	str	r3, [r2, #0]
 800ab0a:	4b6d      	ldr	r3, [pc, #436]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a6c      	ldr	r2, [pc, #432]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	e00b      	b.n	800ab30 <HAL_RCC_OscConfig+0xb0>
 800ab18:	4b69      	ldr	r3, [pc, #420]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a68      	ldr	r2, [pc, #416]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab22:	6013      	str	r3, [r2, #0]
 800ab24:	4b66      	ldr	r3, [pc, #408]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a65      	ldr	r2, [pc, #404]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d013      	beq.n	800ab60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab38:	f7fc ffb2 	bl	8007aa0 <HAL_GetTick>
 800ab3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab3e:	e008      	b.n	800ab52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab40:	f7fc ffae 	bl	8007aa0 <HAL_GetTick>
 800ab44:	4602      	mov	r2, r0
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	2b64      	cmp	r3, #100	; 0x64
 800ab4c:	d901      	bls.n	800ab52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e207      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab52:	4b5b      	ldr	r3, [pc, #364]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0f0      	beq.n	800ab40 <HAL_RCC_OscConfig+0xc0>
 800ab5e:	e014      	b.n	800ab8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab60:	f7fc ff9e 	bl	8007aa0 <HAL_GetTick>
 800ab64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab66:	e008      	b.n	800ab7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab68:	f7fc ff9a 	bl	8007aa0 <HAL_GetTick>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	2b64      	cmp	r3, #100	; 0x64
 800ab74:	d901      	bls.n	800ab7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e1f3      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab7a:	4b51      	ldr	r3, [pc, #324]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1f0      	bne.n	800ab68 <HAL_RCC_OscConfig+0xe8>
 800ab86:	e000      	b.n	800ab8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0302 	and.w	r3, r3, #2
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d063      	beq.n	800ac5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab96:	4b4a      	ldr	r3, [pc, #296]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f003 030c 	and.w	r3, r3, #12
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00b      	beq.n	800abba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aba2:	4b47      	ldr	r3, [pc, #284]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800abaa:	2b08      	cmp	r3, #8
 800abac:	d11c      	bne.n	800abe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800abae:	4b44      	ldr	r3, [pc, #272]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d116      	bne.n	800abe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abba:	4b41      	ldr	r3, [pc, #260]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 0302 	and.w	r3, r3, #2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d005      	beq.n	800abd2 <HAL_RCC_OscConfig+0x152>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d001      	beq.n	800abd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e1c7      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abd2:	4b3b      	ldr	r3, [pc, #236]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	4937      	ldr	r1, [pc, #220]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abe6:	e03a      	b.n	800ac5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d020      	beq.n	800ac32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800abf0:	4b34      	ldr	r3, [pc, #208]	; (800acc4 <HAL_RCC_OscConfig+0x244>)
 800abf2:	2201      	movs	r2, #1
 800abf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abf6:	f7fc ff53 	bl	8007aa0 <HAL_GetTick>
 800abfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abfc:	e008      	b.n	800ac10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abfe:	f7fc ff4f 	bl	8007aa0 <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d901      	bls.n	800ac10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e1a8      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac10:	4b2b      	ldr	r3, [pc, #172]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0302 	and.w	r3, r3, #2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d0f0      	beq.n	800abfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac1c:	4b28      	ldr	r3, [pc, #160]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	4925      	ldr	r1, [pc, #148]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	600b      	str	r3, [r1, #0]
 800ac30:	e015      	b.n	800ac5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac32:	4b24      	ldr	r3, [pc, #144]	; (800acc4 <HAL_RCC_OscConfig+0x244>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac38:	f7fc ff32 	bl	8007aa0 <HAL_GetTick>
 800ac3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac3e:	e008      	b.n	800ac52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac40:	f7fc ff2e 	bl	8007aa0 <HAL_GetTick>
 800ac44:	4602      	mov	r2, r0
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d901      	bls.n	800ac52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ac4e:	2303      	movs	r3, #3
 800ac50:	e187      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac52:	4b1b      	ldr	r3, [pc, #108]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0302 	and.w	r3, r3, #2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1f0      	bne.n	800ac40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 0308 	and.w	r3, r3, #8
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d036      	beq.n	800acd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d016      	beq.n	800aca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac72:	4b15      	ldr	r3, [pc, #84]	; (800acc8 <HAL_RCC_OscConfig+0x248>)
 800ac74:	2201      	movs	r2, #1
 800ac76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac78:	f7fc ff12 	bl	8007aa0 <HAL_GetTick>
 800ac7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac7e:	e008      	b.n	800ac92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac80:	f7fc ff0e 	bl	8007aa0 <HAL_GetTick>
 800ac84:	4602      	mov	r2, r0
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d901      	bls.n	800ac92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e167      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac92:	4b0b      	ldr	r3, [pc, #44]	; (800acc0 <HAL_RCC_OscConfig+0x240>)
 800ac94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac96:	f003 0302 	and.w	r3, r3, #2
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0f0      	beq.n	800ac80 <HAL_RCC_OscConfig+0x200>
 800ac9e:	e01b      	b.n	800acd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aca0:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <HAL_RCC_OscConfig+0x248>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aca6:	f7fc fefb 	bl	8007aa0 <HAL_GetTick>
 800acaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800acac:	e00e      	b.n	800accc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acae:	f7fc fef7 	bl	8007aa0 <HAL_GetTick>
 800acb2:	4602      	mov	r2, r0
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d907      	bls.n	800accc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800acbc:	2303      	movs	r3, #3
 800acbe:	e150      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
 800acc0:	40023800 	.word	0x40023800
 800acc4:	42470000 	.word	0x42470000
 800acc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800accc:	4b88      	ldr	r3, [pc, #544]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800acce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acd0:	f003 0302 	and.w	r3, r3, #2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1ea      	bne.n	800acae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 8097 	beq.w	800ae14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ace6:	2300      	movs	r3, #0
 800ace8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acea:	4b81      	ldr	r3, [pc, #516]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800acec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10f      	bne.n	800ad16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acf6:	2300      	movs	r3, #0
 800acf8:	60bb      	str	r3, [r7, #8]
 800acfa:	4b7d      	ldr	r3, [pc, #500]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	4a7c      	ldr	r2, [pc, #496]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad04:	6413      	str	r3, [r2, #64]	; 0x40
 800ad06:	4b7a      	ldr	r3, [pc, #488]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad0e:	60bb      	str	r3, [r7, #8]
 800ad10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad12:	2301      	movs	r3, #1
 800ad14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad16:	4b77      	ldr	r3, [pc, #476]	; (800aef4 <HAL_RCC_OscConfig+0x474>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d118      	bne.n	800ad54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad22:	4b74      	ldr	r3, [pc, #464]	; (800aef4 <HAL_RCC_OscConfig+0x474>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a73      	ldr	r2, [pc, #460]	; (800aef4 <HAL_RCC_OscConfig+0x474>)
 800ad28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad2e:	f7fc feb7 	bl	8007aa0 <HAL_GetTick>
 800ad32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad34:	e008      	b.n	800ad48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad36:	f7fc feb3 	bl	8007aa0 <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d901      	bls.n	800ad48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e10c      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad48:	4b6a      	ldr	r3, [pc, #424]	; (800aef4 <HAL_RCC_OscConfig+0x474>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0f0      	beq.n	800ad36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d106      	bne.n	800ad6a <HAL_RCC_OscConfig+0x2ea>
 800ad5c:	4b64      	ldr	r3, [pc, #400]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad60:	4a63      	ldr	r2, [pc, #396]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	6713      	str	r3, [r2, #112]	; 0x70
 800ad68:	e01c      	b.n	800ada4 <HAL_RCC_OscConfig+0x324>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	2b05      	cmp	r3, #5
 800ad70:	d10c      	bne.n	800ad8c <HAL_RCC_OscConfig+0x30c>
 800ad72:	4b5f      	ldr	r3, [pc, #380]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad76:	4a5e      	ldr	r2, [pc, #376]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad78:	f043 0304 	orr.w	r3, r3, #4
 800ad7c:	6713      	str	r3, [r2, #112]	; 0x70
 800ad7e:	4b5c      	ldr	r3, [pc, #368]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad82:	4a5b      	ldr	r2, [pc, #364]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad84:	f043 0301 	orr.w	r3, r3, #1
 800ad88:	6713      	str	r3, [r2, #112]	; 0x70
 800ad8a:	e00b      	b.n	800ada4 <HAL_RCC_OscConfig+0x324>
 800ad8c:	4b58      	ldr	r3, [pc, #352]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad90:	4a57      	ldr	r2, [pc, #348]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad92:	f023 0301 	bic.w	r3, r3, #1
 800ad96:	6713      	str	r3, [r2, #112]	; 0x70
 800ad98:	4b55      	ldr	r3, [pc, #340]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9c:	4a54      	ldr	r2, [pc, #336]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ad9e:	f023 0304 	bic.w	r3, r3, #4
 800ada2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d015      	beq.n	800add8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adac:	f7fc fe78 	bl	8007aa0 <HAL_GetTick>
 800adb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adb2:	e00a      	b.n	800adca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800adb4:	f7fc fe74 	bl	8007aa0 <HAL_GetTick>
 800adb8:	4602      	mov	r2, r0
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d901      	bls.n	800adca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e0cb      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adca:	4b49      	ldr	r3, [pc, #292]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800adcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adce:	f003 0302 	and.w	r3, r3, #2
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0ee      	beq.n	800adb4 <HAL_RCC_OscConfig+0x334>
 800add6:	e014      	b.n	800ae02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800add8:	f7fc fe62 	bl	8007aa0 <HAL_GetTick>
 800addc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800adde:	e00a      	b.n	800adf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ade0:	f7fc fe5e 	bl	8007aa0 <HAL_GetTick>
 800ade4:	4602      	mov	r2, r0
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	f241 3288 	movw	r2, #5000	; 0x1388
 800adee:	4293      	cmp	r3, r2
 800adf0:	d901      	bls.n	800adf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e0b5      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800adf6:	4b3e      	ldr	r3, [pc, #248]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800adf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adfa:	f003 0302 	and.w	r3, r3, #2
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1ee      	bne.n	800ade0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d105      	bne.n	800ae14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae08:	4b39      	ldr	r3, [pc, #228]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ae0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0c:	4a38      	ldr	r2, [pc, #224]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ae0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 80a1 	beq.w	800af60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ae1e:	4b34      	ldr	r3, [pc, #208]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	f003 030c 	and.w	r3, r3, #12
 800ae26:	2b08      	cmp	r3, #8
 800ae28:	d05c      	beq.n	800aee4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d141      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae32:	4b31      	ldr	r3, [pc, #196]	; (800aef8 <HAL_RCC_OscConfig+0x478>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae38:	f7fc fe32 	bl	8007aa0 <HAL_GetTick>
 800ae3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae3e:	e008      	b.n	800ae52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae40:	f7fc fe2e 	bl	8007aa0 <HAL_GetTick>
 800ae44:	4602      	mov	r2, r0
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d901      	bls.n	800ae52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	e087      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae52:	4b27      	ldr	r3, [pc, #156]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1f0      	bne.n	800ae40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	69da      	ldr	r2, [r3, #28]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	431a      	orrs	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6c:	019b      	lsls	r3, r3, #6
 800ae6e:	431a      	orrs	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae74:	085b      	lsrs	r3, r3, #1
 800ae76:	3b01      	subs	r3, #1
 800ae78:	041b      	lsls	r3, r3, #16
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae80:	061b      	lsls	r3, r3, #24
 800ae82:	491b      	ldr	r1, [pc, #108]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800ae84:	4313      	orrs	r3, r2
 800ae86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae88:	4b1b      	ldr	r3, [pc, #108]	; (800aef8 <HAL_RCC_OscConfig+0x478>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae8e:	f7fc fe07 	bl	8007aa0 <HAL_GetTick>
 800ae92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae94:	e008      	b.n	800aea8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae96:	f7fc fe03 	bl	8007aa0 <HAL_GetTick>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d901      	bls.n	800aea8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e05c      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aea8:	4b11      	ldr	r3, [pc, #68]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0f0      	beq.n	800ae96 <HAL_RCC_OscConfig+0x416>
 800aeb4:	e054      	b.n	800af60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aeb6:	4b10      	ldr	r3, [pc, #64]	; (800aef8 <HAL_RCC_OscConfig+0x478>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aebc:	f7fc fdf0 	bl	8007aa0 <HAL_GetTick>
 800aec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aec2:	e008      	b.n	800aed6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aec4:	f7fc fdec 	bl	8007aa0 <HAL_GetTick>
 800aec8:	4602      	mov	r2, r0
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d901      	bls.n	800aed6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e045      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aed6:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <HAL_RCC_OscConfig+0x470>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1f0      	bne.n	800aec4 <HAL_RCC_OscConfig+0x444>
 800aee2:	e03d      	b.n	800af60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d107      	bne.n	800aefc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e038      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
 800aef0:	40023800 	.word	0x40023800
 800aef4:	40007000 	.word	0x40007000
 800aef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aefc:	4b1b      	ldr	r3, [pc, #108]	; (800af6c <HAL_RCC_OscConfig+0x4ec>)
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d028      	beq.n	800af5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af14:	429a      	cmp	r2, r3
 800af16:	d121      	bne.n	800af5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af22:	429a      	cmp	r2, r3
 800af24:	d11a      	bne.n	800af5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800af2c:	4013      	ands	r3, r2
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af34:	4293      	cmp	r3, r2
 800af36:	d111      	bne.n	800af5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af42:	085b      	lsrs	r3, r3, #1
 800af44:	3b01      	subs	r3, #1
 800af46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af48:	429a      	cmp	r2, r3
 800af4a:	d107      	bne.n	800af5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af58:	429a      	cmp	r2, r3
 800af5a:	d001      	beq.n	800af60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	e000      	b.n	800af62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	40023800 	.word	0x40023800

0800af70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	e0cc      	b.n	800b11e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800af84:	4b68      	ldr	r3, [pc, #416]	; (800b128 <HAL_RCC_ClockConfig+0x1b8>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 030f 	and.w	r3, r3, #15
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d90c      	bls.n	800afac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af92:	4b65      	ldr	r3, [pc, #404]	; (800b128 <HAL_RCC_ClockConfig+0x1b8>)
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	b2d2      	uxtb	r2, r2
 800af98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af9a:	4b63      	ldr	r3, [pc, #396]	; (800b128 <HAL_RCC_ClockConfig+0x1b8>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 030f 	and.w	r3, r3, #15
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d001      	beq.n	800afac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e0b8      	b.n	800b11e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 0302 	and.w	r3, r3, #2
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d020      	beq.n	800affa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d005      	beq.n	800afd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800afc4:	4b59      	ldr	r3, [pc, #356]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	4a58      	ldr	r2, [pc, #352]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800afca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800afce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800afdc:	4b53      	ldr	r3, [pc, #332]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	4a52      	ldr	r2, [pc, #328]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800afe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800afe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afe8:	4b50      	ldr	r3, [pc, #320]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	494d      	ldr	r1, [pc, #308]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800aff6:	4313      	orrs	r3, r2
 800aff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	2b00      	cmp	r3, #0
 800b004:	d044      	beq.n	800b090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d107      	bne.n	800b01e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b00e:	4b47      	ldr	r3, [pc, #284]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d119      	bne.n	800b04e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e07f      	b.n	800b11e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	2b02      	cmp	r3, #2
 800b024:	d003      	beq.n	800b02e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d107      	bne.n	800b03e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b02e:	4b3f      	ldr	r3, [pc, #252]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d109      	bne.n	800b04e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e06f      	b.n	800b11e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b03e:	4b3b      	ldr	r3, [pc, #236]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0302 	and.w	r3, r3, #2
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e067      	b.n	800b11e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b04e:	4b37      	ldr	r3, [pc, #220]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f023 0203 	bic.w	r2, r3, #3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	4934      	ldr	r1, [pc, #208]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b05c:	4313      	orrs	r3, r2
 800b05e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b060:	f7fc fd1e 	bl	8007aa0 <HAL_GetTick>
 800b064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b066:	e00a      	b.n	800b07e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b068:	f7fc fd1a 	bl	8007aa0 <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	f241 3288 	movw	r2, #5000	; 0x1388
 800b076:	4293      	cmp	r3, r2
 800b078:	d901      	bls.n	800b07e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e04f      	b.n	800b11e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b07e:	4b2b      	ldr	r3, [pc, #172]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	f003 020c 	and.w	r2, r3, #12
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d1eb      	bne.n	800b068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b090:	4b25      	ldr	r3, [pc, #148]	; (800b128 <HAL_RCC_ClockConfig+0x1b8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 030f 	and.w	r3, r3, #15
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d20c      	bcs.n	800b0b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b09e:	4b22      	ldr	r3, [pc, #136]	; (800b128 <HAL_RCC_ClockConfig+0x1b8>)
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	b2d2      	uxtb	r2, r2
 800b0a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0a6:	4b20      	ldr	r3, [pc, #128]	; (800b128 <HAL_RCC_ClockConfig+0x1b8>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 030f 	and.w	r3, r3, #15
 800b0ae:	683a      	ldr	r2, [r7, #0]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d001      	beq.n	800b0b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e032      	b.n	800b11e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d008      	beq.n	800b0d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b0c4:	4b19      	ldr	r3, [pc, #100]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	4916      	ldr	r1, [pc, #88]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0308 	and.w	r3, r3, #8
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d009      	beq.n	800b0f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b0e2:	4b12      	ldr	r3, [pc, #72]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	490e      	ldr	r1, [pc, #56]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b0f6:	f000 f821 	bl	800b13c <HAL_RCC_GetSysClockFreq>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	4b0b      	ldr	r3, [pc, #44]	; (800b12c <HAL_RCC_ClockConfig+0x1bc>)
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	091b      	lsrs	r3, r3, #4
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	490a      	ldr	r1, [pc, #40]	; (800b130 <HAL_RCC_ClockConfig+0x1c0>)
 800b108:	5ccb      	ldrb	r3, [r1, r3]
 800b10a:	fa22 f303 	lsr.w	r3, r2, r3
 800b10e:	4a09      	ldr	r2, [pc, #36]	; (800b134 <HAL_RCC_ClockConfig+0x1c4>)
 800b110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b112:	4b09      	ldr	r3, [pc, #36]	; (800b138 <HAL_RCC_ClockConfig+0x1c8>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4618      	mov	r0, r3
 800b118:	f7f7 fb92 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	40023c00 	.word	0x40023c00
 800b12c:	40023800 	.word	0x40023800
 800b130:	0801747c 	.word	0x0801747c
 800b134:	20000000 	.word	0x20000000
 800b138:	20000020 	.word	0x20000020

0800b13c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b13c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b140:	b090      	sub	sp, #64	; 0x40
 800b142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b144:	2300      	movs	r3, #0
 800b146:	637b      	str	r3, [r7, #52]	; 0x34
 800b148:	2300      	movs	r3, #0
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b14c:	2300      	movs	r3, #0
 800b14e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b154:	4b59      	ldr	r3, [pc, #356]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x180>)
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f003 030c 	and.w	r3, r3, #12
 800b15c:	2b08      	cmp	r3, #8
 800b15e:	d00d      	beq.n	800b17c <HAL_RCC_GetSysClockFreq+0x40>
 800b160:	2b08      	cmp	r3, #8
 800b162:	f200 80a1 	bhi.w	800b2a8 <HAL_RCC_GetSysClockFreq+0x16c>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d002      	beq.n	800b170 <HAL_RCC_GetSysClockFreq+0x34>
 800b16a:	2b04      	cmp	r3, #4
 800b16c:	d003      	beq.n	800b176 <HAL_RCC_GetSysClockFreq+0x3a>
 800b16e:	e09b      	b.n	800b2a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b170:	4b53      	ldr	r3, [pc, #332]	; (800b2c0 <HAL_RCC_GetSysClockFreq+0x184>)
 800b172:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800b174:	e09b      	b.n	800b2ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b176:	4b53      	ldr	r3, [pc, #332]	; (800b2c4 <HAL_RCC_GetSysClockFreq+0x188>)
 800b178:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b17a:	e098      	b.n	800b2ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b17c:	4b4f      	ldr	r3, [pc, #316]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x180>)
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b184:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b186:	4b4d      	ldr	r3, [pc, #308]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x180>)
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d028      	beq.n	800b1e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b192:	4b4a      	ldr	r3, [pc, #296]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x180>)
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	099b      	lsrs	r3, r3, #6
 800b198:	2200      	movs	r2, #0
 800b19a:	623b      	str	r3, [r7, #32]
 800b19c:	627a      	str	r2, [r7, #36]	; 0x24
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	4b47      	ldr	r3, [pc, #284]	; (800b2c4 <HAL_RCC_GetSysClockFreq+0x188>)
 800b1a8:	fb03 f201 	mul.w	r2, r3, r1
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	fb00 f303 	mul.w	r3, r0, r3
 800b1b2:	4413      	add	r3, r2
 800b1b4:	4a43      	ldr	r2, [pc, #268]	; (800b2c4 <HAL_RCC_GetSysClockFreq+0x188>)
 800b1b6:	fba0 1202 	umull	r1, r2, r0, r2
 800b1ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1bc:	460a      	mov	r2, r1
 800b1be:	62ba      	str	r2, [r7, #40]	; 0x28
 800b1c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1c2:	4413      	add	r3, r2
 800b1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	61bb      	str	r3, [r7, #24]
 800b1cc:	61fa      	str	r2, [r7, #28]
 800b1ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b1d6:	f7f5 fd0f 	bl	8000bf8 <__aeabi_uldivmod>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	460b      	mov	r3, r1
 800b1de:	4613      	mov	r3, r2
 800b1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1e2:	e053      	b.n	800b28c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1e4:	4b35      	ldr	r3, [pc, #212]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x180>)
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	099b      	lsrs	r3, r3, #6
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	613b      	str	r3, [r7, #16]
 800b1ee:	617a      	str	r2, [r7, #20]
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b1f6:	f04f 0b00 	mov.w	fp, #0
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	465b      	mov	r3, fp
 800b1fe:	f04f 0000 	mov.w	r0, #0
 800b202:	f04f 0100 	mov.w	r1, #0
 800b206:	0159      	lsls	r1, r3, #5
 800b208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b20c:	0150      	lsls	r0, r2, #5
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	ebb2 080a 	subs.w	r8, r2, sl
 800b216:	eb63 090b 	sbc.w	r9, r3, fp
 800b21a:	f04f 0200 	mov.w	r2, #0
 800b21e:	f04f 0300 	mov.w	r3, #0
 800b222:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b226:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b22a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b22e:	ebb2 0408 	subs.w	r4, r2, r8
 800b232:	eb63 0509 	sbc.w	r5, r3, r9
 800b236:	f04f 0200 	mov.w	r2, #0
 800b23a:	f04f 0300 	mov.w	r3, #0
 800b23e:	00eb      	lsls	r3, r5, #3
 800b240:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b244:	00e2      	lsls	r2, r4, #3
 800b246:	4614      	mov	r4, r2
 800b248:	461d      	mov	r5, r3
 800b24a:	eb14 030a 	adds.w	r3, r4, sl
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	eb45 030b 	adc.w	r3, r5, fp
 800b254:	607b      	str	r3, [r7, #4]
 800b256:	f04f 0200 	mov.w	r2, #0
 800b25a:	f04f 0300 	mov.w	r3, #0
 800b25e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b262:	4629      	mov	r1, r5
 800b264:	028b      	lsls	r3, r1, #10
 800b266:	4621      	mov	r1, r4
 800b268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b26c:	4621      	mov	r1, r4
 800b26e:	028a      	lsls	r2, r1, #10
 800b270:	4610      	mov	r0, r2
 800b272:	4619      	mov	r1, r3
 800b274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b276:	2200      	movs	r2, #0
 800b278:	60bb      	str	r3, [r7, #8]
 800b27a:	60fa      	str	r2, [r7, #12]
 800b27c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b280:	f7f5 fcba 	bl	8000bf8 <__aeabi_uldivmod>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	4613      	mov	r3, r2
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b28c:	4b0b      	ldr	r3, [pc, #44]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x180>)
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	0c1b      	lsrs	r3, r3, #16
 800b292:	f003 0303 	and.w	r3, r3, #3
 800b296:	3301      	adds	r3, #1
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800b29c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b2a6:	e002      	b.n	800b2ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b2a8:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <HAL_RCC_GetSysClockFreq+0x184>)
 800b2aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b2ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3740      	adds	r7, #64	; 0x40
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2ba:	bf00      	nop
 800b2bc:	40023800 	.word	0x40023800
 800b2c0:	00f42400 	.word	0x00f42400
 800b2c4:	00b71b00 	.word	0x00b71b00

0800b2c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2cc:	4b03      	ldr	r3, [pc, #12]	; (800b2dc <HAL_RCC_GetHCLKFreq+0x14>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	20000000 	.word	0x20000000

0800b2e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b2e4:	f7ff fff0 	bl	800b2c8 <HAL_RCC_GetHCLKFreq>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	4b05      	ldr	r3, [pc, #20]	; (800b300 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	0a9b      	lsrs	r3, r3, #10
 800b2f0:	f003 0307 	and.w	r3, r3, #7
 800b2f4:	4903      	ldr	r1, [pc, #12]	; (800b304 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2f6:	5ccb      	ldrb	r3, [r1, r3]
 800b2f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	40023800 	.word	0x40023800
 800b304:	0801748c 	.word	0x0801748c

0800b308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b30c:	f7ff ffdc 	bl	800b2c8 <HAL_RCC_GetHCLKFreq>
 800b310:	4602      	mov	r2, r0
 800b312:	4b05      	ldr	r3, [pc, #20]	; (800b328 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	0b5b      	lsrs	r3, r3, #13
 800b318:	f003 0307 	and.w	r3, r3, #7
 800b31c:	4903      	ldr	r1, [pc, #12]	; (800b32c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b31e:	5ccb      	ldrb	r3, [r1, r3]
 800b320:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b324:	4618      	mov	r0, r3
 800b326:	bd80      	pop	{r7, pc}
 800b328:	40023800 	.word	0x40023800
 800b32c:	0801748c 	.word	0x0801748c

0800b330 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	220f      	movs	r2, #15
 800b33e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b340:	4b12      	ldr	r3, [pc, #72]	; (800b38c <HAL_RCC_GetClockConfig+0x5c>)
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f003 0203 	and.w	r2, r3, #3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b34c:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <HAL_RCC_GetClockConfig+0x5c>)
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b358:	4b0c      	ldr	r3, [pc, #48]	; (800b38c <HAL_RCC_GetClockConfig+0x5c>)
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b364:	4b09      	ldr	r3, [pc, #36]	; (800b38c <HAL_RCC_GetClockConfig+0x5c>)
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	08db      	lsrs	r3, r3, #3
 800b36a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b372:	4b07      	ldr	r3, [pc, #28]	; (800b390 <HAL_RCC_GetClockConfig+0x60>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f003 020f 	and.w	r2, r3, #15
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	601a      	str	r2, [r3, #0]
}
 800b37e:	bf00      	nop
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	40023800 	.word	0x40023800
 800b390:	40023c00 	.word	0x40023c00

0800b394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e07b      	b.n	800b49e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d108      	bne.n	800b3c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3b6:	d009      	beq.n	800b3cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	61da      	str	r2, [r3, #28]
 800b3be:	e005      	b.n	800b3cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7f7 f920 	bl	800262c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b414:	431a      	orrs	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b41e:	431a      	orrs	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	431a      	orrs	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	431a      	orrs	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b43c:	431a      	orrs	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b446:	431a      	orrs	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a1b      	ldr	r3, [r3, #32]
 800b44c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b450:	ea42 0103 	orr.w	r1, r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	430a      	orrs	r2, r1
 800b462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	0c1b      	lsrs	r3, r3, #16
 800b46a:	f003 0104 	and.w	r1, r3, #4
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	f003 0210 	and.w	r2, r3, #16
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	430a      	orrs	r2, r1
 800b47c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	69da      	ldr	r2, [r3, #28]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b48c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b088      	sub	sp, #32
 800b4aa:	af02      	add	r7, sp, #8
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	603b      	str	r3, [r7, #0]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4c2:	d112      	bne.n	800b4ea <HAL_SPI_Receive+0x44>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10e      	bne.n	800b4ea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2204      	movs	r2, #4
 800b4d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b4d4:	88fa      	ldrh	r2, [r7, #6]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 f8f1 	bl	800b6c8 <HAL_SPI_TransmitReceive>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	e0ea      	b.n	800b6c0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d101      	bne.n	800b4f8 <HAL_SPI_Receive+0x52>
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	e0e3      	b.n	800b6c0 <HAL_SPI_Receive+0x21a>
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b500:	f7fc face 	bl	8007aa0 <HAL_GetTick>
 800b504:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d002      	beq.n	800b518 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b512:	2302      	movs	r3, #2
 800b514:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b516:	e0ca      	b.n	800b6ae <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <HAL_SPI_Receive+0x7e>
 800b51e:	88fb      	ldrh	r3, [r7, #6]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d102      	bne.n	800b52a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b528:	e0c1      	b.n	800b6ae <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2204      	movs	r2, #4
 800b52e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	88fa      	ldrh	r2, [r7, #6]
 800b542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	88fa      	ldrh	r2, [r7, #6]
 800b548:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b570:	d10f      	bne.n	800b592 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b580:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b590:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b59c:	2b40      	cmp	r3, #64	; 0x40
 800b59e:	d007      	beq.n	800b5b0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d162      	bne.n	800b67e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b5b8:	e02e      	b.n	800b618 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f003 0301 	and.w	r3, r3, #1
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d115      	bne.n	800b5f4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f103 020c 	add.w	r2, r3, #12
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d4:	7812      	ldrb	r2, [r2, #0]
 800b5d6:	b2d2      	uxtb	r2, r2
 800b5d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5de:	1c5a      	adds	r2, r3, #1
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5f2:	e011      	b.n	800b618 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5f4:	f7fc fa54 	bl	8007aa0 <HAL_GetTick>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d803      	bhi.n	800b60c <HAL_SPI_Receive+0x166>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b60a:	d102      	bne.n	800b612 <HAL_SPI_Receive+0x16c>
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d102      	bne.n	800b618 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b616:	e04a      	b.n	800b6ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1cb      	bne.n	800b5ba <HAL_SPI_Receive+0x114>
 800b622:	e031      	b.n	800b688 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f003 0301 	and.w	r3, r3, #1
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d113      	bne.n	800b65a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68da      	ldr	r2, [r3, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63c:	b292      	uxth	r2, r2
 800b63e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b644:	1c9a      	adds	r2, r3, #2
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b64e:	b29b      	uxth	r3, r3
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b658:	e011      	b.n	800b67e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b65a:	f7fc fa21 	bl	8007aa0 <HAL_GetTick>
 800b65e:	4602      	mov	r2, r0
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d803      	bhi.n	800b672 <HAL_SPI_Receive+0x1cc>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b670:	d102      	bne.n	800b678 <HAL_SPI_Receive+0x1d2>
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d102      	bne.n	800b67e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b678:	2303      	movs	r3, #3
 800b67a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b67c:	e017      	b.n	800b6ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b682:	b29b      	uxth	r3, r3
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1cd      	bne.n	800b624 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f000 fb57 	bl	800bd40 <SPI_EndRxTransaction>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2220      	movs	r2, #32
 800b69c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	75fb      	strb	r3, [r7, #23]
 800b6aa:	e000      	b.n	800b6ae <HAL_SPI_Receive+0x208>
  }

error :
 800b6ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08c      	sub	sp, #48	; 0x30
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d101      	bne.n	800b6ee <HAL_SPI_TransmitReceive+0x26>
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	e18a      	b.n	800ba04 <HAL_SPI_TransmitReceive+0x33c>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6f6:	f7fc f9d3 	bl	8007aa0 <HAL_GetTick>
 800b6fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b70c:	887b      	ldrh	r3, [r7, #2]
 800b70e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b714:	2b01      	cmp	r3, #1
 800b716:	d00f      	beq.n	800b738 <HAL_SPI_TransmitReceive+0x70>
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b71e:	d107      	bne.n	800b730 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d103      	bne.n	800b730 <HAL_SPI_TransmitReceive+0x68>
 800b728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d003      	beq.n	800b738 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b730:	2302      	movs	r3, #2
 800b732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b736:	e15b      	b.n	800b9f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d005      	beq.n	800b74a <HAL_SPI_TransmitReceive+0x82>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <HAL_SPI_TransmitReceive+0x82>
 800b744:	887b      	ldrh	r3, [r7, #2]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d103      	bne.n	800b752 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b750:	e14e      	b.n	800b9f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b04      	cmp	r3, #4
 800b75c:	d003      	beq.n	800b766 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2205      	movs	r2, #5
 800b762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	887a      	ldrh	r2, [r7, #2]
 800b776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	887a      	ldrh	r2, [r7, #2]
 800b77c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	887a      	ldrh	r2, [r7, #2]
 800b788:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	887a      	ldrh	r2, [r7, #2]
 800b78e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a6:	2b40      	cmp	r3, #64	; 0x40
 800b7a8:	d007      	beq.n	800b7ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7c2:	d178      	bne.n	800b8b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <HAL_SPI_TransmitReceive+0x10a>
 800b7cc:	8b7b      	ldrh	r3, [r7, #26]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d166      	bne.n	800b8a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d6:	881a      	ldrh	r2, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e2:	1c9a      	adds	r2, r3, #2
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7f6:	e053      	b.n	800b8a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f003 0302 	and.w	r3, r3, #2
 800b802:	2b02      	cmp	r3, #2
 800b804:	d11b      	bne.n	800b83e <HAL_SPI_TransmitReceive+0x176>
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d016      	beq.n	800b83e <HAL_SPI_TransmitReceive+0x176>
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	2b01      	cmp	r3, #1
 800b814:	d113      	bne.n	800b83e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b81a:	881a      	ldrh	r2, [r3, #0]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b826:	1c9a      	adds	r2, r3, #2
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b830:	b29b      	uxth	r3, r3
 800b832:	3b01      	subs	r3, #1
 800b834:	b29a      	uxth	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d119      	bne.n	800b880 <HAL_SPI_TransmitReceive+0x1b8>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b850:	b29b      	uxth	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d014      	beq.n	800b880 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68da      	ldr	r2, [r3, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b860:	b292      	uxth	r2, r2
 800b862:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b868:	1c9a      	adds	r2, r3, #2
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b872:	b29b      	uxth	r3, r3
 800b874:	3b01      	subs	r3, #1
 800b876:	b29a      	uxth	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b87c:	2301      	movs	r3, #1
 800b87e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b880:	f7fc f90e 	bl	8007aa0 <HAL_GetTick>
 800b884:	4602      	mov	r2, r0
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d807      	bhi.n	800b8a0 <HAL_SPI_TransmitReceive+0x1d8>
 800b890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b896:	d003      	beq.n	800b8a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b898:	2303      	movs	r3, #3
 800b89a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b89e:	e0a7      	b.n	800b9f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1a6      	bne.n	800b7f8 <HAL_SPI_TransmitReceive+0x130>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1a1      	bne.n	800b7f8 <HAL_SPI_TransmitReceive+0x130>
 800b8b4:	e07c      	b.n	800b9b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <HAL_SPI_TransmitReceive+0x1fc>
 800b8be:	8b7b      	ldrh	r3, [r7, #26]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d16b      	bne.n	800b99c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	330c      	adds	r3, #12
 800b8ce:	7812      	ldrb	r2, [r2, #0]
 800b8d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8ea:	e057      	b.n	800b99c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d11c      	bne.n	800b934 <HAL_SPI_TransmitReceive+0x26c>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	2b00      	cmp	r3, #0
 800b902:	d017      	beq.n	800b934 <HAL_SPI_TransmitReceive+0x26c>
 800b904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b906:	2b01      	cmp	r3, #1
 800b908:	d114      	bne.n	800b934 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	330c      	adds	r3, #12
 800b914:	7812      	ldrb	r2, [r2, #0]
 800b916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b926:	b29b      	uxth	r3, r3
 800b928:	3b01      	subs	r3, #1
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d119      	bne.n	800b976 <HAL_SPI_TransmitReceive+0x2ae>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b946:	b29b      	uxth	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d014      	beq.n	800b976 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68da      	ldr	r2, [r3, #12]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b956:	b2d2      	uxtb	r2, r2
 800b958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b968:	b29b      	uxth	r3, r3
 800b96a:	3b01      	subs	r3, #1
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b972:	2301      	movs	r3, #1
 800b974:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b976:	f7fc f893 	bl	8007aa0 <HAL_GetTick>
 800b97a:	4602      	mov	r2, r0
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b982:	429a      	cmp	r2, r3
 800b984:	d803      	bhi.n	800b98e <HAL_SPI_TransmitReceive+0x2c6>
 800b986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98c:	d102      	bne.n	800b994 <HAL_SPI_TransmitReceive+0x2cc>
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	2b00      	cmp	r3, #0
 800b992:	d103      	bne.n	800b99c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b994:	2303      	movs	r3, #3
 800b996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b99a:	e029      	b.n	800b9f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1a2      	bne.n	800b8ec <HAL_SPI_TransmitReceive+0x224>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d19d      	bne.n	800b8ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 fa29 	bl	800be0c <SPI_EndRxTxTransaction>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d006      	beq.n	800b9ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b9cc:	e010      	b.n	800b9f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10b      	bne.n	800b9ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	617b      	str	r3, [r7, #20]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	617b      	str	r3, [r7, #20]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	617b      	str	r3, [r7, #20]
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	e000      	b.n	800b9f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b9ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ba00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3730      	adds	r7, #48	; 0x30
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10e      	bne.n	800ba4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d009      	beq.n	800ba4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	4798      	blx	r3
    return;
 800ba4a:	e0ce      	b.n	800bbea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	f003 0302 	and.w	r3, r3, #2
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d009      	beq.n	800ba6a <HAL_SPI_IRQHandler+0x5e>
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d004      	beq.n	800ba6a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	4798      	blx	r3
    return;
 800ba68:	e0bf      	b.n	800bbea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	f003 0320 	and.w	r3, r3, #32
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10a      	bne.n	800ba8a <HAL_SPI_IRQHandler+0x7e>
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d105      	bne.n	800ba8a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 80b0 	beq.w	800bbea <HAL_SPI_IRQHandler+0x1de>
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	f003 0320 	and.w	r3, r3, #32
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 80aa 	beq.w	800bbea <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d023      	beq.n	800bae8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b03      	cmp	r3, #3
 800baaa:	d011      	beq.n	800bad0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab0:	f043 0204 	orr.w	r2, r3, #4
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bab8:	2300      	movs	r3, #0
 800baba:	617b      	str	r3, [r7, #20]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	617b      	str	r3, [r7, #20]
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	e00b      	b.n	800bae8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bad0:	2300      	movs	r3, #0
 800bad2:	613b      	str	r3, [r7, #16]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	613b      	str	r3, [r7, #16]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	613b      	str	r3, [r7, #16]
 800bae4:	693b      	ldr	r3, [r7, #16]
        return;
 800bae6:	e080      	b.n	800bbea <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	f003 0320 	and.w	r3, r3, #32
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d014      	beq.n	800bb1c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baf6:	f043 0201 	orr.w	r2, r3, #1
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bafe:	2300      	movs	r3, #0
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00c      	beq.n	800bb40 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2a:	f043 0208 	orr.w	r2, r3, #8
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bb32:	2300      	movs	r3, #0
 800bb34:	60bb      	str	r3, [r7, #8]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	60bb      	str	r3, [r7, #8]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d04f      	beq.n	800bbe8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb56:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	f003 0302 	and.w	r3, r3, #2
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d104      	bne.n	800bb74 <HAL_SPI_IRQHandler+0x168>
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d034      	beq.n	800bbde <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f022 0203 	bic.w	r2, r2, #3
 800bb82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d011      	beq.n	800bbb0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb90:	4a17      	ldr	r2, [pc, #92]	; (800bbf0 <HAL_SPI_IRQHandler+0x1e4>)
 800bb92:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fd f889 	bl	8008cb0 <HAL_DMA_Abort_IT>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d005      	beq.n	800bbb0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d016      	beq.n	800bbe6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbbc:	4a0c      	ldr	r2, [pc, #48]	; (800bbf0 <HAL_SPI_IRQHandler+0x1e4>)
 800bbbe:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fd f873 	bl	8008cb0 <HAL_DMA_Abort_IT>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00a      	beq.n	800bbe6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bbdc:	e003      	b.n	800bbe6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f808 	bl	800bbf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bbe4:	e000      	b.n	800bbe8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800bbe6:	bf00      	nop
    return;
 800bbe8:	bf00      	nop
  }
}
 800bbea:	3720      	adds	r7, #32
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	0800bc09 	.word	0x0800bc09

0800bbf4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f7ff ffe6 	bl	800bbf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	603b      	str	r3, [r7, #0]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc40:	f7fb ff2e 	bl	8007aa0 <HAL_GetTick>
 800bc44:	4602      	mov	r2, r0
 800bc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc48:	1a9b      	subs	r3, r3, r2
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bc50:	f7fb ff26 	bl	8007aa0 <HAL_GetTick>
 800bc54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc56:	4b39      	ldr	r3, [pc, #228]	; (800bd3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	015b      	lsls	r3, r3, #5
 800bc5c:	0d1b      	lsrs	r3, r3, #20
 800bc5e:	69fa      	ldr	r2, [r7, #28]
 800bc60:	fb02 f303 	mul.w	r3, r2, r3
 800bc64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc66:	e054      	b.n	800bd12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6e:	d050      	beq.n	800bd12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc70:	f7fb ff16 	bl	8007aa0 <HAL_GetTick>
 800bc74:	4602      	mov	r2, r0
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	69fa      	ldr	r2, [r7, #28]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d902      	bls.n	800bc86 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d13d      	bne.n	800bd02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc9e:	d111      	bne.n	800bcc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bca8:	d004      	beq.n	800bcb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcb2:	d107      	bne.n	800bcc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bccc:	d10f      	bne.n	800bcee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bcec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e017      	b.n	800bd32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	689a      	ldr	r2, [r3, #8]
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	bf0c      	ite	eq
 800bd22:	2301      	moveq	r3, #1
 800bd24:	2300      	movne	r3, #0
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	461a      	mov	r2, r3
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d19b      	bne.n	800bc68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3720      	adds	r7, #32
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20000000 	.word	0x20000000

0800bd40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd54:	d111      	bne.n	800bd7a <SPI_EndRxTransaction+0x3a>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd5e:	d004      	beq.n	800bd6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd68:	d107      	bne.n	800bd7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd82:	d12a      	bne.n	800bdda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd8c:	d012      	beq.n	800bdb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	2200      	movs	r2, #0
 800bd96:	2180      	movs	r1, #128	; 0x80
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7ff ff49 	bl	800bc30 <SPI_WaitFlagStateUntilTimeout>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d02d      	beq.n	800be00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda8:	f043 0220 	orr.w	r2, r3, #32
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e026      	b.n	800be02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f7ff ff36 	bl	800bc30 <SPI_WaitFlagStateUntilTimeout>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01a      	beq.n	800be00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdce:	f043 0220 	orr.w	r2, r3, #32
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e013      	b.n	800be02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2200      	movs	r2, #0
 800bde2:	2101      	movs	r1, #1
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7ff ff23 	bl	800bc30 <SPI_WaitFlagStateUntilTimeout>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d007      	beq.n	800be00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf4:	f043 0220 	orr.w	r2, r3, #32
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e000      	b.n	800be02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
	...

0800be0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b088      	sub	sp, #32
 800be10:	af02      	add	r7, sp, #8
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800be18:	4b1b      	ldr	r3, [pc, #108]	; (800be88 <SPI_EndRxTxTransaction+0x7c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a1b      	ldr	r2, [pc, #108]	; (800be8c <SPI_EndRxTxTransaction+0x80>)
 800be1e:	fba2 2303 	umull	r2, r3, r2, r3
 800be22:	0d5b      	lsrs	r3, r3, #21
 800be24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be28:	fb02 f303 	mul.w	r3, r2, r3
 800be2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be36:	d112      	bne.n	800be5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	2200      	movs	r2, #0
 800be40:	2180      	movs	r1, #128	; 0x80
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff fef4 	bl	800bc30 <SPI_WaitFlagStateUntilTimeout>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d016      	beq.n	800be7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be52:	f043 0220 	orr.w	r2, r3, #32
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e00f      	b.n	800be7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00a      	beq.n	800be7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	3b01      	subs	r3, #1
 800be68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be74:	2b80      	cmp	r3, #128	; 0x80
 800be76:	d0f2      	beq.n	800be5e <SPI_EndRxTxTransaction+0x52>
 800be78:	e000      	b.n	800be7c <SPI_EndRxTxTransaction+0x70>
        break;
 800be7a:	bf00      	nop
  }

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20000000 	.word	0x20000000
 800be8c:	165e9f81 	.word	0x165e9f81

0800be90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d101      	bne.n	800bea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	e041      	b.n	800bf26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d106      	bne.n	800bebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7f7 f8ca 	bl	8003050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2202      	movs	r2, #2
 800bec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3304      	adds	r3, #4
 800becc:	4619      	mov	r1, r3
 800bece:	4610      	mov	r0, r2
 800bed0:	f000 fd82 	bl	800c9d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
	...

0800bf30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d001      	beq.n	800bf48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e046      	b.n	800bfd6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a23      	ldr	r2, [pc, #140]	; (800bfe4 <HAL_TIM_Base_Start+0xb4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d022      	beq.n	800bfa0 <HAL_TIM_Base_Start+0x70>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf62:	d01d      	beq.n	800bfa0 <HAL_TIM_Base_Start+0x70>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a1f      	ldr	r2, [pc, #124]	; (800bfe8 <HAL_TIM_Base_Start+0xb8>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d018      	beq.n	800bfa0 <HAL_TIM_Base_Start+0x70>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a1e      	ldr	r2, [pc, #120]	; (800bfec <HAL_TIM_Base_Start+0xbc>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d013      	beq.n	800bfa0 <HAL_TIM_Base_Start+0x70>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a1c      	ldr	r2, [pc, #112]	; (800bff0 <HAL_TIM_Base_Start+0xc0>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d00e      	beq.n	800bfa0 <HAL_TIM_Base_Start+0x70>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a1b      	ldr	r2, [pc, #108]	; (800bff4 <HAL_TIM_Base_Start+0xc4>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d009      	beq.n	800bfa0 <HAL_TIM_Base_Start+0x70>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a19      	ldr	r2, [pc, #100]	; (800bff8 <HAL_TIM_Base_Start+0xc8>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d004      	beq.n	800bfa0 <HAL_TIM_Base_Start+0x70>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a18      	ldr	r2, [pc, #96]	; (800bffc <HAL_TIM_Base_Start+0xcc>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d111      	bne.n	800bfc4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	f003 0307 	and.w	r3, r3, #7
 800bfaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b06      	cmp	r3, #6
 800bfb0:	d010      	beq.n	800bfd4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f042 0201 	orr.w	r2, r2, #1
 800bfc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfc2:	e007      	b.n	800bfd4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f042 0201 	orr.w	r2, r2, #1
 800bfd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	40010000 	.word	0x40010000
 800bfe8:	40000400 	.word	0x40000400
 800bfec:	40000800 	.word	0x40000800
 800bff0:	40000c00 	.word	0x40000c00
 800bff4:	40010400 	.word	0x40010400
 800bff8:	40014000 	.word	0x40014000
 800bffc:	40001800 	.word	0x40001800

0800c000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b01      	cmp	r3, #1
 800c012:	d001      	beq.n	800c018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e04e      	b.n	800c0b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2202      	movs	r2, #2
 800c01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68da      	ldr	r2, [r3, #12]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f042 0201 	orr.w	r2, r2, #1
 800c02e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a23      	ldr	r2, [pc, #140]	; (800c0c4 <HAL_TIM_Base_Start_IT+0xc4>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d022      	beq.n	800c080 <HAL_TIM_Base_Start_IT+0x80>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c042:	d01d      	beq.n	800c080 <HAL_TIM_Base_Start_IT+0x80>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a1f      	ldr	r2, [pc, #124]	; (800c0c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d018      	beq.n	800c080 <HAL_TIM_Base_Start_IT+0x80>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a1e      	ldr	r2, [pc, #120]	; (800c0cc <HAL_TIM_Base_Start_IT+0xcc>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d013      	beq.n	800c080 <HAL_TIM_Base_Start_IT+0x80>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a1c      	ldr	r2, [pc, #112]	; (800c0d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d00e      	beq.n	800c080 <HAL_TIM_Base_Start_IT+0x80>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a1b      	ldr	r2, [pc, #108]	; (800c0d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d009      	beq.n	800c080 <HAL_TIM_Base_Start_IT+0x80>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a19      	ldr	r2, [pc, #100]	; (800c0d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d004      	beq.n	800c080 <HAL_TIM_Base_Start_IT+0x80>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a18      	ldr	r2, [pc, #96]	; (800c0dc <HAL_TIM_Base_Start_IT+0xdc>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d111      	bne.n	800c0a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	f003 0307 	and.w	r3, r3, #7
 800c08a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2b06      	cmp	r3, #6
 800c090:	d010      	beq.n	800c0b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f042 0201 	orr.w	r2, r2, #1
 800c0a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0a2:	e007      	b.n	800c0b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f042 0201 	orr.w	r2, r2, #1
 800c0b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	40010000 	.word	0x40010000
 800c0c8:	40000400 	.word	0x40000400
 800c0cc:	40000800 	.word	0x40000800
 800c0d0:	40000c00 	.word	0x40000c00
 800c0d4:	40010400 	.word	0x40010400
 800c0d8:	40014000 	.word	0x40014000
 800c0dc:	40001800 	.word	0x40001800

0800c0e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e041      	b.n	800c176 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d106      	bne.n	800c10c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7f6 ff2c 	bl	8002f64 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2202      	movs	r2, #2
 800c110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3304      	adds	r3, #4
 800c11c:	4619      	mov	r1, r3
 800c11e:	4610      	mov	r0, r2
 800c120:	f000 fc5a 	bl	800c9d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	e041      	b.n	800c214 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d106      	bne.n	800c1aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7f6 ff1b 	bl	8002fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	4610      	mov	r0, r2
 800c1be:	f000 fc0b 	bl	800c9d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d109      	bne.n	800c240 <HAL_TIM_PWM_Start+0x24>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c232:	b2db      	uxtb	r3, r3
 800c234:	2b01      	cmp	r3, #1
 800c236:	bf14      	ite	ne
 800c238:	2301      	movne	r3, #1
 800c23a:	2300      	moveq	r3, #0
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	e022      	b.n	800c286 <HAL_TIM_PWM_Start+0x6a>
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b04      	cmp	r3, #4
 800c244:	d109      	bne.n	800c25a <HAL_TIM_PWM_Start+0x3e>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b01      	cmp	r3, #1
 800c250:	bf14      	ite	ne
 800c252:	2301      	movne	r3, #1
 800c254:	2300      	moveq	r3, #0
 800c256:	b2db      	uxtb	r3, r3
 800c258:	e015      	b.n	800c286 <HAL_TIM_PWM_Start+0x6a>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	2b08      	cmp	r3, #8
 800c25e:	d109      	bne.n	800c274 <HAL_TIM_PWM_Start+0x58>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c266:	b2db      	uxtb	r3, r3
 800c268:	2b01      	cmp	r3, #1
 800c26a:	bf14      	ite	ne
 800c26c:	2301      	movne	r3, #1
 800c26e:	2300      	moveq	r3, #0
 800c270:	b2db      	uxtb	r3, r3
 800c272:	e008      	b.n	800c286 <HAL_TIM_PWM_Start+0x6a>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	bf14      	ite	ne
 800c280:	2301      	movne	r3, #1
 800c282:	2300      	moveq	r3, #0
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	e07c      	b.n	800c388 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d104      	bne.n	800c29e <HAL_TIM_PWM_Start+0x82>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2202      	movs	r2, #2
 800c298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c29c:	e013      	b.n	800c2c6 <HAL_TIM_PWM_Start+0xaa>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b04      	cmp	r3, #4
 800c2a2:	d104      	bne.n	800c2ae <HAL_TIM_PWM_Start+0x92>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2ac:	e00b      	b.n	800c2c6 <HAL_TIM_PWM_Start+0xaa>
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2b08      	cmp	r3, #8
 800c2b2:	d104      	bne.n	800c2be <HAL_TIM_PWM_Start+0xa2>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2202      	movs	r2, #2
 800c2b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2bc:	e003      	b.n	800c2c6 <HAL_TIM_PWM_Start+0xaa>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 fe6c 	bl	800cfac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a2d      	ldr	r2, [pc, #180]	; (800c390 <HAL_TIM_PWM_Start+0x174>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d004      	beq.n	800c2e8 <HAL_TIM_PWM_Start+0xcc>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a2c      	ldr	r2, [pc, #176]	; (800c394 <HAL_TIM_PWM_Start+0x178>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d101      	bne.n	800c2ec <HAL_TIM_PWM_Start+0xd0>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e000      	b.n	800c2ee <HAL_TIM_PWM_Start+0xd2>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d007      	beq.n	800c302 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a22      	ldr	r2, [pc, #136]	; (800c390 <HAL_TIM_PWM_Start+0x174>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d022      	beq.n	800c352 <HAL_TIM_PWM_Start+0x136>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c314:	d01d      	beq.n	800c352 <HAL_TIM_PWM_Start+0x136>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a1f      	ldr	r2, [pc, #124]	; (800c398 <HAL_TIM_PWM_Start+0x17c>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d018      	beq.n	800c352 <HAL_TIM_PWM_Start+0x136>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a1d      	ldr	r2, [pc, #116]	; (800c39c <HAL_TIM_PWM_Start+0x180>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d013      	beq.n	800c352 <HAL_TIM_PWM_Start+0x136>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a1c      	ldr	r2, [pc, #112]	; (800c3a0 <HAL_TIM_PWM_Start+0x184>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d00e      	beq.n	800c352 <HAL_TIM_PWM_Start+0x136>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a16      	ldr	r2, [pc, #88]	; (800c394 <HAL_TIM_PWM_Start+0x178>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d009      	beq.n	800c352 <HAL_TIM_PWM_Start+0x136>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a18      	ldr	r2, [pc, #96]	; (800c3a4 <HAL_TIM_PWM_Start+0x188>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d004      	beq.n	800c352 <HAL_TIM_PWM_Start+0x136>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a16      	ldr	r2, [pc, #88]	; (800c3a8 <HAL_TIM_PWM_Start+0x18c>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d111      	bne.n	800c376 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	f003 0307 	and.w	r3, r3, #7
 800c35c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2b06      	cmp	r3, #6
 800c362:	d010      	beq.n	800c386 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f042 0201 	orr.w	r2, r2, #1
 800c372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c374:	e007      	b.n	800c386 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f042 0201 	orr.w	r2, r2, #1
 800c384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c386:	2300      	movs	r3, #0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	40010000 	.word	0x40010000
 800c394:	40010400 	.word	0x40010400
 800c398:	40000400 	.word	0x40000400
 800c39c:	40000800 	.word	0x40000800
 800c3a0:	40000c00 	.word	0x40000c00
 800c3a4:	40014000 	.word	0x40014000
 800c3a8:	40001800 	.word	0x40001800

0800c3ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	f003 0302 	and.w	r3, r3, #2
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d122      	bne.n	800c408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	f003 0302 	and.w	r3, r3, #2
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d11b      	bne.n	800c408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f06f 0202 	mvn.w	r2, #2
 800c3d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	f003 0303 	and.w	r3, r3, #3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 fad3 	bl	800c99a <HAL_TIM_IC_CaptureCallback>
 800c3f4:	e005      	b.n	800c402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fac5 	bl	800c986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fad6 	bl	800c9ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	f003 0304 	and.w	r3, r3, #4
 800c412:	2b04      	cmp	r3, #4
 800c414:	d122      	bne.n	800c45c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	f003 0304 	and.w	r3, r3, #4
 800c420:	2b04      	cmp	r3, #4
 800c422:	d11b      	bne.n	800c45c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f06f 0204 	mvn.w	r2, #4
 800c42c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2202      	movs	r2, #2
 800c432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 faa9 	bl	800c99a <HAL_TIM_IC_CaptureCallback>
 800c448:	e005      	b.n	800c456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fa9b 	bl	800c986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 faac 	bl	800c9ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	f003 0308 	and.w	r3, r3, #8
 800c466:	2b08      	cmp	r3, #8
 800c468:	d122      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f003 0308 	and.w	r3, r3, #8
 800c474:	2b08      	cmp	r3, #8
 800c476:	d11b      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f06f 0208 	mvn.w	r2, #8
 800c480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2204      	movs	r2, #4
 800c486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	f003 0303 	and.w	r3, r3, #3
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa7f 	bl	800c99a <HAL_TIM_IC_CaptureCallback>
 800c49c:	e005      	b.n	800c4aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fa71 	bl	800c986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fa82 	bl	800c9ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	f003 0310 	and.w	r3, r3, #16
 800c4ba:	2b10      	cmp	r3, #16
 800c4bc:	d122      	bne.n	800c504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f003 0310 	and.w	r3, r3, #16
 800c4c8:	2b10      	cmp	r3, #16
 800c4ca:	d11b      	bne.n	800c504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f06f 0210 	mvn.w	r2, #16
 800c4d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2208      	movs	r2, #8
 800c4da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	69db      	ldr	r3, [r3, #28]
 800c4e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d003      	beq.n	800c4f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fa55 	bl	800c99a <HAL_TIM_IC_CaptureCallback>
 800c4f0:	e005      	b.n	800c4fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fa47 	bl	800c986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fa58 	bl	800c9ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	f003 0301 	and.w	r3, r3, #1
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d10e      	bne.n	800c530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d107      	bne.n	800c530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f06f 0201 	mvn.w	r2, #1
 800c528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7f6 f830 	bl	8002590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c53a:	2b80      	cmp	r3, #128	; 0x80
 800c53c:	d10e      	bne.n	800c55c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c548:	2b80      	cmp	r3, #128	; 0x80
 800c54a:	d107      	bne.n	800c55c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fe26 	bl	800d1a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c566:	2b40      	cmp	r3, #64	; 0x40
 800c568:	d10e      	bne.n	800c588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c574:	2b40      	cmp	r3, #64	; 0x40
 800c576:	d107      	bne.n	800c588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fa1d 	bl	800c9c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	f003 0320 	and.w	r3, r3, #32
 800c592:	2b20      	cmp	r3, #32
 800c594:	d10e      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	f003 0320 	and.w	r3, r3, #32
 800c5a0:	2b20      	cmp	r3, #32
 800c5a2:	d107      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f06f 0220 	mvn.w	r2, #32
 800c5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fdf0 	bl	800d194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5b4:	bf00      	nop
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d101      	bne.n	800c5da <HAL_TIM_OC_ConfigChannel+0x1e>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	e048      	b.n	800c66c <HAL_TIM_OC_ConfigChannel+0xb0>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b0c      	cmp	r3, #12
 800c5e6:	d839      	bhi.n	800c65c <HAL_TIM_OC_ConfigChannel+0xa0>
 800c5e8:	a201      	add	r2, pc, #4	; (adr r2, 800c5f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800c5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ee:	bf00      	nop
 800c5f0:	0800c625 	.word	0x0800c625
 800c5f4:	0800c65d 	.word	0x0800c65d
 800c5f8:	0800c65d 	.word	0x0800c65d
 800c5fc:	0800c65d 	.word	0x0800c65d
 800c600:	0800c633 	.word	0x0800c633
 800c604:	0800c65d 	.word	0x0800c65d
 800c608:	0800c65d 	.word	0x0800c65d
 800c60c:	0800c65d 	.word	0x0800c65d
 800c610:	0800c641 	.word	0x0800c641
 800c614:	0800c65d 	.word	0x0800c65d
 800c618:	0800c65d 	.word	0x0800c65d
 800c61c:	0800c65d 	.word	0x0800c65d
 800c620:	0800c64f 	.word	0x0800c64f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68b9      	ldr	r1, [r7, #8]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f000 fa74 	bl	800cb18 <TIM_OC1_SetConfig>
      break;
 800c630:	e017      	b.n	800c662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68b9      	ldr	r1, [r7, #8]
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fadd 	bl	800cbf8 <TIM_OC2_SetConfig>
      break;
 800c63e:	e010      	b.n	800c662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68b9      	ldr	r1, [r7, #8]
 800c646:	4618      	mov	r0, r3
 800c648:	f000 fb4c 	bl	800cce4 <TIM_OC3_SetConfig>
      break;
 800c64c:	e009      	b.n	800c662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	4618      	mov	r0, r3
 800c656:	f000 fbb9 	bl	800cdcc <TIM_OC4_SetConfig>
      break;
 800c65a:	e002      	b.n	800c662 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	75fb      	strb	r3, [r7, #23]
      break;
 800c660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3718      	adds	r7, #24
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c680:	2300      	movs	r3, #0
 800c682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d101      	bne.n	800c692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c68e:	2302      	movs	r3, #2
 800c690:	e0ae      	b.n	800c7f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2201      	movs	r2, #1
 800c696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b0c      	cmp	r3, #12
 800c69e:	f200 809f 	bhi.w	800c7e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c6a2:	a201      	add	r2, pc, #4	; (adr r2, 800c6a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a8:	0800c6dd 	.word	0x0800c6dd
 800c6ac:	0800c7e1 	.word	0x0800c7e1
 800c6b0:	0800c7e1 	.word	0x0800c7e1
 800c6b4:	0800c7e1 	.word	0x0800c7e1
 800c6b8:	0800c71d 	.word	0x0800c71d
 800c6bc:	0800c7e1 	.word	0x0800c7e1
 800c6c0:	0800c7e1 	.word	0x0800c7e1
 800c6c4:	0800c7e1 	.word	0x0800c7e1
 800c6c8:	0800c75f 	.word	0x0800c75f
 800c6cc:	0800c7e1 	.word	0x0800c7e1
 800c6d0:	0800c7e1 	.word	0x0800c7e1
 800c6d4:	0800c7e1 	.word	0x0800c7e1
 800c6d8:	0800c79f 	.word	0x0800c79f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68b9      	ldr	r1, [r7, #8]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f000 fa18 	bl	800cb18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	699a      	ldr	r2, [r3, #24]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f042 0208 	orr.w	r2, r2, #8
 800c6f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	699a      	ldr	r2, [r3, #24]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f022 0204 	bic.w	r2, r2, #4
 800c706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6999      	ldr	r1, [r3, #24]
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	691a      	ldr	r2, [r3, #16]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	430a      	orrs	r2, r1
 800c718:	619a      	str	r2, [r3, #24]
      break;
 800c71a:	e064      	b.n	800c7e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68b9      	ldr	r1, [r7, #8]
 800c722:	4618      	mov	r0, r3
 800c724:	f000 fa68 	bl	800cbf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	699a      	ldr	r2, [r3, #24]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	699a      	ldr	r2, [r3, #24]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	6999      	ldr	r1, [r3, #24]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	021a      	lsls	r2, r3, #8
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	430a      	orrs	r2, r1
 800c75a:	619a      	str	r2, [r3, #24]
      break;
 800c75c:	e043      	b.n	800c7e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68b9      	ldr	r1, [r7, #8]
 800c764:	4618      	mov	r0, r3
 800c766:	f000 fabd 	bl	800cce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	69da      	ldr	r2, [r3, #28]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f042 0208 	orr.w	r2, r2, #8
 800c778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	69da      	ldr	r2, [r3, #28]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f022 0204 	bic.w	r2, r2, #4
 800c788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	69d9      	ldr	r1, [r3, #28]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	691a      	ldr	r2, [r3, #16]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	430a      	orrs	r2, r1
 800c79a:	61da      	str	r2, [r3, #28]
      break;
 800c79c:	e023      	b.n	800c7e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 fb11 	bl	800cdcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	69da      	ldr	r2, [r3, #28]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	69da      	ldr	r2, [r3, #28]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	69d9      	ldr	r1, [r3, #28]
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	021a      	lsls	r2, r3, #8
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	430a      	orrs	r2, r1
 800c7dc:	61da      	str	r2, [r3, #28]
      break;
 800c7de:	e002      	b.n	800c7e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c7e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d101      	bne.n	800c814 <HAL_TIM_ConfigClockSource+0x1c>
 800c810:	2302      	movs	r3, #2
 800c812:	e0b4      	b.n	800c97e <HAL_TIM_ConfigClockSource+0x186>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2202      	movs	r2, #2
 800c820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c83a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c84c:	d03e      	beq.n	800c8cc <HAL_TIM_ConfigClockSource+0xd4>
 800c84e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c852:	f200 8087 	bhi.w	800c964 <HAL_TIM_ConfigClockSource+0x16c>
 800c856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c85a:	f000 8086 	beq.w	800c96a <HAL_TIM_ConfigClockSource+0x172>
 800c85e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c862:	d87f      	bhi.n	800c964 <HAL_TIM_ConfigClockSource+0x16c>
 800c864:	2b70      	cmp	r3, #112	; 0x70
 800c866:	d01a      	beq.n	800c89e <HAL_TIM_ConfigClockSource+0xa6>
 800c868:	2b70      	cmp	r3, #112	; 0x70
 800c86a:	d87b      	bhi.n	800c964 <HAL_TIM_ConfigClockSource+0x16c>
 800c86c:	2b60      	cmp	r3, #96	; 0x60
 800c86e:	d050      	beq.n	800c912 <HAL_TIM_ConfigClockSource+0x11a>
 800c870:	2b60      	cmp	r3, #96	; 0x60
 800c872:	d877      	bhi.n	800c964 <HAL_TIM_ConfigClockSource+0x16c>
 800c874:	2b50      	cmp	r3, #80	; 0x50
 800c876:	d03c      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0xfa>
 800c878:	2b50      	cmp	r3, #80	; 0x50
 800c87a:	d873      	bhi.n	800c964 <HAL_TIM_ConfigClockSource+0x16c>
 800c87c:	2b40      	cmp	r3, #64	; 0x40
 800c87e:	d058      	beq.n	800c932 <HAL_TIM_ConfigClockSource+0x13a>
 800c880:	2b40      	cmp	r3, #64	; 0x40
 800c882:	d86f      	bhi.n	800c964 <HAL_TIM_ConfigClockSource+0x16c>
 800c884:	2b30      	cmp	r3, #48	; 0x30
 800c886:	d064      	beq.n	800c952 <HAL_TIM_ConfigClockSource+0x15a>
 800c888:	2b30      	cmp	r3, #48	; 0x30
 800c88a:	d86b      	bhi.n	800c964 <HAL_TIM_ConfigClockSource+0x16c>
 800c88c:	2b20      	cmp	r3, #32
 800c88e:	d060      	beq.n	800c952 <HAL_TIM_ConfigClockSource+0x15a>
 800c890:	2b20      	cmp	r3, #32
 800c892:	d867      	bhi.n	800c964 <HAL_TIM_ConfigClockSource+0x16c>
 800c894:	2b00      	cmp	r3, #0
 800c896:	d05c      	beq.n	800c952 <HAL_TIM_ConfigClockSource+0x15a>
 800c898:	2b10      	cmp	r3, #16
 800c89a:	d05a      	beq.n	800c952 <HAL_TIM_ConfigClockSource+0x15a>
 800c89c:	e062      	b.n	800c964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6818      	ldr	r0, [r3, #0]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	6899      	ldr	r1, [r3, #8]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	f000 fb5d 	bl	800cf6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c8c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	609a      	str	r2, [r3, #8]
      break;
 800c8ca:	e04f      	b.n	800c96c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6818      	ldr	r0, [r3, #0]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	6899      	ldr	r1, [r3, #8]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	f000 fb46 	bl	800cf6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	689a      	ldr	r2, [r3, #8]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8ee:	609a      	str	r2, [r3, #8]
      break;
 800c8f0:	e03c      	b.n	800c96c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6818      	ldr	r0, [r3, #0]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	6859      	ldr	r1, [r3, #4]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	461a      	mov	r2, r3
 800c900:	f000 faba 	bl	800ce78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2150      	movs	r1, #80	; 0x50
 800c90a:	4618      	mov	r0, r3
 800c90c:	f000 fb13 	bl	800cf36 <TIM_ITRx_SetConfig>
      break;
 800c910:	e02c      	b.n	800c96c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	6859      	ldr	r1, [r3, #4]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	461a      	mov	r2, r3
 800c920:	f000 fad9 	bl	800ced6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2160      	movs	r1, #96	; 0x60
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 fb03 	bl	800cf36 <TIM_ITRx_SetConfig>
      break;
 800c930:	e01c      	b.n	800c96c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6818      	ldr	r0, [r3, #0]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	6859      	ldr	r1, [r3, #4]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	461a      	mov	r2, r3
 800c940:	f000 fa9a 	bl	800ce78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2140      	movs	r1, #64	; 0x40
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 faf3 	bl	800cf36 <TIM_ITRx_SetConfig>
      break;
 800c950:	e00c      	b.n	800c96c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4619      	mov	r1, r3
 800c95c:	4610      	mov	r0, r2
 800c95e:	f000 faea 	bl	800cf36 <TIM_ITRx_SetConfig>
      break;
 800c962:	e003      	b.n	800c96c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	73fb      	strb	r3, [r7, #15]
      break;
 800c968:	e000      	b.n	800c96c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c96a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c986:	b480      	push	{r7}
 800c988:	b083      	sub	sp, #12
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c98e:	bf00      	nop
 800c990:	370c      	adds	r7, #12
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c99a:	b480      	push	{r7}
 800c99c:	b083      	sub	sp, #12
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c9a2:	bf00      	nop
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b083      	sub	sp, #12
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c9b6:	bf00      	nop
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c9ca:	bf00      	nop
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
	...

0800c9d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a40      	ldr	r2, [pc, #256]	; (800caec <TIM_Base_SetConfig+0x114>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d013      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f6:	d00f      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a3d      	ldr	r2, [pc, #244]	; (800caf0 <TIM_Base_SetConfig+0x118>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d00b      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a3c      	ldr	r2, [pc, #240]	; (800caf4 <TIM_Base_SetConfig+0x11c>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d007      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a3b      	ldr	r2, [pc, #236]	; (800caf8 <TIM_Base_SetConfig+0x120>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d003      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a3a      	ldr	r2, [pc, #232]	; (800cafc <TIM_Base_SetConfig+0x124>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d108      	bne.n	800ca2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a2f      	ldr	r2, [pc, #188]	; (800caec <TIM_Base_SetConfig+0x114>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d02b      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca38:	d027      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a2c      	ldr	r2, [pc, #176]	; (800caf0 <TIM_Base_SetConfig+0x118>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d023      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a2b      	ldr	r2, [pc, #172]	; (800caf4 <TIM_Base_SetConfig+0x11c>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d01f      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a2a      	ldr	r2, [pc, #168]	; (800caf8 <TIM_Base_SetConfig+0x120>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d01b      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a29      	ldr	r2, [pc, #164]	; (800cafc <TIM_Base_SetConfig+0x124>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d017      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a28      	ldr	r2, [pc, #160]	; (800cb00 <TIM_Base_SetConfig+0x128>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d013      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a27      	ldr	r2, [pc, #156]	; (800cb04 <TIM_Base_SetConfig+0x12c>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d00f      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a26      	ldr	r2, [pc, #152]	; (800cb08 <TIM_Base_SetConfig+0x130>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d00b      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a25      	ldr	r2, [pc, #148]	; (800cb0c <TIM_Base_SetConfig+0x134>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d007      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a24      	ldr	r2, [pc, #144]	; (800cb10 <TIM_Base_SetConfig+0x138>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d003      	beq.n	800ca8a <TIM_Base_SetConfig+0xb2>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4a23      	ldr	r2, [pc, #140]	; (800cb14 <TIM_Base_SetConfig+0x13c>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d108      	bne.n	800ca9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	4313      	orrs	r3, r2
 800caa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	689a      	ldr	r2, [r3, #8]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a0a      	ldr	r2, [pc, #40]	; (800caec <TIM_Base_SetConfig+0x114>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d003      	beq.n	800cad0 <TIM_Base_SetConfig+0xf8>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a0c      	ldr	r2, [pc, #48]	; (800cafc <TIM_Base_SetConfig+0x124>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d103      	bne.n	800cad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	691a      	ldr	r2, [r3, #16]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	615a      	str	r2, [r3, #20]
}
 800cade:	bf00      	nop
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	40010000 	.word	0x40010000
 800caf0:	40000400 	.word	0x40000400
 800caf4:	40000800 	.word	0x40000800
 800caf8:	40000c00 	.word	0x40000c00
 800cafc:	40010400 	.word	0x40010400
 800cb00:	40014000 	.word	0x40014000
 800cb04:	40014400 	.word	0x40014400
 800cb08:	40014800 	.word	0x40014800
 800cb0c:	40001800 	.word	0x40001800
 800cb10:	40001c00 	.word	0x40001c00
 800cb14:	40002000 	.word	0x40002000

0800cb18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	f023 0201 	bic.w	r2, r3, #1
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	699b      	ldr	r3, [r3, #24]
 800cb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f023 0303 	bic.w	r3, r3, #3
 800cb4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f023 0302 	bic.w	r3, r3, #2
 800cb60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	689b      	ldr	r3, [r3, #8]
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a20      	ldr	r2, [pc, #128]	; (800cbf0 <TIM_OC1_SetConfig+0xd8>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d003      	beq.n	800cb7c <TIM_OC1_SetConfig+0x64>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a1f      	ldr	r2, [pc, #124]	; (800cbf4 <TIM_OC1_SetConfig+0xdc>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d10c      	bne.n	800cb96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	f023 0308 	bic.w	r3, r3, #8
 800cb82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	f023 0304 	bic.w	r3, r3, #4
 800cb94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a15      	ldr	r2, [pc, #84]	; (800cbf0 <TIM_OC1_SetConfig+0xd8>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d003      	beq.n	800cba6 <TIM_OC1_SetConfig+0x8e>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a14      	ldr	r2, [pc, #80]	; (800cbf4 <TIM_OC1_SetConfig+0xdc>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d111      	bne.n	800cbca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cbb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	695b      	ldr	r3, [r3, #20]
 800cbba:	693a      	ldr	r2, [r7, #16]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	693a      	ldr	r2, [r7, #16]
 800cbce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	685a      	ldr	r2, [r3, #4]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	697a      	ldr	r2, [r7, #20]
 800cbe2:	621a      	str	r2, [r3, #32]
}
 800cbe4:	bf00      	nop
 800cbe6:	371c      	adds	r7, #28
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	40010000 	.word	0x40010000
 800cbf4:	40010400 	.word	0x40010400

0800cbf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	f023 0210 	bic.w	r2, r3, #16
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a1b      	ldr	r3, [r3, #32]
 800cc12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	699b      	ldr	r3, [r3, #24]
 800cc1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	021b      	lsls	r3, r3, #8
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	f023 0320 	bic.w	r3, r3, #32
 800cc42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	011b      	lsls	r3, r3, #4
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a22      	ldr	r2, [pc, #136]	; (800ccdc <TIM_OC2_SetConfig+0xe4>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d003      	beq.n	800cc60 <TIM_OC2_SetConfig+0x68>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a21      	ldr	r2, [pc, #132]	; (800cce0 <TIM_OC2_SetConfig+0xe8>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d10d      	bne.n	800cc7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	011b      	lsls	r3, r3, #4
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a17      	ldr	r2, [pc, #92]	; (800ccdc <TIM_OC2_SetConfig+0xe4>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d003      	beq.n	800cc8c <TIM_OC2_SetConfig+0x94>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a16      	ldr	r2, [pc, #88]	; (800cce0 <TIM_OC2_SetConfig+0xe8>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d113      	bne.n	800ccb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	699b      	ldr	r3, [r3, #24]
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	621a      	str	r2, [r3, #32]
}
 800ccce:	bf00      	nop
 800ccd0:	371c      	adds	r7, #28
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	40010000 	.word	0x40010000
 800cce0:	40010400 	.word	0x40010400

0800cce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b087      	sub	sp, #28
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	69db      	ldr	r3, [r3, #28]
 800cd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f023 0303 	bic.w	r3, r3, #3
 800cd1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	021b      	lsls	r3, r3, #8
 800cd34:	697a      	ldr	r2, [r7, #20]
 800cd36:	4313      	orrs	r3, r2
 800cd38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4a21      	ldr	r2, [pc, #132]	; (800cdc4 <TIM_OC3_SetConfig+0xe0>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d003      	beq.n	800cd4a <TIM_OC3_SetConfig+0x66>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	4a20      	ldr	r2, [pc, #128]	; (800cdc8 <TIM_OC3_SetConfig+0xe4>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d10d      	bne.n	800cd66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	021b      	lsls	r3, r3, #8
 800cd58:	697a      	ldr	r2, [r7, #20]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a16      	ldr	r2, [pc, #88]	; (800cdc4 <TIM_OC3_SetConfig+0xe0>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d003      	beq.n	800cd76 <TIM_OC3_SetConfig+0x92>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a15      	ldr	r2, [pc, #84]	; (800cdc8 <TIM_OC3_SetConfig+0xe4>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d113      	bne.n	800cd9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	011b      	lsls	r3, r3, #4
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	011b      	lsls	r3, r3, #4
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	693a      	ldr	r2, [r7, #16]
 800cda2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	685a      	ldr	r2, [r3, #4]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	697a      	ldr	r2, [r7, #20]
 800cdb6:	621a      	str	r2, [r3, #32]
}
 800cdb8:	bf00      	nop
 800cdba:	371c      	adds	r7, #28
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr
 800cdc4:	40010000 	.word	0x40010000
 800cdc8:	40010400 	.word	0x40010400

0800cdcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b087      	sub	sp, #28
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a1b      	ldr	r3, [r3, #32]
 800cde6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	69db      	ldr	r3, [r3, #28]
 800cdf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	021b      	lsls	r3, r3, #8
 800ce0a:	68fa      	ldr	r2, [r7, #12]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	031b      	lsls	r3, r3, #12
 800ce1e:	693a      	ldr	r2, [r7, #16]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a12      	ldr	r2, [pc, #72]	; (800ce70 <TIM_OC4_SetConfig+0xa4>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d003      	beq.n	800ce34 <TIM_OC4_SetConfig+0x68>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4a11      	ldr	r2, [pc, #68]	; (800ce74 <TIM_OC4_SetConfig+0xa8>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d109      	bne.n	800ce48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	019b      	lsls	r3, r3, #6
 800ce42:	697a      	ldr	r2, [r7, #20]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	693a      	ldr	r2, [r7, #16]
 800ce60:	621a      	str	r2, [r3, #32]
}
 800ce62:	bf00      	nop
 800ce64:	371c      	adds	r7, #28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	40010000 	.word	0x40010000
 800ce74:	40010400 	.word	0x40010400

0800ce78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6a1b      	ldr	r3, [r3, #32]
 800ce8e:	f023 0201 	bic.w	r2, r3, #1
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	699b      	ldr	r3, [r3, #24]
 800ce9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	011b      	lsls	r3, r3, #4
 800cea8:	693a      	ldr	r2, [r7, #16]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f023 030a 	bic.w	r3, r3, #10
 800ceb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	693a      	ldr	r2, [r7, #16]
 800cec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	621a      	str	r2, [r3, #32]
}
 800ceca:	bf00      	nop
 800cecc:	371c      	adds	r7, #28
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr

0800ced6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ced6:	b480      	push	{r7}
 800ced8:	b087      	sub	sp, #28
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	60f8      	str	r0, [r7, #12]
 800cede:	60b9      	str	r1, [r7, #8]
 800cee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6a1b      	ldr	r3, [r3, #32]
 800cee6:	f023 0210 	bic.w	r2, r3, #16
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	699b      	ldr	r3, [r3, #24]
 800cef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6a1b      	ldr	r3, [r3, #32]
 800cef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	031b      	lsls	r3, r3, #12
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cf12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	011b      	lsls	r3, r3, #4
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	693a      	ldr	r2, [r7, #16]
 800cf28:	621a      	str	r2, [r3, #32]
}
 800cf2a:	bf00      	nop
 800cf2c:	371c      	adds	r7, #28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf36:	b480      	push	{r7}
 800cf38:	b085      	sub	sp, #20
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	f043 0307 	orr.w	r3, r3, #7
 800cf58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	609a      	str	r2, [r3, #8]
}
 800cf60:	bf00      	nop
 800cf62:	3714      	adds	r7, #20
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	021a      	lsls	r2, r3, #8
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	697a      	ldr	r2, [r7, #20]
 800cf9e:	609a      	str	r2, [r3, #8]
}
 800cfa0:	bf00      	nop
 800cfa2:	371c      	adds	r7, #28
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b087      	sub	sp, #28
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	f003 031f 	and.w	r3, r3, #31
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6a1a      	ldr	r2, [r3, #32]
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	43db      	mvns	r3, r3
 800cfce:	401a      	ands	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6a1a      	ldr	r2, [r3, #32]
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	f003 031f 	and.w	r3, r3, #31
 800cfde:	6879      	ldr	r1, [r7, #4]
 800cfe0:	fa01 f303 	lsl.w	r3, r1, r3
 800cfe4:	431a      	orrs	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	621a      	str	r2, [r3, #32]
}
 800cfea:	bf00      	nop
 800cfec:	371c      	adds	r7, #28
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
	...

0800cff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d101      	bne.n	800d010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d00c:	2302      	movs	r3, #2
 800d00e:	e05a      	b.n	800d0c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2202      	movs	r2, #2
 800d01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	4313      	orrs	r3, r2
 800d040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a21      	ldr	r2, [pc, #132]	; (800d0d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d022      	beq.n	800d09a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d05c:	d01d      	beq.n	800d09a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a1d      	ldr	r2, [pc, #116]	; (800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d018      	beq.n	800d09a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a1b      	ldr	r2, [pc, #108]	; (800d0dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d013      	beq.n	800d09a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a1a      	ldr	r2, [pc, #104]	; (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d00e      	beq.n	800d09a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a18      	ldr	r2, [pc, #96]	; (800d0e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d009      	beq.n	800d09a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a17      	ldr	r2, [pc, #92]	; (800d0e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d004      	beq.n	800d09a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a15      	ldr	r2, [pc, #84]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d10c      	bne.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	40010000 	.word	0x40010000
 800d0d8:	40000400 	.word	0x40000400
 800d0dc:	40000800 	.word	0x40000800
 800d0e0:	40000c00 	.word	0x40000c00
 800d0e4:	40010400 	.word	0x40010400
 800d0e8:	40014000 	.word	0x40014000
 800d0ec:	40001800 	.word	0x40001800

0800d0f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b085      	sub	sp, #20
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d104:	2b01      	cmp	r3, #1
 800d106:	d101      	bne.n	800d10c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d108:	2302      	movs	r3, #2
 800d10a:	e03d      	b.n	800d188 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	4313      	orrs	r3, r2
 800d120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	4313      	orrs	r3, r2
 800d12e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4313      	orrs	r3, r2
 800d14a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	4313      	orrs	r3, r2
 800d158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	4313      	orrs	r3, r2
 800d166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	69db      	ldr	r3, [r3, #28]
 800d172:	4313      	orrs	r3, r2
 800d174:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d19c:	bf00      	nop
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d101      	bne.n	800d1ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e03f      	b.n	800d24e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7f6 f838 	bl	8003258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2224      	movs	r2, #36	; 0x24
 800d1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	68da      	ldr	r2, [r3, #12]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d1fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fc7b 	bl	800dafc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	691a      	ldr	r2, [r3, #16]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	695a      	ldr	r2, [r3, #20]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	68da      	ldr	r2, [r3, #12]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2220      	movs	r2, #32
 800d240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2220      	movs	r2, #32
 800d248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
	...

0800d258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b0ba      	sub	sp, #232	; 0xe8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	695b      	ldr	r3, [r3, #20]
 800d27a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d27e:	2300      	movs	r3, #0
 800d280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d284:	2300      	movs	r3, #0
 800d286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d28e:	f003 030f 	and.w	r3, r3, #15
 800d292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10f      	bne.n	800d2be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2a2:	f003 0320 	and.w	r3, r3, #32
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d009      	beq.n	800d2be <HAL_UART_IRQHandler+0x66>
 800d2aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2ae:	f003 0320 	and.w	r3, r3, #32
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d003      	beq.n	800d2be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 fb65 	bl	800d986 <UART_Receive_IT>
      return;
 800d2bc:	e256      	b.n	800d76c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d2be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 80de 	beq.w	800d484 <HAL_UART_IRQHandler+0x22c>
 800d2c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2cc:	f003 0301 	and.w	r3, r3, #1
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d106      	bne.n	800d2e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 80d1 	beq.w	800d484 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2e6:	f003 0301 	and.w	r3, r3, #1
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00b      	beq.n	800d306 <HAL_UART_IRQHandler+0xae>
 800d2ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d005      	beq.n	800d306 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fe:	f043 0201 	orr.w	r2, r3, #1
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d30a:	f003 0304 	and.w	r3, r3, #4
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00b      	beq.n	800d32a <HAL_UART_IRQHandler+0xd2>
 800d312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d316:	f003 0301 	and.w	r3, r3, #1
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d005      	beq.n	800d32a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d322:	f043 0202 	orr.w	r2, r3, #2
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d32e:	f003 0302 	and.w	r3, r3, #2
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00b      	beq.n	800d34e <HAL_UART_IRQHandler+0xf6>
 800d336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d33a:	f003 0301 	and.w	r3, r3, #1
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d005      	beq.n	800d34e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d346:	f043 0204 	orr.w	r2, r3, #4
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d352:	f003 0308 	and.w	r3, r3, #8
 800d356:	2b00      	cmp	r3, #0
 800d358:	d011      	beq.n	800d37e <HAL_UART_IRQHandler+0x126>
 800d35a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d35e:	f003 0320 	and.w	r3, r3, #32
 800d362:	2b00      	cmp	r3, #0
 800d364:	d105      	bne.n	800d372 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d005      	beq.n	800d37e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d376:	f043 0208 	orr.w	r2, r3, #8
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 81ed 	beq.w	800d762 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d38c:	f003 0320 	and.w	r3, r3, #32
 800d390:	2b00      	cmp	r3, #0
 800d392:	d008      	beq.n	800d3a6 <HAL_UART_IRQHandler+0x14e>
 800d394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d398:	f003 0320 	and.w	r3, r3, #32
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 faf0 	bl	800d986 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b0:	2b40      	cmp	r3, #64	; 0x40
 800d3b2:	bf0c      	ite	eq
 800d3b4:	2301      	moveq	r3, #1
 800d3b6:	2300      	movne	r3, #0
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c2:	f003 0308 	and.w	r3, r3, #8
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d103      	bne.n	800d3d2 <HAL_UART_IRQHandler+0x17a>
 800d3ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d04f      	beq.n	800d472 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f9f8 	bl	800d7c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3e2:	2b40      	cmp	r3, #64	; 0x40
 800d3e4:	d141      	bne.n	800d46a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	3314      	adds	r3, #20
 800d3ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d3f4:	e853 3f00 	ldrex	r3, [r3]
 800d3f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d3fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3314      	adds	r3, #20
 800d40e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d412:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d41e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d422:	e841 2300 	strex	r3, r2, [r1]
 800d426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d42a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1d9      	bne.n	800d3e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	2b00      	cmp	r3, #0
 800d438:	d013      	beq.n	800d462 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43e:	4a7d      	ldr	r2, [pc, #500]	; (800d634 <HAL_UART_IRQHandler+0x3dc>)
 800d440:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d446:	4618      	mov	r0, r3
 800d448:	f7fb fc32 	bl	8008cb0 <HAL_DMA_Abort_IT>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d016      	beq.n	800d480 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d45c:	4610      	mov	r0, r2
 800d45e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d460:	e00e      	b.n	800d480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 f99a 	bl	800d79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d468:	e00a      	b.n	800d480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f996 	bl	800d79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d470:	e006      	b.n	800d480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f992 	bl	800d79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d47e:	e170      	b.n	800d762 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d480:	bf00      	nop
    return;
 800d482:	e16e      	b.n	800d762 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d488:	2b01      	cmp	r3, #1
 800d48a:	f040 814a 	bne.w	800d722 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d492:	f003 0310 	and.w	r3, r3, #16
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 8143 	beq.w	800d722 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4a0:	f003 0310 	and.w	r3, r3, #16
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f000 813c 	beq.w	800d722 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60bb      	str	r3, [r7, #8]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	60bb      	str	r3, [r7, #8]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	60bb      	str	r3, [r7, #8]
 800d4be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ca:	2b40      	cmp	r3, #64	; 0x40
 800d4cc:	f040 80b4 	bne.w	800d638 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d4dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 8140 	beq.w	800d766 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d4ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	f080 8139 	bcs.w	800d766 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d4fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d500:	69db      	ldr	r3, [r3, #28]
 800d502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d506:	f000 8088 	beq.w	800d61a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	330c      	adds	r3, #12
 800d510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d518:	e853 3f00 	ldrex	r3, [r3]
 800d51c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	330c      	adds	r3, #12
 800d532:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d53a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d542:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d546:	e841 2300 	strex	r3, r2, [r1]
 800d54a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d54e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1d9      	bne.n	800d50a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3314      	adds	r3, #20
 800d55c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d560:	e853 3f00 	ldrex	r3, [r3]
 800d564:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d568:	f023 0301 	bic.w	r3, r3, #1
 800d56c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	3314      	adds	r3, #20
 800d576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d57a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d57e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d580:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d582:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d586:	e841 2300 	strex	r3, r2, [r1]
 800d58a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d58c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1e1      	bne.n	800d556 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	3314      	adds	r3, #20
 800d598:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d59c:	e853 3f00 	ldrex	r3, [r3]
 800d5a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d5a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	3314      	adds	r3, #20
 800d5b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d5b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d5b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d5bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d5be:	e841 2300 	strex	r3, r2, [r1]
 800d5c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d5c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1e3      	bne.n	800d592 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2220      	movs	r2, #32
 800d5ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	330c      	adds	r3, #12
 800d5de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e2:	e853 3f00 	ldrex	r3, [r3]
 800d5e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d5e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5ea:	f023 0310 	bic.w	r3, r3, #16
 800d5ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	330c      	adds	r3, #12
 800d5f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d5fc:	65ba      	str	r2, [r7, #88]	; 0x58
 800d5fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d600:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d604:	e841 2300 	strex	r3, r2, [r1]
 800d608:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1e3      	bne.n	800d5d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d614:	4618      	mov	r0, r3
 800d616:	f7fb fadb 	bl	8008bd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d622:	b29b      	uxth	r3, r3
 800d624:	1ad3      	subs	r3, r2, r3
 800d626:	b29b      	uxth	r3, r3
 800d628:	4619      	mov	r1, r3
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f8c0 	bl	800d7b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d630:	e099      	b.n	800d766 <HAL_UART_IRQHandler+0x50e>
 800d632:	bf00      	nop
 800d634:	0800d88f 	.word	0x0800d88f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d640:	b29b      	uxth	r3, r3
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 808b 	beq.w	800d76a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 8086 	beq.w	800d76a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	330c      	adds	r3, #12
 800d664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d668:	e853 3f00 	ldrex	r3, [r3]
 800d66c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	330c      	adds	r3, #12
 800d67e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d682:	647a      	str	r2, [r7, #68]	; 0x44
 800d684:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d68a:	e841 2300 	strex	r3, r2, [r1]
 800d68e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1e3      	bne.n	800d65e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3314      	adds	r3, #20
 800d69c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	e853 3f00 	ldrex	r3, [r3]
 800d6a4:	623b      	str	r3, [r7, #32]
   return(result);
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	f023 0301 	bic.w	r3, r3, #1
 800d6ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	3314      	adds	r3, #20
 800d6b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d6ba:	633a      	str	r2, [r7, #48]	; 0x30
 800d6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6c2:	e841 2300 	strex	r3, r2, [r1]
 800d6c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1e3      	bne.n	800d696 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	330c      	adds	r3, #12
 800d6e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	e853 3f00 	ldrex	r3, [r3]
 800d6ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f023 0310 	bic.w	r3, r3, #16
 800d6f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	330c      	adds	r3, #12
 800d6fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d700:	61fa      	str	r2, [r7, #28]
 800d702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d704:	69b9      	ldr	r1, [r7, #24]
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	e841 2300 	strex	r3, r2, [r1]
 800d70c:	617b      	str	r3, [r7, #20]
   return(result);
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1e3      	bne.n	800d6dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f848 	bl	800d7b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d720:	e023      	b.n	800d76a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d009      	beq.n	800d742 <HAL_UART_IRQHandler+0x4ea>
 800d72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f8bb 	bl	800d8b6 <UART_Transmit_IT>
    return;
 800d740:	e014      	b.n	800d76c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00e      	beq.n	800d76c <HAL_UART_IRQHandler+0x514>
 800d74e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d756:	2b00      	cmp	r3, #0
 800d758:	d008      	beq.n	800d76c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f8fb 	bl	800d956 <UART_EndTransmit_IT>
    return;
 800d760:	e004      	b.n	800d76c <HAL_UART_IRQHandler+0x514>
    return;
 800d762:	bf00      	nop
 800d764:	e002      	b.n	800d76c <HAL_UART_IRQHandler+0x514>
      return;
 800d766:	bf00      	nop
 800d768:	e000      	b.n	800d76c <HAL_UART_IRQHandler+0x514>
      return;
 800d76a:	bf00      	nop
  }
}
 800d76c:	37e8      	adds	r7, #232	; 0xe8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop

0800d774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d7a4:	bf00      	nop
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b095      	sub	sp, #84	; 0x54
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	330c      	adds	r3, #12
 800d7d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7da:	e853 3f00 	ldrex	r3, [r3]
 800d7de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	330c      	adds	r3, #12
 800d7ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7f0:	643a      	str	r2, [r7, #64]	; 0x40
 800d7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7f8:	e841 2300 	strex	r3, r2, [r1]
 800d7fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1e5      	bne.n	800d7d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	3314      	adds	r3, #20
 800d80a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80c:	6a3b      	ldr	r3, [r7, #32]
 800d80e:	e853 3f00 	ldrex	r3, [r3]
 800d812:	61fb      	str	r3, [r7, #28]
   return(result);
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	f023 0301 	bic.w	r3, r3, #1
 800d81a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3314      	adds	r3, #20
 800d822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d824:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d82c:	e841 2300 	strex	r3, r2, [r1]
 800d830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1e5      	bne.n	800d804 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d119      	bne.n	800d874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	330c      	adds	r3, #12
 800d846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	e853 3f00 	ldrex	r3, [r3]
 800d84e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	f023 0310 	bic.w	r3, r3, #16
 800d856:	647b      	str	r3, [r7, #68]	; 0x44
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	330c      	adds	r3, #12
 800d85e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d860:	61ba      	str	r2, [r7, #24]
 800d862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d864:	6979      	ldr	r1, [r7, #20]
 800d866:	69ba      	ldr	r2, [r7, #24]
 800d868:	e841 2300 	strex	r3, r2, [r1]
 800d86c:	613b      	str	r3, [r7, #16]
   return(result);
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1e5      	bne.n	800d840 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2220      	movs	r2, #32
 800d878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d882:	bf00      	nop
 800d884:	3754      	adds	r7, #84	; 0x54
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b084      	sub	sp, #16
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f7ff ff77 	bl	800d79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8ae:	bf00      	nop
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d8b6:	b480      	push	{r7}
 800d8b8:	b085      	sub	sp, #20
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	2b21      	cmp	r3, #33	; 0x21
 800d8c8:	d13e      	bne.n	800d948 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8d2:	d114      	bne.n	800d8fe <UART_Transmit_IT+0x48>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d110      	bne.n	800d8fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a1b      	ldr	r3, [r3, #32]
 800d8e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	881b      	ldrh	r3, [r3, #0]
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d8f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	1c9a      	adds	r2, r3, #2
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	621a      	str	r2, [r3, #32]
 800d8fc:	e008      	b.n	800d910 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a1b      	ldr	r3, [r3, #32]
 800d902:	1c59      	adds	r1, r3, #1
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	6211      	str	r1, [r2, #32]
 800d908:	781a      	ldrb	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d914:	b29b      	uxth	r3, r3
 800d916:	3b01      	subs	r3, #1
 800d918:	b29b      	uxth	r3, r3
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	4619      	mov	r1, r3
 800d91e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10f      	bne.n	800d944 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68da      	ldr	r2, [r3, #12]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d932:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	68da      	ldr	r2, [r3, #12]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d942:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d944:	2300      	movs	r3, #0
 800d946:	e000      	b.n	800d94a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d948:	2302      	movs	r3, #2
  }
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b082      	sub	sp, #8
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	68da      	ldr	r2, [r3, #12]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d96c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2220      	movs	r2, #32
 800d972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f7ff fefc 	bl	800d774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b08c      	sub	sp, #48	; 0x30
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b22      	cmp	r3, #34	; 0x22
 800d998:	f040 80ab 	bne.w	800daf2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9a4:	d117      	bne.n	800d9d6 <UART_Receive_IT+0x50>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	691b      	ldr	r3, [r3, #16]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d113      	bne.n	800d9d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ce:	1c9a      	adds	r2, r3, #2
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	629a      	str	r2, [r3, #40]	; 0x28
 800d9d4:	e026      	b.n	800da24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9e8:	d007      	beq.n	800d9fa <UART_Receive_IT+0x74>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	689b      	ldr	r3, [r3, #8]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10a      	bne.n	800da08 <UART_Receive_IT+0x82>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	691b      	ldr	r3, [r3, #16]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d106      	bne.n	800da08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	b2da      	uxtb	r2, r3
 800da02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da04:	701a      	strb	r2, [r3, #0]
 800da06:	e008      	b.n	800da1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da14:	b2da      	uxtb	r2, r3
 800da16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1e:	1c5a      	adds	r2, r3, #1
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800da28:	b29b      	uxth	r3, r3
 800da2a:	3b01      	subs	r3, #1
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	4619      	mov	r1, r3
 800da32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800da34:	2b00      	cmp	r3, #0
 800da36:	d15a      	bne.n	800daee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f022 0220 	bic.w	r2, r2, #32
 800da46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68da      	ldr	r2, [r3, #12]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800da56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	695a      	ldr	r2, [r3, #20]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f022 0201 	bic.w	r2, r2, #1
 800da66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2220      	movs	r2, #32
 800da6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da74:	2b01      	cmp	r3, #1
 800da76:	d135      	bne.n	800dae4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	330c      	adds	r3, #12
 800da84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	e853 3f00 	ldrex	r3, [r3]
 800da8c:	613b      	str	r3, [r7, #16]
   return(result);
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	f023 0310 	bic.w	r3, r3, #16
 800da94:	627b      	str	r3, [r7, #36]	; 0x24
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	330c      	adds	r3, #12
 800da9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da9e:	623a      	str	r2, [r7, #32]
 800daa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa2:	69f9      	ldr	r1, [r7, #28]
 800daa4:	6a3a      	ldr	r2, [r7, #32]
 800daa6:	e841 2300 	strex	r3, r2, [r1]
 800daaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1e5      	bne.n	800da7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f003 0310 	and.w	r3, r3, #16
 800dabc:	2b10      	cmp	r3, #16
 800dabe:	d10a      	bne.n	800dad6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dac0:	2300      	movs	r3, #0
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	60fb      	str	r3, [r7, #12]
 800dad4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dada:	4619      	mov	r1, r3
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7ff fe67 	bl	800d7b0 <HAL_UARTEx_RxEventCallback>
 800dae2:	e002      	b.n	800daea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7ff fe4f 	bl	800d788 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800daea:	2300      	movs	r3, #0
 800daec:	e002      	b.n	800daf4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800daee:	2300      	movs	r3, #0
 800daf0:	e000      	b.n	800daf4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800daf2:	2302      	movs	r3, #2
  }
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3730      	adds	r7, #48	; 0x30
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dafc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db00:	b0c0      	sub	sp, #256	; 0x100
 800db02:	af00      	add	r7, sp, #0
 800db04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800db14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db18:	68d9      	ldr	r1, [r3, #12]
 800db1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	ea40 0301 	orr.w	r3, r0, r1
 800db24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800db26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db2a:	689a      	ldr	r2, [r3, #8]
 800db2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db30:	691b      	ldr	r3, [r3, #16]
 800db32:	431a      	orrs	r2, r3
 800db34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	431a      	orrs	r2, r3
 800db3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db40:	69db      	ldr	r3, [r3, #28]
 800db42:	4313      	orrs	r3, r2
 800db44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800db48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800db54:	f021 010c 	bic.w	r1, r1, #12
 800db58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db62:	430b      	orrs	r3, r1
 800db64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800db66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800db72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db76:	6999      	ldr	r1, [r3, #24]
 800db78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	ea40 0301 	orr.w	r3, r0, r1
 800db82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800db84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	4b8f      	ldr	r3, [pc, #572]	; (800ddc8 <UART_SetConfig+0x2cc>)
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d005      	beq.n	800db9c <UART_SetConfig+0xa0>
 800db90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	4b8d      	ldr	r3, [pc, #564]	; (800ddcc <UART_SetConfig+0x2d0>)
 800db98:	429a      	cmp	r2, r3
 800db9a:	d104      	bne.n	800dba6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800db9c:	f7fd fbb4 	bl	800b308 <HAL_RCC_GetPCLK2Freq>
 800dba0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800dba4:	e003      	b.n	800dbae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dba6:	f7fd fb9b 	bl	800b2e0 <HAL_RCC_GetPCLK1Freq>
 800dbaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dbae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbb8:	f040 810c 	bne.w	800ddd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dbbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dbc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800dbca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800dbce:	4622      	mov	r2, r4
 800dbd0:	462b      	mov	r3, r5
 800dbd2:	1891      	adds	r1, r2, r2
 800dbd4:	65b9      	str	r1, [r7, #88]	; 0x58
 800dbd6:	415b      	adcs	r3, r3
 800dbd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dbde:	4621      	mov	r1, r4
 800dbe0:	eb12 0801 	adds.w	r8, r2, r1
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	eb43 0901 	adc.w	r9, r3, r1
 800dbea:	f04f 0200 	mov.w	r2, #0
 800dbee:	f04f 0300 	mov.w	r3, #0
 800dbf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dbf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dbfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dbfe:	4690      	mov	r8, r2
 800dc00:	4699      	mov	r9, r3
 800dc02:	4623      	mov	r3, r4
 800dc04:	eb18 0303 	adds.w	r3, r8, r3
 800dc08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dc0c:	462b      	mov	r3, r5
 800dc0e:	eb49 0303 	adc.w	r3, r9, r3
 800dc12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dc16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dc22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800dc26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	18db      	adds	r3, r3, r3
 800dc2e:	653b      	str	r3, [r7, #80]	; 0x50
 800dc30:	4613      	mov	r3, r2
 800dc32:	eb42 0303 	adc.w	r3, r2, r3
 800dc36:	657b      	str	r3, [r7, #84]	; 0x54
 800dc38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dc3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800dc40:	f7f2 ffda 	bl	8000bf8 <__aeabi_uldivmod>
 800dc44:	4602      	mov	r2, r0
 800dc46:	460b      	mov	r3, r1
 800dc48:	4b61      	ldr	r3, [pc, #388]	; (800ddd0 <UART_SetConfig+0x2d4>)
 800dc4a:	fba3 2302 	umull	r2, r3, r3, r2
 800dc4e:	095b      	lsrs	r3, r3, #5
 800dc50:	011c      	lsls	r4, r3, #4
 800dc52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc56:	2200      	movs	r2, #0
 800dc58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dc5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800dc60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800dc64:	4642      	mov	r2, r8
 800dc66:	464b      	mov	r3, r9
 800dc68:	1891      	adds	r1, r2, r2
 800dc6a:	64b9      	str	r1, [r7, #72]	; 0x48
 800dc6c:	415b      	adcs	r3, r3
 800dc6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dc74:	4641      	mov	r1, r8
 800dc76:	eb12 0a01 	adds.w	sl, r2, r1
 800dc7a:	4649      	mov	r1, r9
 800dc7c:	eb43 0b01 	adc.w	fp, r3, r1
 800dc80:	f04f 0200 	mov.w	r2, #0
 800dc84:	f04f 0300 	mov.w	r3, #0
 800dc88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dc8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dc90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dc94:	4692      	mov	sl, r2
 800dc96:	469b      	mov	fp, r3
 800dc98:	4643      	mov	r3, r8
 800dc9a:	eb1a 0303 	adds.w	r3, sl, r3
 800dc9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dca2:	464b      	mov	r3, r9
 800dca4:	eb4b 0303 	adc.w	r3, fp, r3
 800dca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dcac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dcb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800dcbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	18db      	adds	r3, r3, r3
 800dcc4:	643b      	str	r3, [r7, #64]	; 0x40
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	eb42 0303 	adc.w	r3, r2, r3
 800dccc:	647b      	str	r3, [r7, #68]	; 0x44
 800dcce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dcd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800dcd6:	f7f2 ff8f 	bl	8000bf8 <__aeabi_uldivmod>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4611      	mov	r1, r2
 800dce0:	4b3b      	ldr	r3, [pc, #236]	; (800ddd0 <UART_SetConfig+0x2d4>)
 800dce2:	fba3 2301 	umull	r2, r3, r3, r1
 800dce6:	095b      	lsrs	r3, r3, #5
 800dce8:	2264      	movs	r2, #100	; 0x64
 800dcea:	fb02 f303 	mul.w	r3, r2, r3
 800dcee:	1acb      	subs	r3, r1, r3
 800dcf0:	00db      	lsls	r3, r3, #3
 800dcf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800dcf6:	4b36      	ldr	r3, [pc, #216]	; (800ddd0 <UART_SetConfig+0x2d4>)
 800dcf8:	fba3 2302 	umull	r2, r3, r3, r2
 800dcfc:	095b      	lsrs	r3, r3, #5
 800dcfe:	005b      	lsls	r3, r3, #1
 800dd00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dd04:	441c      	add	r4, r3
 800dd06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800dd14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800dd18:	4642      	mov	r2, r8
 800dd1a:	464b      	mov	r3, r9
 800dd1c:	1891      	adds	r1, r2, r2
 800dd1e:	63b9      	str	r1, [r7, #56]	; 0x38
 800dd20:	415b      	adcs	r3, r3
 800dd22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd28:	4641      	mov	r1, r8
 800dd2a:	1851      	adds	r1, r2, r1
 800dd2c:	6339      	str	r1, [r7, #48]	; 0x30
 800dd2e:	4649      	mov	r1, r9
 800dd30:	414b      	adcs	r3, r1
 800dd32:	637b      	str	r3, [r7, #52]	; 0x34
 800dd34:	f04f 0200 	mov.w	r2, #0
 800dd38:	f04f 0300 	mov.w	r3, #0
 800dd3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800dd40:	4659      	mov	r1, fp
 800dd42:	00cb      	lsls	r3, r1, #3
 800dd44:	4651      	mov	r1, sl
 800dd46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dd4a:	4651      	mov	r1, sl
 800dd4c:	00ca      	lsls	r2, r1, #3
 800dd4e:	4610      	mov	r0, r2
 800dd50:	4619      	mov	r1, r3
 800dd52:	4603      	mov	r3, r0
 800dd54:	4642      	mov	r2, r8
 800dd56:	189b      	adds	r3, r3, r2
 800dd58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd5c:	464b      	mov	r3, r9
 800dd5e:	460a      	mov	r2, r1
 800dd60:	eb42 0303 	adc.w	r3, r2, r3
 800dd64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dd74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800dd78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	18db      	adds	r3, r3, r3
 800dd80:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd82:	4613      	mov	r3, r2
 800dd84:	eb42 0303 	adc.w	r3, r2, r3
 800dd88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dd8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800dd92:	f7f2 ff31 	bl	8000bf8 <__aeabi_uldivmod>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4b0d      	ldr	r3, [pc, #52]	; (800ddd0 <UART_SetConfig+0x2d4>)
 800dd9c:	fba3 1302 	umull	r1, r3, r3, r2
 800dda0:	095b      	lsrs	r3, r3, #5
 800dda2:	2164      	movs	r1, #100	; 0x64
 800dda4:	fb01 f303 	mul.w	r3, r1, r3
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	00db      	lsls	r3, r3, #3
 800ddac:	3332      	adds	r3, #50	; 0x32
 800ddae:	4a08      	ldr	r2, [pc, #32]	; (800ddd0 <UART_SetConfig+0x2d4>)
 800ddb0:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb4:	095b      	lsrs	r3, r3, #5
 800ddb6:	f003 0207 	and.w	r2, r3, #7
 800ddba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4422      	add	r2, r4
 800ddc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ddc4:	e106      	b.n	800dfd4 <UART_SetConfig+0x4d8>
 800ddc6:	bf00      	nop
 800ddc8:	40011000 	.word	0x40011000
 800ddcc:	40011400 	.word	0x40011400
 800ddd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ddd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ddde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dde2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800dde6:	4642      	mov	r2, r8
 800dde8:	464b      	mov	r3, r9
 800ddea:	1891      	adds	r1, r2, r2
 800ddec:	6239      	str	r1, [r7, #32]
 800ddee:	415b      	adcs	r3, r3
 800ddf0:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ddf6:	4641      	mov	r1, r8
 800ddf8:	1854      	adds	r4, r2, r1
 800ddfa:	4649      	mov	r1, r9
 800ddfc:	eb43 0501 	adc.w	r5, r3, r1
 800de00:	f04f 0200 	mov.w	r2, #0
 800de04:	f04f 0300 	mov.w	r3, #0
 800de08:	00eb      	lsls	r3, r5, #3
 800de0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800de0e:	00e2      	lsls	r2, r4, #3
 800de10:	4614      	mov	r4, r2
 800de12:	461d      	mov	r5, r3
 800de14:	4643      	mov	r3, r8
 800de16:	18e3      	adds	r3, r4, r3
 800de18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800de1c:	464b      	mov	r3, r9
 800de1e:	eb45 0303 	adc.w	r3, r5, r3
 800de22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800de26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800de36:	f04f 0200 	mov.w	r2, #0
 800de3a:	f04f 0300 	mov.w	r3, #0
 800de3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800de42:	4629      	mov	r1, r5
 800de44:	008b      	lsls	r3, r1, #2
 800de46:	4621      	mov	r1, r4
 800de48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800de4c:	4621      	mov	r1, r4
 800de4e:	008a      	lsls	r2, r1, #2
 800de50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800de54:	f7f2 fed0 	bl	8000bf8 <__aeabi_uldivmod>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4b60      	ldr	r3, [pc, #384]	; (800dfe0 <UART_SetConfig+0x4e4>)
 800de5e:	fba3 2302 	umull	r2, r3, r3, r2
 800de62:	095b      	lsrs	r3, r3, #5
 800de64:	011c      	lsls	r4, r3, #4
 800de66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de6a:	2200      	movs	r2, #0
 800de6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800de70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800de74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800de78:	4642      	mov	r2, r8
 800de7a:	464b      	mov	r3, r9
 800de7c:	1891      	adds	r1, r2, r2
 800de7e:	61b9      	str	r1, [r7, #24]
 800de80:	415b      	adcs	r3, r3
 800de82:	61fb      	str	r3, [r7, #28]
 800de84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800de88:	4641      	mov	r1, r8
 800de8a:	1851      	adds	r1, r2, r1
 800de8c:	6139      	str	r1, [r7, #16]
 800de8e:	4649      	mov	r1, r9
 800de90:	414b      	adcs	r3, r1
 800de92:	617b      	str	r3, [r7, #20]
 800de94:	f04f 0200 	mov.w	r2, #0
 800de98:	f04f 0300 	mov.w	r3, #0
 800de9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dea0:	4659      	mov	r1, fp
 800dea2:	00cb      	lsls	r3, r1, #3
 800dea4:	4651      	mov	r1, sl
 800dea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800deaa:	4651      	mov	r1, sl
 800deac:	00ca      	lsls	r2, r1, #3
 800deae:	4610      	mov	r0, r2
 800deb0:	4619      	mov	r1, r3
 800deb2:	4603      	mov	r3, r0
 800deb4:	4642      	mov	r2, r8
 800deb6:	189b      	adds	r3, r3, r2
 800deb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800debc:	464b      	mov	r3, r9
 800debe:	460a      	mov	r2, r1
 800dec0:	eb42 0303 	adc.w	r3, r2, r3
 800dec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	67bb      	str	r3, [r7, #120]	; 0x78
 800ded2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ded4:	f04f 0200 	mov.w	r2, #0
 800ded8:	f04f 0300 	mov.w	r3, #0
 800dedc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800dee0:	4649      	mov	r1, r9
 800dee2:	008b      	lsls	r3, r1, #2
 800dee4:	4641      	mov	r1, r8
 800dee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800deea:	4641      	mov	r1, r8
 800deec:	008a      	lsls	r2, r1, #2
 800deee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800def2:	f7f2 fe81 	bl	8000bf8 <__aeabi_uldivmod>
 800def6:	4602      	mov	r2, r0
 800def8:	460b      	mov	r3, r1
 800defa:	4611      	mov	r1, r2
 800defc:	4b38      	ldr	r3, [pc, #224]	; (800dfe0 <UART_SetConfig+0x4e4>)
 800defe:	fba3 2301 	umull	r2, r3, r3, r1
 800df02:	095b      	lsrs	r3, r3, #5
 800df04:	2264      	movs	r2, #100	; 0x64
 800df06:	fb02 f303 	mul.w	r3, r2, r3
 800df0a:	1acb      	subs	r3, r1, r3
 800df0c:	011b      	lsls	r3, r3, #4
 800df0e:	3332      	adds	r3, #50	; 0x32
 800df10:	4a33      	ldr	r2, [pc, #204]	; (800dfe0 <UART_SetConfig+0x4e4>)
 800df12:	fba2 2303 	umull	r2, r3, r2, r3
 800df16:	095b      	lsrs	r3, r3, #5
 800df18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df1c:	441c      	add	r4, r3
 800df1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df22:	2200      	movs	r2, #0
 800df24:	673b      	str	r3, [r7, #112]	; 0x70
 800df26:	677a      	str	r2, [r7, #116]	; 0x74
 800df28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800df2c:	4642      	mov	r2, r8
 800df2e:	464b      	mov	r3, r9
 800df30:	1891      	adds	r1, r2, r2
 800df32:	60b9      	str	r1, [r7, #8]
 800df34:	415b      	adcs	r3, r3
 800df36:	60fb      	str	r3, [r7, #12]
 800df38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df3c:	4641      	mov	r1, r8
 800df3e:	1851      	adds	r1, r2, r1
 800df40:	6039      	str	r1, [r7, #0]
 800df42:	4649      	mov	r1, r9
 800df44:	414b      	adcs	r3, r1
 800df46:	607b      	str	r3, [r7, #4]
 800df48:	f04f 0200 	mov.w	r2, #0
 800df4c:	f04f 0300 	mov.w	r3, #0
 800df50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800df54:	4659      	mov	r1, fp
 800df56:	00cb      	lsls	r3, r1, #3
 800df58:	4651      	mov	r1, sl
 800df5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800df5e:	4651      	mov	r1, sl
 800df60:	00ca      	lsls	r2, r1, #3
 800df62:	4610      	mov	r0, r2
 800df64:	4619      	mov	r1, r3
 800df66:	4603      	mov	r3, r0
 800df68:	4642      	mov	r2, r8
 800df6a:	189b      	adds	r3, r3, r2
 800df6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800df6e:	464b      	mov	r3, r9
 800df70:	460a      	mov	r2, r1
 800df72:	eb42 0303 	adc.w	r3, r2, r3
 800df76:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	663b      	str	r3, [r7, #96]	; 0x60
 800df82:	667a      	str	r2, [r7, #100]	; 0x64
 800df84:	f04f 0200 	mov.w	r2, #0
 800df88:	f04f 0300 	mov.w	r3, #0
 800df8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800df90:	4649      	mov	r1, r9
 800df92:	008b      	lsls	r3, r1, #2
 800df94:	4641      	mov	r1, r8
 800df96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800df9a:	4641      	mov	r1, r8
 800df9c:	008a      	lsls	r2, r1, #2
 800df9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dfa2:	f7f2 fe29 	bl	8000bf8 <__aeabi_uldivmod>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	4b0d      	ldr	r3, [pc, #52]	; (800dfe0 <UART_SetConfig+0x4e4>)
 800dfac:	fba3 1302 	umull	r1, r3, r3, r2
 800dfb0:	095b      	lsrs	r3, r3, #5
 800dfb2:	2164      	movs	r1, #100	; 0x64
 800dfb4:	fb01 f303 	mul.w	r3, r1, r3
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	011b      	lsls	r3, r3, #4
 800dfbc:	3332      	adds	r3, #50	; 0x32
 800dfbe:	4a08      	ldr	r2, [pc, #32]	; (800dfe0 <UART_SetConfig+0x4e4>)
 800dfc0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfc4:	095b      	lsrs	r3, r3, #5
 800dfc6:	f003 020f 	and.w	r2, r3, #15
 800dfca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4422      	add	r2, r4
 800dfd2:	609a      	str	r2, [r3, #8]
}
 800dfd4:	bf00      	nop
 800dfd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfe0:	51eb851f 	.word	0x51eb851f

0800dfe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dfe4:	b084      	sub	sp, #16
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b084      	sub	sp, #16
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	f107 001c 	add.w	r0, r7, #28
 800dff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d122      	bne.n	800e042 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e026:	2b01      	cmp	r3, #1
 800e028:	d105      	bne.n	800e036 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f001 fbee 	bl	800f818 <USB_CoreReset>
 800e03c:	4603      	mov	r3, r0
 800e03e:	73fb      	strb	r3, [r7, #15]
 800e040:	e01a      	b.n	800e078 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f001 fbe2 	bl	800f818 <USB_CoreReset>
 800e054:	4603      	mov	r3, r0
 800e056:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d106      	bne.n	800e06c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e062:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	639a      	str	r2, [r3, #56]	; 0x38
 800e06a:	e005      	b.n	800e078 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e070:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d10b      	bne.n	800e096 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	f043 0206 	orr.w	r2, r3, #6
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	f043 0220 	orr.w	r2, r3, #32
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e096:	7bfb      	ldrb	r3, [r7, #15]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e0a2:	b004      	add	sp, #16
 800e0a4:	4770      	bx	lr
	...

0800e0a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b087      	sub	sp, #28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	4613      	mov	r3, r2
 800e0b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e0b6:	79fb      	ldrb	r3, [r7, #7]
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d165      	bne.n	800e188 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	4a41      	ldr	r2, [pc, #260]	; (800e1c4 <USB_SetTurnaroundTime+0x11c>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d906      	bls.n	800e0d2 <USB_SetTurnaroundTime+0x2a>
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	4a40      	ldr	r2, [pc, #256]	; (800e1c8 <USB_SetTurnaroundTime+0x120>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d202      	bcs.n	800e0d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e0cc:	230f      	movs	r3, #15
 800e0ce:	617b      	str	r3, [r7, #20]
 800e0d0:	e062      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	4a3c      	ldr	r2, [pc, #240]	; (800e1c8 <USB_SetTurnaroundTime+0x120>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d306      	bcc.n	800e0e8 <USB_SetTurnaroundTime+0x40>
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	4a3b      	ldr	r2, [pc, #236]	; (800e1cc <USB_SetTurnaroundTime+0x124>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d202      	bcs.n	800e0e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e0e2:	230e      	movs	r3, #14
 800e0e4:	617b      	str	r3, [r7, #20]
 800e0e6:	e057      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	4a38      	ldr	r2, [pc, #224]	; (800e1cc <USB_SetTurnaroundTime+0x124>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d306      	bcc.n	800e0fe <USB_SetTurnaroundTime+0x56>
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	4a37      	ldr	r2, [pc, #220]	; (800e1d0 <USB_SetTurnaroundTime+0x128>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d202      	bcs.n	800e0fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e0f8:	230d      	movs	r3, #13
 800e0fa:	617b      	str	r3, [r7, #20]
 800e0fc:	e04c      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	4a33      	ldr	r2, [pc, #204]	; (800e1d0 <USB_SetTurnaroundTime+0x128>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d306      	bcc.n	800e114 <USB_SetTurnaroundTime+0x6c>
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	4a32      	ldr	r2, [pc, #200]	; (800e1d4 <USB_SetTurnaroundTime+0x12c>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d802      	bhi.n	800e114 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e10e:	230c      	movs	r3, #12
 800e110:	617b      	str	r3, [r7, #20]
 800e112:	e041      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	4a2f      	ldr	r2, [pc, #188]	; (800e1d4 <USB_SetTurnaroundTime+0x12c>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d906      	bls.n	800e12a <USB_SetTurnaroundTime+0x82>
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	4a2e      	ldr	r2, [pc, #184]	; (800e1d8 <USB_SetTurnaroundTime+0x130>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d802      	bhi.n	800e12a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e124:	230b      	movs	r3, #11
 800e126:	617b      	str	r3, [r7, #20]
 800e128:	e036      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	4a2a      	ldr	r2, [pc, #168]	; (800e1d8 <USB_SetTurnaroundTime+0x130>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d906      	bls.n	800e140 <USB_SetTurnaroundTime+0x98>
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	4a29      	ldr	r2, [pc, #164]	; (800e1dc <USB_SetTurnaroundTime+0x134>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d802      	bhi.n	800e140 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e13a:	230a      	movs	r3, #10
 800e13c:	617b      	str	r3, [r7, #20]
 800e13e:	e02b      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	4a26      	ldr	r2, [pc, #152]	; (800e1dc <USB_SetTurnaroundTime+0x134>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d906      	bls.n	800e156 <USB_SetTurnaroundTime+0xae>
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	4a25      	ldr	r2, [pc, #148]	; (800e1e0 <USB_SetTurnaroundTime+0x138>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d202      	bcs.n	800e156 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e150:	2309      	movs	r3, #9
 800e152:	617b      	str	r3, [r7, #20]
 800e154:	e020      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	4a21      	ldr	r2, [pc, #132]	; (800e1e0 <USB_SetTurnaroundTime+0x138>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d306      	bcc.n	800e16c <USB_SetTurnaroundTime+0xc4>
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	4a20      	ldr	r2, [pc, #128]	; (800e1e4 <USB_SetTurnaroundTime+0x13c>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d802      	bhi.n	800e16c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e166:	2308      	movs	r3, #8
 800e168:	617b      	str	r3, [r7, #20]
 800e16a:	e015      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	4a1d      	ldr	r2, [pc, #116]	; (800e1e4 <USB_SetTurnaroundTime+0x13c>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d906      	bls.n	800e182 <USB_SetTurnaroundTime+0xda>
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	4a1c      	ldr	r2, [pc, #112]	; (800e1e8 <USB_SetTurnaroundTime+0x140>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d202      	bcs.n	800e182 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e17c:	2307      	movs	r3, #7
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	e00a      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e182:	2306      	movs	r3, #6
 800e184:	617b      	str	r3, [r7, #20]
 800e186:	e007      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e188:	79fb      	ldrb	r3, [r7, #7]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d102      	bne.n	800e194 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e18e:	2309      	movs	r3, #9
 800e190:	617b      	str	r3, [r7, #20]
 800e192:	e001      	b.n	800e198 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e194:	2309      	movs	r3, #9
 800e196:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	68da      	ldr	r2, [r3, #12]
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	029b      	lsls	r3, r3, #10
 800e1ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e1b0:	431a      	orrs	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e1b6:	2300      	movs	r3, #0
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	371c      	adds	r7, #28
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr
 800e1c4:	00d8acbf 	.word	0x00d8acbf
 800e1c8:	00e4e1c0 	.word	0x00e4e1c0
 800e1cc:	00f42400 	.word	0x00f42400
 800e1d0:	01067380 	.word	0x01067380
 800e1d4:	011a499f 	.word	0x011a499f
 800e1d8:	01312cff 	.word	0x01312cff
 800e1dc:	014ca43f 	.word	0x014ca43f
 800e1e0:	016e3600 	.word	0x016e3600
 800e1e4:	01a6ab1f 	.word	0x01a6ab1f
 800e1e8:	01e84800 	.word	0x01e84800

0800e1ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	f043 0201 	orr.w	r2, r3, #1
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	370c      	adds	r7, #12
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr

0800e20e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e20e:	b480      	push	{r7}
 800e210:	b083      	sub	sp, #12
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	f023 0201 	bic.w	r2, r3, #1
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	460b      	mov	r3, r1
 800e23a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e23c:	2300      	movs	r3, #0
 800e23e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e24c:	78fb      	ldrb	r3, [r7, #3]
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d115      	bne.n	800e27e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e25e:	2001      	movs	r0, #1
 800e260:	f7f9 fc2a 	bl	8007ab8 <HAL_Delay>
      ms++;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	3301      	adds	r3, #1
 800e268:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f001 fa45 	bl	800f6fa <USB_GetMode>
 800e270:	4603      	mov	r3, r0
 800e272:	2b01      	cmp	r3, #1
 800e274:	d01e      	beq.n	800e2b4 <USB_SetCurrentMode+0x84>
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2b31      	cmp	r3, #49	; 0x31
 800e27a:	d9f0      	bls.n	800e25e <USB_SetCurrentMode+0x2e>
 800e27c:	e01a      	b.n	800e2b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e27e:	78fb      	ldrb	r3, [r7, #3]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d115      	bne.n	800e2b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e290:	2001      	movs	r0, #1
 800e292:	f7f9 fc11 	bl	8007ab8 <HAL_Delay>
      ms++;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	3301      	adds	r3, #1
 800e29a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f001 fa2c 	bl	800f6fa <USB_GetMode>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d005      	beq.n	800e2b4 <USB_SetCurrentMode+0x84>
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2b31      	cmp	r3, #49	; 0x31
 800e2ac:	d9f0      	bls.n	800e290 <USB_SetCurrentMode+0x60>
 800e2ae:	e001      	b.n	800e2b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e005      	b.n	800e2c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b32      	cmp	r3, #50	; 0x32
 800e2b8:	d101      	bne.n	800e2be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e000      	b.n	800e2c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e2c8:	b084      	sub	sp, #16
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b086      	sub	sp, #24
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e2d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	613b      	str	r3, [r7, #16]
 800e2e6:	e009      	b.n	800e2fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	3340      	adds	r3, #64	; 0x40
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4413      	add	r3, r2
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	613b      	str	r3, [r7, #16]
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	2b0e      	cmp	r3, #14
 800e300:	d9f2      	bls.n	800e2e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e304:	2b00      	cmp	r3, #0
 800e306:	d11c      	bne.n	800e342 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e316:	f043 0302 	orr.w	r3, r3, #2
 800e31a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e320:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e338:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	639a      	str	r2, [r3, #56]	; 0x38
 800e340:	e00b      	b.n	800e35a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e346:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e352:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e360:	461a      	mov	r2, r3
 800e362:	2300      	movs	r3, #0
 800e364:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e36c:	4619      	mov	r1, r3
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e374:	461a      	mov	r2, r3
 800e376:	680b      	ldr	r3, [r1, #0]
 800e378:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d10c      	bne.n	800e39a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e382:	2b00      	cmp	r3, #0
 800e384:	d104      	bne.n	800e390 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e386:	2100      	movs	r1, #0
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f965 	bl	800e658 <USB_SetDevSpeed>
 800e38e:	e008      	b.n	800e3a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e390:	2101      	movs	r1, #1
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 f960 	bl	800e658 <USB_SetDevSpeed>
 800e398:	e003      	b.n	800e3a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e39a:	2103      	movs	r1, #3
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 f95b 	bl	800e658 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e3a2:	2110      	movs	r1, #16
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 f8f3 	bl	800e590 <USB_FlushTxFifo>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 f91f 	bl	800e5f8 <USB_FlushRxFifo>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	2300      	movs	r3, #0
 800e3da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	613b      	str	r3, [r7, #16]
 800e3ec:	e043      	b.n	800e476 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	015a      	lsls	r2, r3, #5
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e404:	d118      	bne.n	800e438 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d10a      	bne.n	800e422 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	015a      	lsls	r2, r3, #5
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	4413      	add	r3, r2
 800e414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e418:	461a      	mov	r2, r3
 800e41a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e41e:	6013      	str	r3, [r2, #0]
 800e420:	e013      	b.n	800e44a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	015a      	lsls	r2, r3, #5
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	4413      	add	r3, r2
 800e42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e42e:	461a      	mov	r2, r3
 800e430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e434:	6013      	str	r3, [r2, #0]
 800e436:	e008      	b.n	800e44a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	015a      	lsls	r2, r3, #5
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	4413      	add	r3, r2
 800e440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e444:	461a      	mov	r2, r3
 800e446:	2300      	movs	r3, #0
 800e448:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	015a      	lsls	r2, r3, #5
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	4413      	add	r3, r2
 800e452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e456:	461a      	mov	r2, r3
 800e458:	2300      	movs	r3, #0
 800e45a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	015a      	lsls	r2, r3, #5
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	4413      	add	r3, r2
 800e464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e468:	461a      	mov	r2, r3
 800e46a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e46e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	3301      	adds	r3, #1
 800e474:	613b      	str	r3, [r7, #16]
 800e476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e478:	693a      	ldr	r2, [r7, #16]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d3b7      	bcc.n	800e3ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e47e:	2300      	movs	r3, #0
 800e480:	613b      	str	r3, [r7, #16]
 800e482:	e043      	b.n	800e50c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	015a      	lsls	r2, r3, #5
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e49a:	d118      	bne.n	800e4ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d10a      	bne.n	800e4b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	015a      	lsls	r2, r3, #5
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4b4:	6013      	str	r3, [r2, #0]
 800e4b6:	e013      	b.n	800e4e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	015a      	lsls	r2, r3, #5
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	e008      	b.n	800e4e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	015a      	lsls	r2, r3, #5
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	4413      	add	r3, r2
 800e4d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4da:	461a      	mov	r2, r3
 800e4dc:	2300      	movs	r3, #0
 800e4de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	015a      	lsls	r2, r3, #5
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	015a      	lsls	r2, r3, #5
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4fe:	461a      	mov	r2, r3
 800e500:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e504:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	3301      	adds	r3, #1
 800e50a:	613b      	str	r3, [r7, #16]
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	429a      	cmp	r2, r3
 800e512:	d3b7      	bcc.n	800e484 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e51a:	691b      	ldr	r3, [r3, #16]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e526:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e534:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d105      	bne.n	800e548 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	f043 0210 	orr.w	r2, r3, #16
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	699a      	ldr	r2, [r3, #24]
 800e54c:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <USB_DevInit+0x2c4>)
 800e54e:	4313      	orrs	r3, r2
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e556:	2b00      	cmp	r3, #0
 800e558:	d005      	beq.n	800e566 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	699b      	ldr	r3, [r3, #24]
 800e55e:	f043 0208 	orr.w	r2, r3, #8
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d107      	bne.n	800e57c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e574:	f043 0304 	orr.w	r3, r3, #4
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3718      	adds	r7, #24
 800e582:	46bd      	mov	sp, r7
 800e584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e588:	b004      	add	sp, #16
 800e58a:	4770      	bx	lr
 800e58c:	803c3800 	.word	0x803c3800

0800e590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e59a:	2300      	movs	r3, #0
 800e59c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	4a13      	ldr	r2, [pc, #76]	; (800e5f4 <USB_FlushTxFifo+0x64>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d901      	bls.n	800e5b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e01b      	b.n	800e5e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	daf2      	bge.n	800e59e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	019b      	lsls	r3, r3, #6
 800e5c0:	f043 0220 	orr.w	r2, r3, #32
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	4a08      	ldr	r2, [pc, #32]	; (800e5f4 <USB_FlushTxFifo+0x64>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d901      	bls.n	800e5da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	e006      	b.n	800e5e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	f003 0320 	and.w	r3, r3, #32
 800e5e2:	2b20      	cmp	r3, #32
 800e5e4:	d0f0      	beq.n	800e5c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3714      	adds	r7, #20
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr
 800e5f4:	00030d40 	.word	0x00030d40

0800e5f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e600:	2300      	movs	r3, #0
 800e602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	3301      	adds	r3, #1
 800e608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	4a11      	ldr	r2, [pc, #68]	; (800e654 <USB_FlushRxFifo+0x5c>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d901      	bls.n	800e616 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e612:	2303      	movs	r3, #3
 800e614:	e018      	b.n	800e648 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	daf2      	bge.n	800e604 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e61e:	2300      	movs	r3, #0
 800e620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2210      	movs	r2, #16
 800e626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	3301      	adds	r3, #1
 800e62c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	4a08      	ldr	r2, [pc, #32]	; (800e654 <USB_FlushRxFifo+0x5c>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d901      	bls.n	800e63a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e636:	2303      	movs	r3, #3
 800e638:	e006      	b.n	800e648 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	691b      	ldr	r3, [r3, #16]
 800e63e:	f003 0310 	and.w	r3, r3, #16
 800e642:	2b10      	cmp	r3, #16
 800e644:	d0f0      	beq.n	800e628 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3714      	adds	r7, #20
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	00030d40 	.word	0x00030d40

0800e658 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	460b      	mov	r3, r1
 800e662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	78fb      	ldrb	r3, [r7, #3]
 800e672:	68f9      	ldr	r1, [r7, #12]
 800e674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e678:	4313      	orrs	r3, r2
 800e67a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3714      	adds	r7, #20
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr

0800e68a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e68a:	b480      	push	{r7}
 800e68c:	b087      	sub	sp, #28
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	f003 0306 	and.w	r3, r3, #6
 800e6a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d102      	bne.n	800e6b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	75fb      	strb	r3, [r7, #23]
 800e6ae:	e00a      	b.n	800e6c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d002      	beq.n	800e6bc <USB_GetDevSpeed+0x32>
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2b06      	cmp	r3, #6
 800e6ba:	d102      	bne.n	800e6c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e6bc:	2302      	movs	r3, #2
 800e6be:	75fb      	strb	r3, [r7, #23]
 800e6c0:	e001      	b.n	800e6c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e6c2:	230f      	movs	r3, #15
 800e6c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	371c      	adds	r7, #28
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	785b      	ldrb	r3, [r3, #1]
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d13a      	bne.n	800e766 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6f6:	69da      	ldr	r2, [r3, #28]
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	f003 030f 	and.w	r3, r3, #15
 800e700:	2101      	movs	r1, #1
 800e702:	fa01 f303 	lsl.w	r3, r1, r3
 800e706:	b29b      	uxth	r3, r3
 800e708:	68f9      	ldr	r1, [r7, #12]
 800e70a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e70e:	4313      	orrs	r3, r2
 800e710:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	015a      	lsls	r2, r3, #5
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	4413      	add	r3, r2
 800e71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e724:	2b00      	cmp	r3, #0
 800e726:	d155      	bne.n	800e7d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	015a      	lsls	r2, r3, #5
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	4413      	add	r3, r2
 800e730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	791b      	ldrb	r3, [r3, #4]
 800e742:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e744:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	059b      	lsls	r3, r3, #22
 800e74a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e74c:	4313      	orrs	r3, r2
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	0151      	lsls	r1, r2, #5
 800e752:	68fa      	ldr	r2, [r7, #12]
 800e754:	440a      	add	r2, r1
 800e756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e75a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e75e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e762:	6013      	str	r3, [r2, #0]
 800e764:	e036      	b.n	800e7d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e76c:	69da      	ldr	r2, [r3, #28]
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	f003 030f 	and.w	r3, r3, #15
 800e776:	2101      	movs	r1, #1
 800e778:	fa01 f303 	lsl.w	r3, r1, r3
 800e77c:	041b      	lsls	r3, r3, #16
 800e77e:	68f9      	ldr	r1, [r7, #12]
 800e780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e784:	4313      	orrs	r3, r2
 800e786:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	015a      	lsls	r2, r3, #5
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	4413      	add	r3, r2
 800e790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d11a      	bne.n	800e7d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	015a      	lsls	r2, r3, #5
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	791b      	ldrb	r3, [r3, #4]
 800e7b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e7ba:	430b      	orrs	r3, r1
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	0151      	lsls	r1, r2, #5
 800e7c2:	68fa      	ldr	r2, [r7, #12]
 800e7c4:	440a      	add	r2, r1
 800e7c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
	...

0800e7e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	785b      	ldrb	r3, [r3, #1]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d161      	bne.n	800e8c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	015a      	lsls	r2, r3, #5
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	4413      	add	r3, r2
 800e808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e816:	d11f      	bne.n	800e858 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	015a      	lsls	r2, r3, #5
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	4413      	add	r3, r2
 800e820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	68ba      	ldr	r2, [r7, #8]
 800e828:	0151      	lsls	r1, r2, #5
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	440a      	add	r2, r1
 800e82e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e832:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e836:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	015a      	lsls	r2, r3, #5
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	4413      	add	r3, r2
 800e840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	68ba      	ldr	r2, [r7, #8]
 800e848:	0151      	lsls	r1, r2, #5
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	440a      	add	r2, r1
 800e84e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e852:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e856:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e85e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	f003 030f 	and.w	r3, r3, #15
 800e868:	2101      	movs	r1, #1
 800e86a:	fa01 f303 	lsl.w	r3, r1, r3
 800e86e:	b29b      	uxth	r3, r3
 800e870:	43db      	mvns	r3, r3
 800e872:	68f9      	ldr	r1, [r7, #12]
 800e874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e878:	4013      	ands	r3, r2
 800e87a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e882:	69da      	ldr	r2, [r3, #28]
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	f003 030f 	and.w	r3, r3, #15
 800e88c:	2101      	movs	r1, #1
 800e88e:	fa01 f303 	lsl.w	r3, r1, r3
 800e892:	b29b      	uxth	r3, r3
 800e894:	43db      	mvns	r3, r3
 800e896:	68f9      	ldr	r1, [r7, #12]
 800e898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e89c:	4013      	ands	r3, r2
 800e89e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	015a      	lsls	r2, r3, #5
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	0159      	lsls	r1, r3, #5
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	440b      	add	r3, r1
 800e8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	4b35      	ldr	r3, [pc, #212]	; (800e994 <USB_DeactivateEndpoint+0x1b0>)
 800e8be:	4013      	ands	r3, r2
 800e8c0:	600b      	str	r3, [r1, #0]
 800e8c2:	e060      	b.n	800e986 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	015a      	lsls	r2, r3, #5
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8da:	d11f      	bne.n	800e91c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	015a      	lsls	r2, r3, #5
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68ba      	ldr	r2, [r7, #8]
 800e8ec:	0151      	lsls	r1, r2, #5
 800e8ee:	68fa      	ldr	r2, [r7, #12]
 800e8f0:	440a      	add	r2, r1
 800e8f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e8fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	015a      	lsls	r2, r3, #5
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	4413      	add	r3, r2
 800e904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	0151      	lsls	r1, r2, #5
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	440a      	add	r2, r1
 800e912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e916:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e91a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	f003 030f 	and.w	r3, r3, #15
 800e92c:	2101      	movs	r1, #1
 800e92e:	fa01 f303 	lsl.w	r3, r1, r3
 800e932:	041b      	lsls	r3, r3, #16
 800e934:	43db      	mvns	r3, r3
 800e936:	68f9      	ldr	r1, [r7, #12]
 800e938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e93c:	4013      	ands	r3, r2
 800e93e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e946:	69da      	ldr	r2, [r3, #28]
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	f003 030f 	and.w	r3, r3, #15
 800e950:	2101      	movs	r1, #1
 800e952:	fa01 f303 	lsl.w	r3, r1, r3
 800e956:	041b      	lsls	r3, r3, #16
 800e958:	43db      	mvns	r3, r3
 800e95a:	68f9      	ldr	r1, [r7, #12]
 800e95c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e960:	4013      	ands	r3, r2
 800e962:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	015a      	lsls	r2, r3, #5
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	4413      	add	r3, r2
 800e96c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	0159      	lsls	r1, r3, #5
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	440b      	add	r3, r1
 800e97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e97e:	4619      	mov	r1, r3
 800e980:	4b05      	ldr	r3, [pc, #20]	; (800e998 <USB_DeactivateEndpoint+0x1b4>)
 800e982:	4013      	ands	r3, r2
 800e984:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e986:	2300      	movs	r3, #0
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3714      	adds	r7, #20
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr
 800e994:	ec337800 	.word	0xec337800
 800e998:	eff37800 	.word	0xeff37800

0800e99c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b08a      	sub	sp, #40	; 0x28
 800e9a0:	af02      	add	r7, sp, #8
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	785b      	ldrb	r3, [r3, #1]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	f040 815c 	bne.w	800ec76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d132      	bne.n	800ea2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	015a      	lsls	r2, r3, #5
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9d2:	691b      	ldr	r3, [r3, #16]
 800e9d4:	69ba      	ldr	r2, [r7, #24]
 800e9d6:	0151      	lsls	r1, r2, #5
 800e9d8:	69fa      	ldr	r2, [r7, #28]
 800e9da:	440a      	add	r2, r1
 800e9dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e9e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e9e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	015a      	lsls	r2, r3, #5
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9f6:	691b      	ldr	r3, [r3, #16]
 800e9f8:	69ba      	ldr	r2, [r7, #24]
 800e9fa:	0151      	lsls	r1, r2, #5
 800e9fc:	69fa      	ldr	r2, [r7, #28]
 800e9fe:	440a      	add	r2, r1
 800ea00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	015a      	lsls	r2, r3, #5
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	4413      	add	r3, r2
 800ea12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea16:	691b      	ldr	r3, [r3, #16]
 800ea18:	69ba      	ldr	r2, [r7, #24]
 800ea1a:	0151      	lsls	r1, r2, #5
 800ea1c:	69fa      	ldr	r2, [r7, #28]
 800ea1e:	440a      	add	r2, r1
 800ea20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea24:	0cdb      	lsrs	r3, r3, #19
 800ea26:	04db      	lsls	r3, r3, #19
 800ea28:	6113      	str	r3, [r2, #16]
 800ea2a:	e074      	b.n	800eb16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	015a      	lsls	r2, r3, #5
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	4413      	add	r3, r2
 800ea34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	69ba      	ldr	r2, [r7, #24]
 800ea3c:	0151      	lsls	r1, r2, #5
 800ea3e:	69fa      	ldr	r2, [r7, #28]
 800ea40:	440a      	add	r2, r1
 800ea42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea46:	0cdb      	lsrs	r3, r3, #19
 800ea48:	04db      	lsls	r3, r3, #19
 800ea4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	015a      	lsls	r2, r3, #5
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	4413      	add	r3, r2
 800ea54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	69ba      	ldr	r2, [r7, #24]
 800ea5c:	0151      	lsls	r1, r2, #5
 800ea5e:	69fa      	ldr	r2, [r7, #28]
 800ea60:	440a      	add	r2, r1
 800ea62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	015a      	lsls	r2, r3, #5
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	4413      	add	r3, r2
 800ea78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	6999      	ldr	r1, [r3, #24]
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	440b      	add	r3, r1
 800ea88:	1e59      	subs	r1, r3, #1
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ea92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ea94:	4b9d      	ldr	r3, [pc, #628]	; (800ed0c <USB_EPStartXfer+0x370>)
 800ea96:	400b      	ands	r3, r1
 800ea98:	69b9      	ldr	r1, [r7, #24]
 800ea9a:	0148      	lsls	r0, r1, #5
 800ea9c:	69f9      	ldr	r1, [r7, #28]
 800ea9e:	4401      	add	r1, r0
 800eaa0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	015a      	lsls	r2, r3, #5
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	4413      	add	r3, r2
 800eab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eab4:	691a      	ldr	r2, [r3, #16]
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	699b      	ldr	r3, [r3, #24]
 800eaba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eabe:	69b9      	ldr	r1, [r7, #24]
 800eac0:	0148      	lsls	r0, r1, #5
 800eac2:	69f9      	ldr	r1, [r7, #28]
 800eac4:	4401      	add	r1, r0
 800eac6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eaca:	4313      	orrs	r3, r2
 800eacc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	791b      	ldrb	r3, [r3, #4]
 800ead2:	2b01      	cmp	r3, #1
 800ead4:	d11f      	bne.n	800eb16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	015a      	lsls	r2, r3, #5
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	4413      	add	r3, r2
 800eade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	69ba      	ldr	r2, [r7, #24]
 800eae6:	0151      	lsls	r1, r2, #5
 800eae8:	69fa      	ldr	r2, [r7, #28]
 800eaea:	440a      	add	r2, r1
 800eaec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eaf0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800eaf4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	015a      	lsls	r2, r3, #5
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	4413      	add	r3, r2
 800eafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb02:	691b      	ldr	r3, [r3, #16]
 800eb04:	69ba      	ldr	r2, [r7, #24]
 800eb06:	0151      	lsls	r1, r2, #5
 800eb08:	69fa      	ldr	r2, [r7, #28]
 800eb0a:	440a      	add	r2, r1
 800eb0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eb14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800eb16:	79fb      	ldrb	r3, [r7, #7]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d14b      	bne.n	800ebb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	695b      	ldr	r3, [r3, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d009      	beq.n	800eb38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	015a      	lsls	r2, r3, #5
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb30:	461a      	mov	r2, r3
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	695b      	ldr	r3, [r3, #20]
 800eb36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	791b      	ldrb	r3, [r3, #4]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d128      	bne.n	800eb92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d110      	bne.n	800eb72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eb50:	69bb      	ldr	r3, [r7, #24]
 800eb52:	015a      	lsls	r2, r3, #5
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	4413      	add	r3, r2
 800eb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	69ba      	ldr	r2, [r7, #24]
 800eb60:	0151      	lsls	r1, r2, #5
 800eb62:	69fa      	ldr	r2, [r7, #28]
 800eb64:	440a      	add	r2, r1
 800eb66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eb6e:	6013      	str	r3, [r2, #0]
 800eb70:	e00f      	b.n	800eb92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	015a      	lsls	r2, r3, #5
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	4413      	add	r3, r2
 800eb7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	69ba      	ldr	r2, [r7, #24]
 800eb82:	0151      	lsls	r1, r2, #5
 800eb84:	69fa      	ldr	r2, [r7, #28]
 800eb86:	440a      	add	r2, r1
 800eb88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	015a      	lsls	r2, r3, #5
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	4413      	add	r3, r2
 800eb9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	69ba      	ldr	r2, [r7, #24]
 800eba2:	0151      	lsls	r1, r2, #5
 800eba4:	69fa      	ldr	r2, [r7, #28]
 800eba6:	440a      	add	r2, r1
 800eba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ebb0:	6013      	str	r3, [r2, #0]
 800ebb2:	e133      	b.n	800ee1c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	015a      	lsls	r2, r3, #5
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	4413      	add	r3, r2
 800ebbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	69ba      	ldr	r2, [r7, #24]
 800ebc4:	0151      	lsls	r1, r2, #5
 800ebc6:	69fa      	ldr	r2, [r7, #28]
 800ebc8:	440a      	add	r2, r1
 800ebca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ebd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	791b      	ldrb	r3, [r3, #4]
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d015      	beq.n	800ec08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	699b      	ldr	r3, [r3, #24]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 811b 	beq.w	800ee1c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	f003 030f 	and.w	r3, r3, #15
 800ebf6:	2101      	movs	r1, #1
 800ebf8:	fa01 f303 	lsl.w	r3, r1, r3
 800ebfc:	69f9      	ldr	r1, [r7, #28]
 800ebfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec02:	4313      	orrs	r3, r2
 800ec04:	634b      	str	r3, [r1, #52]	; 0x34
 800ec06:	e109      	b.n	800ee1c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d110      	bne.n	800ec3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	015a      	lsls	r2, r3, #5
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	4413      	add	r3, r2
 800ec20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	69ba      	ldr	r2, [r7, #24]
 800ec28:	0151      	lsls	r1, r2, #5
 800ec2a:	69fa      	ldr	r2, [r7, #28]
 800ec2c:	440a      	add	r2, r1
 800ec2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec36:	6013      	str	r3, [r2, #0]
 800ec38:	e00f      	b.n	800ec5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	015a      	lsls	r2, r3, #5
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	4413      	add	r3, r2
 800ec42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	69ba      	ldr	r2, [r7, #24]
 800ec4a:	0151      	lsls	r1, r2, #5
 800ec4c:	69fa      	ldr	r2, [r7, #28]
 800ec4e:	440a      	add	r2, r1
 800ec50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	6919      	ldr	r1, [r3, #16]
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	781a      	ldrb	r2, [r3, #0]
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	699b      	ldr	r3, [r3, #24]
 800ec66:	b298      	uxth	r0, r3
 800ec68:	79fb      	ldrb	r3, [r7, #7]
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f000 fade 	bl	800f230 <USB_WritePacket>
 800ec74:	e0d2      	b.n	800ee1c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	015a      	lsls	r2, r3, #5
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	69ba      	ldr	r2, [r7, #24]
 800ec86:	0151      	lsls	r1, r2, #5
 800ec88:	69fa      	ldr	r2, [r7, #28]
 800ec8a:	440a      	add	r2, r1
 800ec8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec90:	0cdb      	lsrs	r3, r3, #19
 800ec92:	04db      	lsls	r3, r3, #19
 800ec94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	015a      	lsls	r2, r3, #5
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eca2:	691b      	ldr	r3, [r3, #16]
 800eca4:	69ba      	ldr	r2, [r7, #24]
 800eca6:	0151      	lsls	r1, r2, #5
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	440a      	add	r2, r1
 800ecac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ecb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ecb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	699b      	ldr	r3, [r3, #24]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d126      	bne.n	800ed10 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	015a      	lsls	r2, r3, #5
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	4413      	add	r3, r2
 800ecca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecce:	691a      	ldr	r2, [r3, #16]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ecd8:	69b9      	ldr	r1, [r7, #24]
 800ecda:	0148      	lsls	r0, r1, #5
 800ecdc:	69f9      	ldr	r1, [r7, #28]
 800ecde:	4401      	add	r1, r0
 800ece0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ece4:	4313      	orrs	r3, r2
 800ece6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	015a      	lsls	r2, r3, #5
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	4413      	add	r3, r2
 800ecf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecf4:	691b      	ldr	r3, [r3, #16]
 800ecf6:	69ba      	ldr	r2, [r7, #24]
 800ecf8:	0151      	lsls	r1, r2, #5
 800ecfa:	69fa      	ldr	r2, [r7, #28]
 800ecfc:	440a      	add	r2, r1
 800ecfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed06:	6113      	str	r3, [r2, #16]
 800ed08:	e03a      	b.n	800ed80 <USB_EPStartXfer+0x3e4>
 800ed0a:	bf00      	nop
 800ed0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	699a      	ldr	r2, [r3, #24]
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	4413      	add	r3, r2
 800ed1a:	1e5a      	subs	r2, r3, #1
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed24:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	68db      	ldr	r3, [r3, #12]
 800ed2a:	8afa      	ldrh	r2, [r7, #22]
 800ed2c:	fb03 f202 	mul.w	r2, r3, r2
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	015a      	lsls	r2, r3, #5
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed40:	691a      	ldr	r2, [r3, #16]
 800ed42:	8afb      	ldrh	r3, [r7, #22]
 800ed44:	04d9      	lsls	r1, r3, #19
 800ed46:	4b38      	ldr	r3, [pc, #224]	; (800ee28 <USB_EPStartXfer+0x48c>)
 800ed48:	400b      	ands	r3, r1
 800ed4a:	69b9      	ldr	r1, [r7, #24]
 800ed4c:	0148      	lsls	r0, r1, #5
 800ed4e:	69f9      	ldr	r1, [r7, #28]
 800ed50:	4401      	add	r1, r0
 800ed52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ed56:	4313      	orrs	r3, r2
 800ed58:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	015a      	lsls	r2, r3, #5
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	4413      	add	r3, r2
 800ed62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed66:	691a      	ldr	r2, [r3, #16]
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	69db      	ldr	r3, [r3, #28]
 800ed6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed70:	69b9      	ldr	r1, [r7, #24]
 800ed72:	0148      	lsls	r0, r1, #5
 800ed74:	69f9      	ldr	r1, [r7, #28]
 800ed76:	4401      	add	r1, r0
 800ed78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ed80:	79fb      	ldrb	r3, [r7, #7]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d10d      	bne.n	800eda2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d009      	beq.n	800eda2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	6919      	ldr	r1, [r3, #16]
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	015a      	lsls	r2, r3, #5
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	4413      	add	r3, r2
 800ed9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed9e:	460a      	mov	r2, r1
 800eda0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	791b      	ldrb	r3, [r3, #4]
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d128      	bne.n	800edfc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d110      	bne.n	800eddc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	015a      	lsls	r2, r3, #5
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	4413      	add	r3, r2
 800edc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	69ba      	ldr	r2, [r7, #24]
 800edca:	0151      	lsls	r1, r2, #5
 800edcc:	69fa      	ldr	r2, [r7, #28]
 800edce:	440a      	add	r2, r1
 800edd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800edd8:	6013      	str	r3, [r2, #0]
 800edda:	e00f      	b.n	800edfc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	015a      	lsls	r2, r3, #5
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	4413      	add	r3, r2
 800ede4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	69ba      	ldr	r2, [r7, #24]
 800edec:	0151      	lsls	r1, r2, #5
 800edee:	69fa      	ldr	r2, [r7, #28]
 800edf0:	440a      	add	r2, r1
 800edf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	015a      	lsls	r2, r3, #5
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	4413      	add	r3, r2
 800ee04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	69ba      	ldr	r2, [r7, #24]
 800ee0c:	0151      	lsls	r1, r2, #5
 800ee0e:	69fa      	ldr	r2, [r7, #28]
 800ee10:	440a      	add	r2, r1
 800ee12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3720      	adds	r7, #32
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	1ff80000 	.word	0x1ff80000

0800ee2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b087      	sub	sp, #28
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	4613      	mov	r3, r2
 800ee38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	785b      	ldrb	r3, [r3, #1]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	f040 80ce 	bne.w	800efea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	699b      	ldr	r3, [r3, #24]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d132      	bne.n	800eebc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	015a      	lsls	r2, r3, #5
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	693a      	ldr	r2, [r7, #16]
 800ee66:	0151      	lsls	r1, r2, #5
 800ee68:	697a      	ldr	r2, [r7, #20]
 800ee6a:	440a      	add	r2, r1
 800ee6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	015a      	lsls	r2, r3, #5
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	4413      	add	r3, r2
 800ee82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	0151      	lsls	r1, r2, #5
 800ee8c:	697a      	ldr	r2, [r7, #20]
 800ee8e:	440a      	add	r2, r1
 800ee90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	015a      	lsls	r2, r3, #5
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	4413      	add	r3, r2
 800eea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea6:	691b      	ldr	r3, [r3, #16]
 800eea8:	693a      	ldr	r2, [r7, #16]
 800eeaa:	0151      	lsls	r1, r2, #5
 800eeac:	697a      	ldr	r2, [r7, #20]
 800eeae:	440a      	add	r2, r1
 800eeb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eeb4:	0cdb      	lsrs	r3, r3, #19
 800eeb6:	04db      	lsls	r3, r3, #19
 800eeb8:	6113      	str	r3, [r2, #16]
 800eeba:	e04e      	b.n	800ef5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	015a      	lsls	r2, r3, #5
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	4413      	add	r3, r2
 800eec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	693a      	ldr	r2, [r7, #16]
 800eecc:	0151      	lsls	r1, r2, #5
 800eece:	697a      	ldr	r2, [r7, #20]
 800eed0:	440a      	add	r2, r1
 800eed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eed6:	0cdb      	lsrs	r3, r3, #19
 800eed8:	04db      	lsls	r3, r3, #19
 800eeda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	015a      	lsls	r2, r3, #5
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	4413      	add	r3, r2
 800eee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eee8:	691b      	ldr	r3, [r3, #16]
 800eeea:	693a      	ldr	r2, [r7, #16]
 800eeec:	0151      	lsls	r1, r2, #5
 800eeee:	697a      	ldr	r2, [r7, #20]
 800eef0:	440a      	add	r2, r1
 800eef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eef6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eefa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eefe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	699a      	ldr	r2, [r3, #24]
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d903      	bls.n	800ef14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	015a      	lsls	r2, r3, #5
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	693a      	ldr	r2, [r7, #16]
 800ef24:	0151      	lsls	r1, r2, #5
 800ef26:	697a      	ldr	r2, [r7, #20]
 800ef28:	440a      	add	r2, r1
 800ef2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ef32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	015a      	lsls	r2, r3, #5
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef40:	691a      	ldr	r2, [r3, #16]
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	699b      	ldr	r3, [r3, #24]
 800ef46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef4a:	6939      	ldr	r1, [r7, #16]
 800ef4c:	0148      	lsls	r0, r1, #5
 800ef4e:	6979      	ldr	r1, [r7, #20]
 800ef50:	4401      	add	r1, r0
 800ef52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ef56:	4313      	orrs	r3, r2
 800ef58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ef5a:	79fb      	ldrb	r3, [r7, #7]
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d11e      	bne.n	800ef9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d009      	beq.n	800ef7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	015a      	lsls	r2, r3, #5
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	4413      	add	r3, r2
 800ef70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef74:	461a      	mov	r2, r3
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	695b      	ldr	r3, [r3, #20]
 800ef7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	015a      	lsls	r2, r3, #5
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	4413      	add	r3, r2
 800ef84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	693a      	ldr	r2, [r7, #16]
 800ef8c:	0151      	lsls	r1, r2, #5
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	440a      	add	r2, r1
 800ef92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef9a:	6013      	str	r3, [r2, #0]
 800ef9c:	e097      	b.n	800f0ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	015a      	lsls	r2, r3, #5
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	4413      	add	r3, r2
 800efa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	693a      	ldr	r2, [r7, #16]
 800efae:	0151      	lsls	r1, r2, #5
 800efb0:	697a      	ldr	r2, [r7, #20]
 800efb2:	440a      	add	r2, r1
 800efb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	699b      	ldr	r3, [r3, #24]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f000 8083 	beq.w	800f0ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	f003 030f 	and.w	r3, r3, #15
 800efd8:	2101      	movs	r1, #1
 800efda:	fa01 f303 	lsl.w	r3, r1, r3
 800efde:	6979      	ldr	r1, [r7, #20]
 800efe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efe4:	4313      	orrs	r3, r2
 800efe6:	634b      	str	r3, [r1, #52]	; 0x34
 800efe8:	e071      	b.n	800f0ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	015a      	lsls	r2, r3, #5
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	4413      	add	r3, r2
 800eff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff6:	691b      	ldr	r3, [r3, #16]
 800eff8:	693a      	ldr	r2, [r7, #16]
 800effa:	0151      	lsls	r1, r2, #5
 800effc:	697a      	ldr	r2, [r7, #20]
 800effe:	440a      	add	r2, r1
 800f000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f004:	0cdb      	lsrs	r3, r3, #19
 800f006:	04db      	lsls	r3, r3, #19
 800f008:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	015a      	lsls	r2, r3, #5
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	4413      	add	r3, r2
 800f012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f016:	691b      	ldr	r3, [r3, #16]
 800f018:	693a      	ldr	r2, [r7, #16]
 800f01a:	0151      	lsls	r1, r2, #5
 800f01c:	697a      	ldr	r2, [r7, #20]
 800f01e:	440a      	add	r2, r1
 800f020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f024:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f028:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f02c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d003      	beq.n	800f03e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	68da      	ldr	r2, [r3, #12]
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	68da      	ldr	r2, [r3, #12]
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	015a      	lsls	r2, r3, #5
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	4413      	add	r3, r2
 800f04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f052:	691b      	ldr	r3, [r3, #16]
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	0151      	lsls	r1, r2, #5
 800f058:	697a      	ldr	r2, [r7, #20]
 800f05a:	440a      	add	r2, r1
 800f05c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	015a      	lsls	r2, r3, #5
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	4413      	add	r3, r2
 800f06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f072:	691a      	ldr	r2, [r3, #16]
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	69db      	ldr	r3, [r3, #28]
 800f078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f07c:	6939      	ldr	r1, [r7, #16]
 800f07e:	0148      	lsls	r0, r1, #5
 800f080:	6979      	ldr	r1, [r7, #20]
 800f082:	4401      	add	r1, r0
 800f084:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f088:	4313      	orrs	r3, r2
 800f08a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f08c:	79fb      	ldrb	r3, [r7, #7]
 800f08e:	2b01      	cmp	r3, #1
 800f090:	d10d      	bne.n	800f0ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d009      	beq.n	800f0ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	6919      	ldr	r1, [r3, #16]
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	015a      	lsls	r2, r3, #5
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0aa:	460a      	mov	r2, r1
 800f0ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	015a      	lsls	r2, r3, #5
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	693a      	ldr	r2, [r7, #16]
 800f0be:	0151      	lsls	r1, r2, #5
 800f0c0:	697a      	ldr	r2, [r7, #20]
 800f0c2:	440a      	add	r2, r1
 800f0c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f0cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	371c      	adds	r7, #28
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b087      	sub	sp, #28
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	785b      	ldrb	r3, [r3, #1]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d14a      	bne.n	800f190 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	015a      	lsls	r2, r3, #5
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	4413      	add	r3, r2
 800f104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f10e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f112:	f040 8086 	bne.w	800f222 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	015a      	lsls	r2, r3, #5
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	4413      	add	r3, r2
 800f120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	7812      	ldrb	r2, [r2, #0]
 800f12a:	0151      	lsls	r1, r2, #5
 800f12c:	693a      	ldr	r2, [r7, #16]
 800f12e:	440a      	add	r2, r1
 800f130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f134:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f138:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	015a      	lsls	r2, r3, #5
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	4413      	add	r3, r2
 800f144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	7812      	ldrb	r2, [r2, #0]
 800f14e:	0151      	lsls	r1, r2, #5
 800f150:	693a      	ldr	r2, [r7, #16]
 800f152:	440a      	add	r2, r1
 800f154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f15c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	3301      	adds	r3, #1
 800f162:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f242 7210 	movw	r2, #10000	; 0x2710
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d902      	bls.n	800f174 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f16e:	2301      	movs	r3, #1
 800f170:	75fb      	strb	r3, [r7, #23]
          break;
 800f172:	e056      	b.n	800f222 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	015a      	lsls	r2, r3, #5
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	4413      	add	r3, r2
 800f17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f18c:	d0e7      	beq.n	800f15e <USB_EPStopXfer+0x82>
 800f18e:	e048      	b.n	800f222 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	015a      	lsls	r2, r3, #5
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	4413      	add	r3, r2
 800f19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f1a8:	d13b      	bne.n	800f222 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	015a      	lsls	r2, r3, #5
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	683a      	ldr	r2, [r7, #0]
 800f1bc:	7812      	ldrb	r2, [r2, #0]
 800f1be:	0151      	lsls	r1, r2, #5
 800f1c0:	693a      	ldr	r2, [r7, #16]
 800f1c2:	440a      	add	r2, r1
 800f1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f1cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	7812      	ldrb	r2, [r2, #0]
 800f1e2:	0151      	lsls	r1, r2, #5
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	440a      	add	r2, r1
 800f1e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f242 7210 	movw	r2, #10000	; 0x2710
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d902      	bls.n	800f208 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	75fb      	strb	r3, [r7, #23]
          break;
 800f206:	e00c      	b.n	800f222 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	015a      	lsls	r2, r3, #5
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	4413      	add	r3, r2
 800f212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f21c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f220:	d0e7      	beq.n	800f1f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f222:	7dfb      	ldrb	r3, [r7, #23]
}
 800f224:	4618      	mov	r0, r3
 800f226:	371c      	adds	r7, #28
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f230:	b480      	push	{r7}
 800f232:	b089      	sub	sp, #36	; 0x24
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	4611      	mov	r1, r2
 800f23c:	461a      	mov	r2, r3
 800f23e:	460b      	mov	r3, r1
 800f240:	71fb      	strb	r3, [r7, #7]
 800f242:	4613      	mov	r3, r2
 800f244:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f24e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f252:	2b00      	cmp	r3, #0
 800f254:	d123      	bne.n	800f29e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f256:	88bb      	ldrh	r3, [r7, #4]
 800f258:	3303      	adds	r3, #3
 800f25a:	089b      	lsrs	r3, r3, #2
 800f25c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f25e:	2300      	movs	r3, #0
 800f260:	61bb      	str	r3, [r7, #24]
 800f262:	e018      	b.n	800f296 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f264:	79fb      	ldrb	r3, [r7, #7]
 800f266:	031a      	lsls	r2, r3, #12
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	4413      	add	r3, r2
 800f26c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f270:	461a      	mov	r2, r3
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	3301      	adds	r3, #1
 800f27c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	3301      	adds	r3, #1
 800f282:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	3301      	adds	r3, #1
 800f288:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	3301      	adds	r3, #1
 800f28e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	3301      	adds	r3, #1
 800f294:	61bb      	str	r3, [r7, #24]
 800f296:	69ba      	ldr	r2, [r7, #24]
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d3e2      	bcc.n	800f264 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f29e:	2300      	movs	r3, #0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3724      	adds	r7, #36	; 0x24
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b08b      	sub	sp, #44	; 0x2c
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f2c2:	88fb      	ldrh	r3, [r7, #6]
 800f2c4:	089b      	lsrs	r3, r3, #2
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f2ca:	88fb      	ldrh	r3, [r7, #6]
 800f2cc:	f003 0303 	and.w	r3, r3, #3
 800f2d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	623b      	str	r3, [r7, #32]
 800f2d6:	e014      	b.n	800f302 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f2d8:	69bb      	ldr	r3, [r7, #24]
 800f2da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	3301      	adds	r3, #1
 800f300:	623b      	str	r3, [r7, #32]
 800f302:	6a3a      	ldr	r2, [r7, #32]
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	429a      	cmp	r2, r3
 800f308:	d3e6      	bcc.n	800f2d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f30a:	8bfb      	ldrh	r3, [r7, #30]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d01e      	beq.n	800f34e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f310:	2300      	movs	r3, #0
 800f312:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f31a:	461a      	mov	r2, r3
 800f31c:	f107 0310 	add.w	r3, r7, #16
 800f320:	6812      	ldr	r2, [r2, #0]
 800f322:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f324:	693a      	ldr	r2, [r7, #16]
 800f326:	6a3b      	ldr	r3, [r7, #32]
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	00db      	lsls	r3, r3, #3
 800f32c:	fa22 f303 	lsr.w	r3, r2, r3
 800f330:	b2da      	uxtb	r2, r3
 800f332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f334:	701a      	strb	r2, [r3, #0]
      i++;
 800f336:	6a3b      	ldr	r3, [r7, #32]
 800f338:	3301      	adds	r3, #1
 800f33a:	623b      	str	r3, [r7, #32]
      pDest++;
 800f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33e:	3301      	adds	r3, #1
 800f340:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f342:	8bfb      	ldrh	r3, [r7, #30]
 800f344:	3b01      	subs	r3, #1
 800f346:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f348:	8bfb      	ldrh	r3, [r7, #30]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1ea      	bne.n	800f324 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f350:	4618      	mov	r0, r3
 800f352:	372c      	adds	r7, #44	; 0x2c
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b085      	sub	sp, #20
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	785b      	ldrb	r3, [r3, #1]
 800f374:	2b01      	cmp	r3, #1
 800f376:	d12c      	bne.n	800f3d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	015a      	lsls	r2, r3, #5
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	4413      	add	r3, r2
 800f380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	db12      	blt.n	800f3b0 <USB_EPSetStall+0x54>
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d00f      	beq.n	800f3b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	015a      	lsls	r2, r3, #5
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	4413      	add	r3, r2
 800f398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	0151      	lsls	r1, r2, #5
 800f3a2:	68fa      	ldr	r2, [r7, #12]
 800f3a4:	440a      	add	r2, r1
 800f3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f3ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	015a      	lsls	r2, r3, #5
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	4413      	add	r3, r2
 800f3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68ba      	ldr	r2, [r7, #8]
 800f3c0:	0151      	lsls	r1, r2, #5
 800f3c2:	68fa      	ldr	r2, [r7, #12]
 800f3c4:	440a      	add	r2, r1
 800f3c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f3ce:	6013      	str	r3, [r2, #0]
 800f3d0:	e02b      	b.n	800f42a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	015a      	lsls	r2, r3, #5
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	4413      	add	r3, r2
 800f3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	db12      	blt.n	800f40a <USB_EPSetStall+0xae>
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00f      	beq.n	800f40a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	015a      	lsls	r2, r3, #5
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	0151      	lsls	r1, r2, #5
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	440a      	add	r2, r1
 800f400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f404:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f408:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	015a      	lsls	r2, r3, #5
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	4413      	add	r3, r2
 800f412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	68ba      	ldr	r2, [r7, #8]
 800f41a:	0151      	lsls	r1, r2, #5
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	440a      	add	r2, r1
 800f420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f428:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3714      	adds	r7, #20
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	785b      	ldrb	r3, [r3, #1]
 800f450:	2b01      	cmp	r3, #1
 800f452:	d128      	bne.n	800f4a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	015a      	lsls	r2, r3, #5
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	4413      	add	r3, r2
 800f45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	68ba      	ldr	r2, [r7, #8]
 800f464:	0151      	lsls	r1, r2, #5
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	440a      	add	r2, r1
 800f46a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f46e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f472:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	791b      	ldrb	r3, [r3, #4]
 800f478:	2b03      	cmp	r3, #3
 800f47a:	d003      	beq.n	800f484 <USB_EPClearStall+0x4c>
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	791b      	ldrb	r3, [r3, #4]
 800f480:	2b02      	cmp	r3, #2
 800f482:	d138      	bne.n	800f4f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	015a      	lsls	r2, r3, #5
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	4413      	add	r3, r2
 800f48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	68ba      	ldr	r2, [r7, #8]
 800f494:	0151      	lsls	r1, r2, #5
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	440a      	add	r2, r1
 800f49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f49e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4a2:	6013      	str	r3, [r2, #0]
 800f4a4:	e027      	b.n	800f4f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	015a      	lsls	r2, r3, #5
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	0151      	lsls	r1, r2, #5
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	440a      	add	r2, r1
 800f4bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f4c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	791b      	ldrb	r3, [r3, #4]
 800f4ca:	2b03      	cmp	r3, #3
 800f4cc:	d003      	beq.n	800f4d6 <USB_EPClearStall+0x9e>
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	791b      	ldrb	r3, [r3, #4]
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d10f      	bne.n	800f4f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	015a      	lsls	r2, r3, #5
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	4413      	add	r3, r2
 800f4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	68ba      	ldr	r2, [r7, #8]
 800f4e6:	0151      	lsls	r1, r2, #5
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	440a      	add	r2, r1
 800f4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3714      	adds	r7, #20
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f504:	b480      	push	{r7}
 800f506:	b085      	sub	sp, #20
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	460b      	mov	r3, r1
 800f50e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	68fa      	ldr	r2, [r7, #12]
 800f51e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f522:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f526:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	78fb      	ldrb	r3, [r7, #3]
 800f532:	011b      	lsls	r3, r3, #4
 800f534:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f538:	68f9      	ldr	r1, [r7, #12]
 800f53a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f53e:	4313      	orrs	r3, r2
 800f540:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	3714      	adds	r7, #20
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f56a:	f023 0303 	bic.w	r3, r3, #3
 800f56e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f57e:	f023 0302 	bic.w	r3, r3, #2
 800f582:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3714      	adds	r7, #20
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr

0800f592 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f592:	b480      	push	{r7}
 800f594:	b085      	sub	sp, #20
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68fa      	ldr	r2, [r7, #12]
 800f5a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f5ac:	f023 0303 	bic.w	r3, r3, #3
 800f5b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f5c0:	f043 0302 	orr.w	r3, r3, #2
 800f5c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f5c6:	2300      	movs	r3, #0
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3714      	adds	r7, #20
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	695b      	ldr	r3, [r3, #20]
 800f5e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	699b      	ldr	r3, [r3, #24]
 800f5e6:	68fa      	ldr	r2, [r7, #12]
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5fa:	b480      	push	{r7}
 800f5fc:	b085      	sub	sp, #20
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f60c:	699b      	ldr	r3, [r3, #24]
 800f60e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f616:	69db      	ldr	r3, [r3, #28]
 800f618:	68ba      	ldr	r2, [r7, #8]
 800f61a:	4013      	ands	r3, r2
 800f61c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	0c1b      	lsrs	r3, r3, #16
}
 800f622:	4618      	mov	r0, r3
 800f624:	3714      	adds	r7, #20
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f62e:	b480      	push	{r7}
 800f630:	b085      	sub	sp, #20
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f640:	699b      	ldr	r3, [r3, #24]
 800f642:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f64a:	69db      	ldr	r3, [r3, #28]
 800f64c:	68ba      	ldr	r2, [r7, #8]
 800f64e:	4013      	ands	r3, r2
 800f650:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	b29b      	uxth	r3, r3
}
 800f656:	4618      	mov	r0, r3
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr

0800f662 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f662:	b480      	push	{r7}
 800f664:	b085      	sub	sp, #20
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	460b      	mov	r3, r1
 800f66c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f672:	78fb      	ldrb	r3, [r7, #3]
 800f674:	015a      	lsls	r2, r3, #5
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	4413      	add	r3, r2
 800f67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f688:	695b      	ldr	r3, [r3, #20]
 800f68a:	68ba      	ldr	r2, [r7, #8]
 800f68c:	4013      	ands	r3, r2
 800f68e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f690:	68bb      	ldr	r3, [r7, #8]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr

0800f69e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f69e:	b480      	push	{r7}
 800f6a0:	b087      	sub	sp, #28
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f6c2:	78fb      	ldrb	r3, [r7, #3]
 800f6c4:	f003 030f 	and.w	r3, r3, #15
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f6ce:	01db      	lsls	r3, r3, #7
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	693a      	ldr	r2, [r7, #16]
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f6d8:	78fb      	ldrb	r3, [r7, #3]
 800f6da:	015a      	lsls	r2, r3, #5
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	4413      	add	r3, r2
 800f6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	693a      	ldr	r2, [r7, #16]
 800f6e8:	4013      	ands	r3, r2
 800f6ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f6ec:	68bb      	ldr	r3, [r7, #8]
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	371c      	adds	r7, #28
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr

0800f6fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f6fa:	b480      	push	{r7}
 800f6fc:	b083      	sub	sp, #12
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	695b      	ldr	r3, [r3, #20]
 800f706:	f003 0301 	and.w	r3, r3, #1
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	370c      	adds	r7, #12
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr

0800f716 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f716:	b480      	push	{r7}
 800f718:	b085      	sub	sp, #20
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f730:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f734:	f023 0307 	bic.w	r3, r3, #7
 800f738:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f74c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b087      	sub	sp, #28
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	460b      	mov	r3, r1
 800f766:	607a      	str	r2, [r7, #4]
 800f768:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	333c      	adds	r3, #60	; 0x3c
 800f772:	3304      	adds	r3, #4
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	4a26      	ldr	r2, [pc, #152]	; (800f814 <USB_EP0_OutStart+0xb8>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d90a      	bls.n	800f796 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f78c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f790:	d101      	bne.n	800f796 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f792:	2300      	movs	r3, #0
 800f794:	e037      	b.n	800f806 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f79c:	461a      	mov	r2, r3
 800f79e:	2300      	movs	r3, #0
 800f7a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7a8:	691b      	ldr	r3, [r3, #16]
 800f7aa:	697a      	ldr	r2, [r7, #20]
 800f7ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7bc:	691b      	ldr	r3, [r3, #16]
 800f7be:	697a      	ldr	r2, [r7, #20]
 800f7c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7c4:	f043 0318 	orr.w	r3, r3, #24
 800f7c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	697a      	ldr	r2, [r7, #20]
 800f7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f7dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f7de:	7afb      	ldrb	r3, [r7, #11]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d10f      	bne.n	800f804 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	697a      	ldr	r2, [r7, #20]
 800f7fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f802:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	371c      	adds	r7, #28
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	4f54300a 	.word	0x4f54300a

0800f818 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f820:	2300      	movs	r3, #0
 800f822:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	3301      	adds	r3, #1
 800f828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	4a13      	ldr	r2, [pc, #76]	; (800f87c <USB_CoreReset+0x64>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d901      	bls.n	800f836 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f832:	2303      	movs	r3, #3
 800f834:	e01b      	b.n	800f86e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	691b      	ldr	r3, [r3, #16]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	daf2      	bge.n	800f824 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f83e:	2300      	movs	r3, #0
 800f840:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	691b      	ldr	r3, [r3, #16]
 800f846:	f043 0201 	orr.w	r2, r3, #1
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3301      	adds	r3, #1
 800f852:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	4a09      	ldr	r2, [pc, #36]	; (800f87c <USB_CoreReset+0x64>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d901      	bls.n	800f860 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f85c:	2303      	movs	r3, #3
 800f85e:	e006      	b.n	800f86e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	691b      	ldr	r3, [r3, #16]
 800f864:	f003 0301 	and.w	r3, r3, #1
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d0f0      	beq.n	800f84e <USB_CoreReset+0x36>

  return HAL_OK;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3714      	adds	r7, #20
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	00030d40 	.word	0x00030d40

0800f880 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f884:	4904      	ldr	r1, [pc, #16]	; (800f898 <MX_FATFS_Init+0x18>)
 800f886:	4805      	ldr	r0, [pc, #20]	; (800f89c <MX_FATFS_Init+0x1c>)
 800f888:	f002 f832 	bl	80118f0 <FATFS_LinkDriver>
 800f88c:	4603      	mov	r3, r0
 800f88e:	461a      	mov	r2, r3
 800f890:	4b03      	ldr	r3, [pc, #12]	; (800f8a0 <MX_FATFS_Init+0x20>)
 800f892:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f894:	bf00      	nop
 800f896:	bd80      	pop	{r7, pc}
 800f898:	200020f0 	.word	0x200020f0
 800f89c:	20000028 	.word	0x20000028
 800f8a0:	200020ec 	.word	0x200020ec

0800f8a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800f8ae:	4b06      	ldr	r3, [pc, #24]	; (800f8c8 <USER_initialize+0x24>)
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800f8b4:	4b04      	ldr	r3, [pc, #16]	; (800f8c8 <USER_initialize+0x24>)
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	370c      	adds	r7, #12
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	20000025 	.word	0x20000025

0800f8cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800f8d6:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <USER_status+0x24>)
 800f8d8:	2201      	movs	r2, #1
 800f8da:	701a      	strb	r2, [r3, #0]
    return Stat;
 800f8dc:	4b04      	ldr	r3, [pc, #16]	; (800f8f0 <USER_status+0x24>)
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	370c      	adds	r7, #12
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	20000025 	.word	0x20000025

0800f8f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60b9      	str	r1, [r7, #8]
 800f8fc:	607a      	str	r2, [r7, #4]
 800f8fe:	603b      	str	r3, [r7, #0]
 800f900:	4603      	mov	r3, r0
 800f902:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800f904:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800f906:	4618      	mov	r0, r3
 800f908:	3714      	adds	r7, #20
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr

0800f912 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f912:	b480      	push	{r7}
 800f914:	b085      	sub	sp, #20
 800f916:	af00      	add	r7, sp, #0
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
 800f91c:	603b      	str	r3, [r7, #0]
 800f91e:	4603      	mov	r3, r0
 800f920:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800f922:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800f924:	4618      	mov	r0, r3
 800f926:	3714      	adds	r7, #20
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr

0800f930 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f930:	b480      	push	{r7}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
 800f936:	4603      	mov	r3, r0
 800f938:	603a      	str	r2, [r7, #0]
 800f93a:	71fb      	strb	r3, [r7, #7]
 800f93c:	460b      	mov	r3, r1
 800f93e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800f940:	2301      	movs	r3, #1
 800f942:	73fb      	strb	r3, [r7, #15]
    return res;
 800f944:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800f946:	4618      	mov	r0, r3
 800f948:	3714      	adds	r7, #20
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
	...

0800f954 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	460b      	mov	r3, r1
 800f95e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f960:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f964:	f005 fdca 	bl	80154fc <USBD_static_malloc>
 800f968:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d109      	bne.n	800f984 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	32b0      	adds	r2, #176	; 0xb0
 800f97a:	2100      	movs	r1, #0
 800f97c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f980:	2302      	movs	r3, #2
 800f982:	e0d4      	b.n	800fb2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f984:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800f988:	2100      	movs	r1, #0
 800f98a:	68f8      	ldr	r0, [r7, #12]
 800f98c:	f005 fdfa 	bl	8015584 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	32b0      	adds	r2, #176	; 0xb0
 800f99a:	68f9      	ldr	r1, [r7, #12]
 800f99c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	32b0      	adds	r2, #176	; 0xb0
 800f9aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	7c1b      	ldrb	r3, [r3, #16]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d138      	bne.n	800fa2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f9bc:	4b5e      	ldr	r3, [pc, #376]	; (800fb38 <USBD_CDC_Init+0x1e4>)
 800f9be:	7819      	ldrb	r1, [r3, #0]
 800f9c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9c4:	2202      	movs	r2, #2
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f005 fc75 	bl	80152b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f9cc:	4b5a      	ldr	r3, [pc, #360]	; (800fb38 <USBD_CDC_Init+0x1e4>)
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	f003 020f 	and.w	r2, r3, #15
 800f9d4:	6879      	ldr	r1, [r7, #4]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4413      	add	r3, r2
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	440b      	add	r3, r1
 800f9e0:	3324      	adds	r3, #36	; 0x24
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f9e6:	4b55      	ldr	r3, [pc, #340]	; (800fb3c <USBD_CDC_Init+0x1e8>)
 800f9e8:	7819      	ldrb	r1, [r3, #0]
 800f9ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9ee:	2202      	movs	r2, #2
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f005 fc60 	bl	80152b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f9f6:	4b51      	ldr	r3, [pc, #324]	; (800fb3c <USBD_CDC_Init+0x1e8>)
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	f003 020f 	and.w	r2, r3, #15
 800f9fe:	6879      	ldr	r1, [r7, #4]
 800fa00:	4613      	mov	r3, r2
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	4413      	add	r3, r2
 800fa06:	009b      	lsls	r3, r3, #2
 800fa08:	440b      	add	r3, r1
 800fa0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fa0e:	2201      	movs	r2, #1
 800fa10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fa12:	4b4b      	ldr	r3, [pc, #300]	; (800fb40 <USBD_CDC_Init+0x1ec>)
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	f003 020f 	and.w	r2, r3, #15
 800fa1a:	6879      	ldr	r1, [r7, #4]
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	4413      	add	r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	440b      	add	r3, r1
 800fa26:	3326      	adds	r3, #38	; 0x26
 800fa28:	2210      	movs	r2, #16
 800fa2a:	801a      	strh	r2, [r3, #0]
 800fa2c:	e035      	b.n	800fa9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fa2e:	4b42      	ldr	r3, [pc, #264]	; (800fb38 <USBD_CDC_Init+0x1e4>)
 800fa30:	7819      	ldrb	r1, [r3, #0]
 800fa32:	2340      	movs	r3, #64	; 0x40
 800fa34:	2202      	movs	r2, #2
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f005 fc3d 	bl	80152b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fa3c:	4b3e      	ldr	r3, [pc, #248]	; (800fb38 <USBD_CDC_Init+0x1e4>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	f003 020f 	and.w	r2, r3, #15
 800fa44:	6879      	ldr	r1, [r7, #4]
 800fa46:	4613      	mov	r3, r2
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	4413      	add	r3, r2
 800fa4c:	009b      	lsls	r3, r3, #2
 800fa4e:	440b      	add	r3, r1
 800fa50:	3324      	adds	r3, #36	; 0x24
 800fa52:	2201      	movs	r2, #1
 800fa54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fa56:	4b39      	ldr	r3, [pc, #228]	; (800fb3c <USBD_CDC_Init+0x1e8>)
 800fa58:	7819      	ldrb	r1, [r3, #0]
 800fa5a:	2340      	movs	r3, #64	; 0x40
 800fa5c:	2202      	movs	r2, #2
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f005 fc29 	bl	80152b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fa64:	4b35      	ldr	r3, [pc, #212]	; (800fb3c <USBD_CDC_Init+0x1e8>)
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	f003 020f 	and.w	r2, r3, #15
 800fa6c:	6879      	ldr	r1, [r7, #4]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	4413      	add	r3, r2
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	440b      	add	r3, r1
 800fa78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fa80:	4b2f      	ldr	r3, [pc, #188]	; (800fb40 <USBD_CDC_Init+0x1ec>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	f003 020f 	and.w	r2, r3, #15
 800fa88:	6879      	ldr	r1, [r7, #4]
 800fa8a:	4613      	mov	r3, r2
 800fa8c:	009b      	lsls	r3, r3, #2
 800fa8e:	4413      	add	r3, r2
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	440b      	add	r3, r1
 800fa94:	3326      	adds	r3, #38	; 0x26
 800fa96:	2210      	movs	r2, #16
 800fa98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fa9a:	4b29      	ldr	r3, [pc, #164]	; (800fb40 <USBD_CDC_Init+0x1ec>)
 800fa9c:	7819      	ldrb	r1, [r3, #0]
 800fa9e:	2308      	movs	r3, #8
 800faa0:	2203      	movs	r2, #3
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f005 fc07 	bl	80152b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800faa8:	4b25      	ldr	r3, [pc, #148]	; (800fb40 <USBD_CDC_Init+0x1ec>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	f003 020f 	and.w	r2, r3, #15
 800fab0:	6879      	ldr	r1, [r7, #4]
 800fab2:	4613      	mov	r3, r2
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	4413      	add	r3, r2
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	440b      	add	r3, r1
 800fabc:	3324      	adds	r3, #36	; 0x24
 800fabe:	2201      	movs	r2, #1
 800fac0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2200      	movs	r2, #0
 800fac6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	33b0      	adds	r3, #176	; 0xb0
 800fad4:	009b      	lsls	r3, r3, #2
 800fad6:	4413      	add	r3, r2
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2200      	movs	r2, #0
 800faea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d101      	bne.n	800fafc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800faf8:	2302      	movs	r3, #2
 800fafa:	e018      	b.n	800fb2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	7c1b      	ldrb	r3, [r3, #16]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d10a      	bne.n	800fb1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fb04:	4b0d      	ldr	r3, [pc, #52]	; (800fb3c <USBD_CDC_Init+0x1e8>)
 800fb06:	7819      	ldrb	r1, [r3, #0]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fb0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f005 fcbe 	bl	8015494 <USBD_LL_PrepareReceive>
 800fb18:	e008      	b.n	800fb2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fb1a:	4b08      	ldr	r3, [pc, #32]	; (800fb3c <USBD_CDC_Init+0x1e8>)
 800fb1c:	7819      	ldrb	r1, [r3, #0]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fb24:	2340      	movs	r3, #64	; 0x40
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f005 fcb4 	bl	8015494 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fb2c:	2300      	movs	r3, #0
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3710      	adds	r7, #16
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	200000c3 	.word	0x200000c3
 800fb3c:	200000c4 	.word	0x200000c4
 800fb40:	200000c5 	.word	0x200000c5

0800fb44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fb50:	4b3a      	ldr	r3, [pc, #232]	; (800fc3c <USBD_CDC_DeInit+0xf8>)
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	4619      	mov	r1, r3
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f005 fbd3 	bl	8015302 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fb5c:	4b37      	ldr	r3, [pc, #220]	; (800fc3c <USBD_CDC_DeInit+0xf8>)
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	f003 020f 	and.w	r2, r3, #15
 800fb64:	6879      	ldr	r1, [r7, #4]
 800fb66:	4613      	mov	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	4413      	add	r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	440b      	add	r3, r1
 800fb70:	3324      	adds	r3, #36	; 0x24
 800fb72:	2200      	movs	r2, #0
 800fb74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fb76:	4b32      	ldr	r3, [pc, #200]	; (800fc40 <USBD_CDC_DeInit+0xfc>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f005 fbc0 	bl	8015302 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fb82:	4b2f      	ldr	r3, [pc, #188]	; (800fc40 <USBD_CDC_DeInit+0xfc>)
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	f003 020f 	and.w	r2, r3, #15
 800fb8a:	6879      	ldr	r1, [r7, #4]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	4413      	add	r3, r2
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	440b      	add	r3, r1
 800fb96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fb9e:	4b29      	ldr	r3, [pc, #164]	; (800fc44 <USBD_CDC_DeInit+0x100>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	4619      	mov	r1, r3
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f005 fbac 	bl	8015302 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fbaa:	4b26      	ldr	r3, [pc, #152]	; (800fc44 <USBD_CDC_DeInit+0x100>)
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	f003 020f 	and.w	r2, r3, #15
 800fbb2:	6879      	ldr	r1, [r7, #4]
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	4413      	add	r3, r2
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	440b      	add	r3, r1
 800fbbe:	3324      	adds	r3, #36	; 0x24
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fbc4:	4b1f      	ldr	r3, [pc, #124]	; (800fc44 <USBD_CDC_DeInit+0x100>)
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	f003 020f 	and.w	r2, r3, #15
 800fbcc:	6879      	ldr	r1, [r7, #4]
 800fbce:	4613      	mov	r3, r2
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	4413      	add	r3, r2
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	440b      	add	r3, r1
 800fbd8:	3326      	adds	r3, #38	; 0x26
 800fbda:	2200      	movs	r2, #0
 800fbdc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	32b0      	adds	r2, #176	; 0xb0
 800fbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d01f      	beq.n	800fc30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	33b0      	adds	r3, #176	; 0xb0
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4413      	add	r3, r2
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	32b0      	adds	r2, #176	; 0xb0
 800fc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f005 fc80 	bl	8015518 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	32b0      	adds	r2, #176	; 0xb0
 800fc22:	2100      	movs	r1, #0
 800fc24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3708      	adds	r7, #8
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	200000c3 	.word	0x200000c3
 800fc40:	200000c4 	.word	0x200000c4
 800fc44:	200000c5 	.word	0x200000c5

0800fc48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	32b0      	adds	r2, #176	; 0xb0
 800fc5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fc62:	2300      	movs	r3, #0
 800fc64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fc66:	2300      	movs	r3, #0
 800fc68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d101      	bne.n	800fc78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800fc74:	2303      	movs	r3, #3
 800fc76:	e0bf      	b.n	800fdf8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d050      	beq.n	800fd26 <USBD_CDC_Setup+0xde>
 800fc84:	2b20      	cmp	r3, #32
 800fc86:	f040 80af 	bne.w	800fde8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	88db      	ldrh	r3, [r3, #6]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d03a      	beq.n	800fd08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	b25b      	sxtb	r3, r3
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	da1b      	bge.n	800fcd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	33b0      	adds	r3, #176	; 0xb0
 800fca6:	009b      	lsls	r3, r3, #2
 800fca8:	4413      	add	r3, r2
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	689b      	ldr	r3, [r3, #8]
 800fcae:	683a      	ldr	r2, [r7, #0]
 800fcb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fcb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	88d2      	ldrh	r2, [r2, #6]
 800fcb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	88db      	ldrh	r3, [r3, #6]
 800fcbe:	2b07      	cmp	r3, #7
 800fcc0:	bf28      	it	cs
 800fcc2:	2307      	movcs	r3, #7
 800fcc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	89fa      	ldrh	r2, [r7, #14]
 800fcca:	4619      	mov	r1, r3
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f001 fd43 	bl	8011758 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fcd2:	e090      	b.n	800fdf6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	785a      	ldrb	r2, [r3, #1]
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	88db      	ldrh	r3, [r3, #6]
 800fce2:	2b3f      	cmp	r3, #63	; 0x3f
 800fce4:	d803      	bhi.n	800fcee <USBD_CDC_Setup+0xa6>
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	88db      	ldrh	r3, [r3, #6]
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	e000      	b.n	800fcf0 <USBD_CDC_Setup+0xa8>
 800fcee:	2240      	movs	r2, #64	; 0x40
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fcf6:	6939      	ldr	r1, [r7, #16]
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fcfe:	461a      	mov	r2, r3
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f001 fd55 	bl	80117b0 <USBD_CtlPrepareRx>
      break;
 800fd06:	e076      	b.n	800fdf6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	33b0      	adds	r3, #176	; 0xb0
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4413      	add	r3, r2
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	683a      	ldr	r2, [r7, #0]
 800fd1c:	7850      	ldrb	r0, [r2, #1]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	4798      	blx	r3
      break;
 800fd24:	e067      	b.n	800fdf6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	785b      	ldrb	r3, [r3, #1]
 800fd2a:	2b0b      	cmp	r3, #11
 800fd2c:	d851      	bhi.n	800fdd2 <USBD_CDC_Setup+0x18a>
 800fd2e:	a201      	add	r2, pc, #4	; (adr r2, 800fd34 <USBD_CDC_Setup+0xec>)
 800fd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd34:	0800fd65 	.word	0x0800fd65
 800fd38:	0800fde1 	.word	0x0800fde1
 800fd3c:	0800fdd3 	.word	0x0800fdd3
 800fd40:	0800fdd3 	.word	0x0800fdd3
 800fd44:	0800fdd3 	.word	0x0800fdd3
 800fd48:	0800fdd3 	.word	0x0800fdd3
 800fd4c:	0800fdd3 	.word	0x0800fdd3
 800fd50:	0800fdd3 	.word	0x0800fdd3
 800fd54:	0800fdd3 	.word	0x0800fdd3
 800fd58:	0800fdd3 	.word	0x0800fdd3
 800fd5c:	0800fd8f 	.word	0x0800fd8f
 800fd60:	0800fdb9 	.word	0x0800fdb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b03      	cmp	r3, #3
 800fd6e:	d107      	bne.n	800fd80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fd70:	f107 030a 	add.w	r3, r7, #10
 800fd74:	2202      	movs	r2, #2
 800fd76:	4619      	mov	r1, r3
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f001 fced 	bl	8011758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fd7e:	e032      	b.n	800fde6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fd80:	6839      	ldr	r1, [r7, #0]
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f001 fc77 	bl	8011676 <USBD_CtlError>
            ret = USBD_FAIL;
 800fd88:	2303      	movs	r3, #3
 800fd8a:	75fb      	strb	r3, [r7, #23]
          break;
 800fd8c:	e02b      	b.n	800fde6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	2b03      	cmp	r3, #3
 800fd98:	d107      	bne.n	800fdaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fd9a:	f107 030d 	add.w	r3, r7, #13
 800fd9e:	2201      	movs	r2, #1
 800fda0:	4619      	mov	r1, r3
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f001 fcd8 	bl	8011758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fda8:	e01d      	b.n	800fde6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fdaa:	6839      	ldr	r1, [r7, #0]
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f001 fc62 	bl	8011676 <USBD_CtlError>
            ret = USBD_FAIL;
 800fdb2:	2303      	movs	r3, #3
 800fdb4:	75fb      	strb	r3, [r7, #23]
          break;
 800fdb6:	e016      	b.n	800fde6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b03      	cmp	r3, #3
 800fdc2:	d00f      	beq.n	800fde4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800fdc4:	6839      	ldr	r1, [r7, #0]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f001 fc55 	bl	8011676 <USBD_CtlError>
            ret = USBD_FAIL;
 800fdcc:	2303      	movs	r3, #3
 800fdce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fdd0:	e008      	b.n	800fde4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fdd2:	6839      	ldr	r1, [r7, #0]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f001 fc4e 	bl	8011676 <USBD_CtlError>
          ret = USBD_FAIL;
 800fdda:	2303      	movs	r3, #3
 800fddc:	75fb      	strb	r3, [r7, #23]
          break;
 800fdde:	e002      	b.n	800fde6 <USBD_CDC_Setup+0x19e>
          break;
 800fde0:	bf00      	nop
 800fde2:	e008      	b.n	800fdf6 <USBD_CDC_Setup+0x1ae>
          break;
 800fde4:	bf00      	nop
      }
      break;
 800fde6:	e006      	b.n	800fdf6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fde8:	6839      	ldr	r1, [r7, #0]
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f001 fc43 	bl	8011676 <USBD_CtlError>
      ret = USBD_FAIL;
 800fdf0:	2303      	movs	r3, #3
 800fdf2:	75fb      	strb	r3, [r7, #23]
      break;
 800fdf4:	bf00      	nop
  }

  return (uint8_t)ret;
 800fdf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3718      	adds	r7, #24
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	460b      	mov	r3, r1
 800fe0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	32b0      	adds	r2, #176	; 0xb0
 800fe1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d101      	bne.n	800fe2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fe26:	2303      	movs	r3, #3
 800fe28:	e065      	b.n	800fef6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	32b0      	adds	r2, #176	; 0xb0
 800fe34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fe3a:	78fb      	ldrb	r3, [r7, #3]
 800fe3c:	f003 020f 	and.w	r2, r3, #15
 800fe40:	6879      	ldr	r1, [r7, #4]
 800fe42:	4613      	mov	r3, r2
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	4413      	add	r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	440b      	add	r3, r1
 800fe4c:	3318      	adds	r3, #24
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d02f      	beq.n	800feb4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fe54:	78fb      	ldrb	r3, [r7, #3]
 800fe56:	f003 020f 	and.w	r2, r3, #15
 800fe5a:	6879      	ldr	r1, [r7, #4]
 800fe5c:	4613      	mov	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	4413      	add	r3, r2
 800fe62:	009b      	lsls	r3, r3, #2
 800fe64:	440b      	add	r3, r1
 800fe66:	3318      	adds	r3, #24
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	78fb      	ldrb	r3, [r7, #3]
 800fe6c:	f003 010f 	and.w	r1, r3, #15
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	460b      	mov	r3, r1
 800fe74:	00db      	lsls	r3, r3, #3
 800fe76:	440b      	add	r3, r1
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	4403      	add	r3, r0
 800fe7c:	3348      	adds	r3, #72	; 0x48
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	fbb2 f1f3 	udiv	r1, r2, r3
 800fe84:	fb01 f303 	mul.w	r3, r1, r3
 800fe88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d112      	bne.n	800feb4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fe8e:	78fb      	ldrb	r3, [r7, #3]
 800fe90:	f003 020f 	and.w	r2, r3, #15
 800fe94:	6879      	ldr	r1, [r7, #4]
 800fe96:	4613      	mov	r3, r2
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	4413      	add	r3, r2
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	440b      	add	r3, r1
 800fea0:	3318      	adds	r3, #24
 800fea2:	2200      	movs	r2, #0
 800fea4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fea6:	78f9      	ldrb	r1, [r7, #3]
 800fea8:	2300      	movs	r3, #0
 800feaa:	2200      	movs	r2, #0
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f005 fad0 	bl	8015452 <USBD_LL_Transmit>
 800feb2:	e01f      	b.n	800fef4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	33b0      	adds	r3, #176	; 0xb0
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	4413      	add	r3, r2
 800feca:	685b      	ldr	r3, [r3, #4]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d010      	beq.n	800fef4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	33b0      	adds	r3, #176	; 0xb0
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4413      	add	r3, r2
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	68ba      	ldr	r2, [r7, #8]
 800fee6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800feea:	68ba      	ldr	r2, [r7, #8]
 800feec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800fef0:	78fa      	ldrb	r2, [r7, #3]
 800fef2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3710      	adds	r7, #16
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}

0800fefe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fefe:	b580      	push	{r7, lr}
 800ff00:	b084      	sub	sp, #16
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	6078      	str	r0, [r7, #4]
 800ff06:	460b      	mov	r3, r1
 800ff08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	32b0      	adds	r2, #176	; 0xb0
 800ff14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	32b0      	adds	r2, #176	; 0xb0
 800ff24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d101      	bne.n	800ff30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ff2c:	2303      	movs	r3, #3
 800ff2e:	e01a      	b.n	800ff66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ff30:	78fb      	ldrb	r3, [r7, #3]
 800ff32:	4619      	mov	r1, r3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f005 face 	bl	80154d6 <USBD_LL_GetRxDataSize>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	33b0      	adds	r3, #176	; 0xb0
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	4413      	add	r3, r2
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ff5a:	68fa      	ldr	r2, [r7, #12]
 800ff5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ff60:	4611      	mov	r1, r2
 800ff62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3710      	adds	r7, #16
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b084      	sub	sp, #16
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	32b0      	adds	r2, #176	; 0xb0
 800ff80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d101      	bne.n	800ff90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ff8c:	2303      	movs	r3, #3
 800ff8e:	e025      	b.n	800ffdc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	33b0      	adds	r3, #176	; 0xb0
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4413      	add	r3, r2
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d01a      	beq.n	800ffda <USBD_CDC_EP0_RxReady+0x6c>
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ffaa:	2bff      	cmp	r3, #255	; 0xff
 800ffac:	d015      	beq.n	800ffda <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	33b0      	adds	r3, #176	; 0xb0
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	4413      	add	r3, r2
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	68fa      	ldr	r2, [r7, #12]
 800ffc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ffc6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ffce:	b292      	uxth	r2, r2
 800ffd0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	22ff      	movs	r2, #255	; 0xff
 800ffd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ffda:	2300      	movs	r3, #0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b086      	sub	sp, #24
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ffec:	2182      	movs	r1, #130	; 0x82
 800ffee:	4818      	ldr	r0, [pc, #96]	; (8010050 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fff0:	f000 fd09 	bl	8010a06 <USBD_GetEpDesc>
 800fff4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fff6:	2101      	movs	r1, #1
 800fff8:	4815      	ldr	r0, [pc, #84]	; (8010050 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fffa:	f000 fd04 	bl	8010a06 <USBD_GetEpDesc>
 800fffe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010000:	2181      	movs	r1, #129	; 0x81
 8010002:	4813      	ldr	r0, [pc, #76]	; (8010050 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010004:	f000 fcff 	bl	8010a06 <USBD_GetEpDesc>
 8010008:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d002      	beq.n	8010016 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	2210      	movs	r2, #16
 8010014:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d006      	beq.n	801002a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	2200      	movs	r2, #0
 8010020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010024:	711a      	strb	r2, [r3, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d006      	beq.n	801003e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2200      	movs	r2, #0
 8010034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010038:	711a      	strb	r2, [r3, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2243      	movs	r2, #67	; 0x43
 8010042:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010044:	4b02      	ldr	r3, [pc, #8]	; (8010050 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010046:	4618      	mov	r0, r3
 8010048:	3718      	adds	r7, #24
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	20000080 	.word	0x20000080

08010054 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b086      	sub	sp, #24
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801005c:	2182      	movs	r1, #130	; 0x82
 801005e:	4818      	ldr	r0, [pc, #96]	; (80100c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010060:	f000 fcd1 	bl	8010a06 <USBD_GetEpDesc>
 8010064:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010066:	2101      	movs	r1, #1
 8010068:	4815      	ldr	r0, [pc, #84]	; (80100c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801006a:	f000 fccc 	bl	8010a06 <USBD_GetEpDesc>
 801006e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010070:	2181      	movs	r1, #129	; 0x81
 8010072:	4813      	ldr	r0, [pc, #76]	; (80100c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010074:	f000 fcc7 	bl	8010a06 <USBD_GetEpDesc>
 8010078:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d002      	beq.n	8010086 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	2210      	movs	r2, #16
 8010084:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d006      	beq.n	801009a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	2200      	movs	r2, #0
 8010090:	711a      	strb	r2, [r3, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	f042 0202 	orr.w	r2, r2, #2
 8010098:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d006      	beq.n	80100ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2200      	movs	r2, #0
 80100a4:	711a      	strb	r2, [r3, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	f042 0202 	orr.w	r2, r2, #2
 80100ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2243      	movs	r2, #67	; 0x43
 80100b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80100b4:	4b02      	ldr	r3, [pc, #8]	; (80100c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3718      	adds	r7, #24
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	20000080 	.word	0x20000080

080100c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b086      	sub	sp, #24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80100cc:	2182      	movs	r1, #130	; 0x82
 80100ce:	4818      	ldr	r0, [pc, #96]	; (8010130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80100d0:	f000 fc99 	bl	8010a06 <USBD_GetEpDesc>
 80100d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80100d6:	2101      	movs	r1, #1
 80100d8:	4815      	ldr	r0, [pc, #84]	; (8010130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80100da:	f000 fc94 	bl	8010a06 <USBD_GetEpDesc>
 80100de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80100e0:	2181      	movs	r1, #129	; 0x81
 80100e2:	4813      	ldr	r0, [pc, #76]	; (8010130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80100e4:	f000 fc8f 	bl	8010a06 <USBD_GetEpDesc>
 80100e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d002      	beq.n	80100f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	2210      	movs	r2, #16
 80100f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d006      	beq.n	801010a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	2200      	movs	r2, #0
 8010100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010104:	711a      	strb	r2, [r3, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d006      	beq.n	801011e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2200      	movs	r2, #0
 8010114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010118:	711a      	strb	r2, [r3, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2243      	movs	r2, #67	; 0x43
 8010122:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010124:	4b02      	ldr	r3, [pc, #8]	; (8010130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010126:	4618      	mov	r0, r3
 8010128:	3718      	adds	r7, #24
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	20000080 	.word	0x20000080

08010134 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	220a      	movs	r2, #10
 8010140:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010142:	4b03      	ldr	r3, [pc, #12]	; (8010150 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010144:	4618      	mov	r0, r3
 8010146:	370c      	adds	r7, #12
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr
 8010150:	2000003c 	.word	0x2000003c

08010154 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d101      	bne.n	8010168 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010164:	2303      	movs	r3, #3
 8010166:	e009      	b.n	801017c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	33b0      	adds	r3, #176	; 0xb0
 8010172:	009b      	lsls	r3, r3, #2
 8010174:	4413      	add	r3, r2
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801017a:	2300      	movs	r3, #0
}
 801017c:	4618      	mov	r0, r3
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010188:	b480      	push	{r7}
 801018a:	b087      	sub	sp, #28
 801018c:	af00      	add	r7, sp, #0
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	32b0      	adds	r2, #176	; 0xb0
 801019e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d101      	bne.n	80101ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80101aa:	2303      	movs	r3, #3
 80101ac:	e008      	b.n	80101c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	68ba      	ldr	r2, [r7, #8]
 80101b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80101be:	2300      	movs	r3, #0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	371c      	adds	r7, #28
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr

080101cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b085      	sub	sp, #20
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	32b0      	adds	r2, #176	; 0xb0
 80101e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d101      	bne.n	80101f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80101ec:	2303      	movs	r3, #3
 80101ee:	e004      	b.n	80101fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	683a      	ldr	r2, [r7, #0]
 80101f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80101f8:	2300      	movs	r3, #0
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3714      	adds	r7, #20
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr
	...

08010208 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	32b0      	adds	r2, #176	; 0xb0
 801021a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801021e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	32b0      	adds	r2, #176	; 0xb0
 801022a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d101      	bne.n	8010236 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010232:	2303      	movs	r3, #3
 8010234:	e018      	b.n	8010268 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	7c1b      	ldrb	r3, [r3, #16]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d10a      	bne.n	8010254 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801023e:	4b0c      	ldr	r3, [pc, #48]	; (8010270 <USBD_CDC_ReceivePacket+0x68>)
 8010240:	7819      	ldrb	r1, [r3, #0]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010248:	f44f 7300 	mov.w	r3, #512	; 0x200
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f005 f921 	bl	8015494 <USBD_LL_PrepareReceive>
 8010252:	e008      	b.n	8010266 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010254:	4b06      	ldr	r3, [pc, #24]	; (8010270 <USBD_CDC_ReceivePacket+0x68>)
 8010256:	7819      	ldrb	r1, [r3, #0]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801025e:	2340      	movs	r3, #64	; 0x40
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f005 f917 	bl	8015494 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010266:	2300      	movs	r3, #0
}
 8010268:	4618      	mov	r0, r3
 801026a:	3710      	adds	r7, #16
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	200000c4 	.word	0x200000c4

08010274 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b086      	sub	sp, #24
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	4613      	mov	r3, r2
 8010280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d101      	bne.n	801028c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010288:	2303      	movs	r3, #3
 801028a:	e01f      	b.n	80102cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2200      	movs	r2, #0
 8010290:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2200      	movs	r2, #0
 80102a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d003      	beq.n	80102b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	68ba      	ldr	r2, [r7, #8]
 80102ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2201      	movs	r2, #1
 80102b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	79fa      	ldrb	r2, [r7, #7]
 80102be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f004 ff91 	bl	80151e8 <USBD_LL_Init>
 80102c6:	4603      	mov	r3, r0
 80102c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80102ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3718      	adds	r7, #24
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80102de:	2300      	movs	r3, #0
 80102e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d101      	bne.n	80102ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80102e8:	2303      	movs	r3, #3
 80102ea:	e025      	b.n	8010338 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	683a      	ldr	r2, [r7, #0]
 80102f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	32ae      	adds	r2, #174	; 0xae
 80102fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00f      	beq.n	8010328 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	32ae      	adds	r2, #174	; 0xae
 8010312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010318:	f107 020e 	add.w	r2, r7, #14
 801031c:	4610      	mov	r0, r2
 801031e:	4798      	blx	r3
 8010320:	4602      	mov	r2, r0
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801032e:	1c5a      	adds	r2, r3, #1
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8010336:	2300      	movs	r3, #0
}
 8010338:	4618      	mov	r0, r3
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}

08010340 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f004 ff99 	bl	8015280 <USBD_LL_Start>
 801034e:	4603      	mov	r3, r0
}
 8010350:	4618      	mov	r0, r3
 8010352:	3708      	adds	r7, #8
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010360:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010362:	4618      	mov	r0, r3
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b084      	sub	sp, #16
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
 8010376:	460b      	mov	r3, r1
 8010378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801037a:	2300      	movs	r3, #0
 801037c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010384:	2b00      	cmp	r3, #0
 8010386:	d009      	beq.n	801039c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	78fa      	ldrb	r2, [r7, #3]
 8010392:	4611      	mov	r1, r2
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	4798      	blx	r3
 8010398:	4603      	mov	r3, r0
 801039a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801039c:	7bfb      	ldrb	r3, [r7, #15]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3710      	adds	r7, #16
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80103a6:	b580      	push	{r7, lr}
 80103a8:	b084      	sub	sp, #16
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
 80103ae:	460b      	mov	r3, r1
 80103b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80103b2:	2300      	movs	r3, #0
 80103b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	78fa      	ldrb	r2, [r7, #3]
 80103c0:	4611      	mov	r1, r2
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	4798      	blx	r3
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d001      	beq.n	80103d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80103cc:	2303      	movs	r3, #3
 80103ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b084      	sub	sp, #16
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103ea:	6839      	ldr	r1, [r7, #0]
 80103ec:	4618      	mov	r0, r3
 80103ee:	f001 f908 	bl	8011602 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010400:	461a      	mov	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801040e:	f003 031f 	and.w	r3, r3, #31
 8010412:	2b02      	cmp	r3, #2
 8010414:	d01a      	beq.n	801044c <USBD_LL_SetupStage+0x72>
 8010416:	2b02      	cmp	r3, #2
 8010418:	d822      	bhi.n	8010460 <USBD_LL_SetupStage+0x86>
 801041a:	2b00      	cmp	r3, #0
 801041c:	d002      	beq.n	8010424 <USBD_LL_SetupStage+0x4a>
 801041e:	2b01      	cmp	r3, #1
 8010420:	d00a      	beq.n	8010438 <USBD_LL_SetupStage+0x5e>
 8010422:	e01d      	b.n	8010460 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801042a:	4619      	mov	r1, r3
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 fb5f 	bl	8010af0 <USBD_StdDevReq>
 8010432:	4603      	mov	r3, r0
 8010434:	73fb      	strb	r3, [r7, #15]
      break;
 8010436:	e020      	b.n	801047a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801043e:	4619      	mov	r1, r3
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f000 fbc7 	bl	8010bd4 <USBD_StdItfReq>
 8010446:	4603      	mov	r3, r0
 8010448:	73fb      	strb	r3, [r7, #15]
      break;
 801044a:	e016      	b.n	801047a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010452:	4619      	mov	r1, r3
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 fc29 	bl	8010cac <USBD_StdEPReq>
 801045a:	4603      	mov	r3, r0
 801045c:	73fb      	strb	r3, [r7, #15]
      break;
 801045e:	e00c      	b.n	801047a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010466:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801046a:	b2db      	uxtb	r3, r3
 801046c:	4619      	mov	r1, r3
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f004 ff66 	bl	8015340 <USBD_LL_StallEP>
 8010474:	4603      	mov	r3, r0
 8010476:	73fb      	strb	r3, [r7, #15]
      break;
 8010478:	bf00      	nop
  }

  return ret;
 801047a:	7bfb      	ldrb	r3, [r7, #15]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3710      	adds	r7, #16
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b086      	sub	sp, #24
 8010488:	af00      	add	r7, sp, #0
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	460b      	mov	r3, r1
 801048e:	607a      	str	r2, [r7, #4]
 8010490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010492:	2300      	movs	r3, #0
 8010494:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010496:	7afb      	ldrb	r3, [r7, #11]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d16e      	bne.n	801057a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80104a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80104aa:	2b03      	cmp	r3, #3
 80104ac:	f040 8098 	bne.w	80105e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	689a      	ldr	r2, [r3, #8]
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d913      	bls.n	80104e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	689a      	ldr	r2, [r3, #8]
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	1ad2      	subs	r2, r2, r3
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	68da      	ldr	r2, [r3, #12]
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	689b      	ldr	r3, [r3, #8]
 80104d2:	4293      	cmp	r3, r2
 80104d4:	bf28      	it	cs
 80104d6:	4613      	movcs	r3, r2
 80104d8:	461a      	mov	r2, r3
 80104da:	6879      	ldr	r1, [r7, #4]
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	f001 f984 	bl	80117ea <USBD_CtlContinueRx>
 80104e2:	e07d      	b.n	80105e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80104ea:	f003 031f 	and.w	r3, r3, #31
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	d014      	beq.n	801051c <USBD_LL_DataOutStage+0x98>
 80104f2:	2b02      	cmp	r3, #2
 80104f4:	d81d      	bhi.n	8010532 <USBD_LL_DataOutStage+0xae>
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d002      	beq.n	8010500 <USBD_LL_DataOutStage+0x7c>
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d003      	beq.n	8010506 <USBD_LL_DataOutStage+0x82>
 80104fe:	e018      	b.n	8010532 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010500:	2300      	movs	r3, #0
 8010502:	75bb      	strb	r3, [r7, #22]
            break;
 8010504:	e018      	b.n	8010538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801050c:	b2db      	uxtb	r3, r3
 801050e:	4619      	mov	r1, r3
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	f000 fa5e 	bl	80109d2 <USBD_CoreFindIF>
 8010516:	4603      	mov	r3, r0
 8010518:	75bb      	strb	r3, [r7, #22]
            break;
 801051a:	e00d      	b.n	8010538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010522:	b2db      	uxtb	r3, r3
 8010524:	4619      	mov	r1, r3
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f000 fa60 	bl	80109ec <USBD_CoreFindEP>
 801052c:	4603      	mov	r3, r0
 801052e:	75bb      	strb	r3, [r7, #22]
            break;
 8010530:	e002      	b.n	8010538 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010532:	2300      	movs	r3, #0
 8010534:	75bb      	strb	r3, [r7, #22]
            break;
 8010536:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010538:	7dbb      	ldrb	r3, [r7, #22]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d119      	bne.n	8010572 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010544:	b2db      	uxtb	r3, r3
 8010546:	2b03      	cmp	r3, #3
 8010548:	d113      	bne.n	8010572 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801054a:	7dba      	ldrb	r2, [r7, #22]
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	32ae      	adds	r2, #174	; 0xae
 8010550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00b      	beq.n	8010572 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801055a:	7dba      	ldrb	r2, [r7, #22]
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010562:	7dba      	ldrb	r2, [r7, #22]
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	32ae      	adds	r2, #174	; 0xae
 8010568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801056c:	691b      	ldr	r3, [r3, #16]
 801056e:	68f8      	ldr	r0, [r7, #12]
 8010570:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010572:	68f8      	ldr	r0, [r7, #12]
 8010574:	f001 f94a 	bl	801180c <USBD_CtlSendStatus>
 8010578:	e032      	b.n	80105e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801057a:	7afb      	ldrb	r3, [r7, #11]
 801057c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010580:	b2db      	uxtb	r3, r3
 8010582:	4619      	mov	r1, r3
 8010584:	68f8      	ldr	r0, [r7, #12]
 8010586:	f000 fa31 	bl	80109ec <USBD_CoreFindEP>
 801058a:	4603      	mov	r3, r0
 801058c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801058e:	7dbb      	ldrb	r3, [r7, #22]
 8010590:	2bff      	cmp	r3, #255	; 0xff
 8010592:	d025      	beq.n	80105e0 <USBD_LL_DataOutStage+0x15c>
 8010594:	7dbb      	ldrb	r3, [r7, #22]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d122      	bne.n	80105e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	2b03      	cmp	r3, #3
 80105a4:	d117      	bne.n	80105d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80105a6:	7dba      	ldrb	r2, [r7, #22]
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	32ae      	adds	r2, #174	; 0xae
 80105ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105b0:	699b      	ldr	r3, [r3, #24]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00f      	beq.n	80105d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80105b6:	7dba      	ldrb	r2, [r7, #22]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80105be:	7dba      	ldrb	r2, [r7, #22]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	32ae      	adds	r2, #174	; 0xae
 80105c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105c8:	699b      	ldr	r3, [r3, #24]
 80105ca:	7afa      	ldrb	r2, [r7, #11]
 80105cc:	4611      	mov	r1, r2
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	4798      	blx	r3
 80105d2:	4603      	mov	r3, r0
 80105d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80105d6:	7dfb      	ldrb	r3, [r7, #23]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d001      	beq.n	80105e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80105dc:	7dfb      	ldrb	r3, [r7, #23]
 80105de:	e000      	b.n	80105e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80105e0:	2300      	movs	r3, #0
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3718      	adds	r7, #24
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b086      	sub	sp, #24
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	60f8      	str	r0, [r7, #12]
 80105f2:	460b      	mov	r3, r1
 80105f4:	607a      	str	r2, [r7, #4]
 80105f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80105f8:	7afb      	ldrb	r3, [r7, #11]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d16f      	bne.n	80106de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3314      	adds	r3, #20
 8010602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801060a:	2b02      	cmp	r3, #2
 801060c:	d15a      	bne.n	80106c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	689a      	ldr	r2, [r3, #8]
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	429a      	cmp	r2, r3
 8010618:	d914      	bls.n	8010644 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	689a      	ldr	r2, [r3, #8]
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	1ad2      	subs	r2, r2, r3
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	461a      	mov	r2, r3
 801062e:	6879      	ldr	r1, [r7, #4]
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f001 f8ac 	bl	801178e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010636:	2300      	movs	r3, #0
 8010638:	2200      	movs	r2, #0
 801063a:	2100      	movs	r1, #0
 801063c:	68f8      	ldr	r0, [r7, #12]
 801063e:	f004 ff29 	bl	8015494 <USBD_LL_PrepareReceive>
 8010642:	e03f      	b.n	80106c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	68da      	ldr	r2, [r3, #12]
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	429a      	cmp	r2, r3
 801064e:	d11c      	bne.n	801068a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	685a      	ldr	r2, [r3, #4]
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010658:	429a      	cmp	r2, r3
 801065a:	d316      	bcc.n	801068a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	685a      	ldr	r2, [r3, #4]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010666:	429a      	cmp	r2, r3
 8010668:	d20f      	bcs.n	801068a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801066a:	2200      	movs	r2, #0
 801066c:	2100      	movs	r1, #0
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f001 f88d 	bl	801178e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	2200      	movs	r2, #0
 8010678:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801067c:	2300      	movs	r3, #0
 801067e:	2200      	movs	r2, #0
 8010680:	2100      	movs	r1, #0
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f004 ff06 	bl	8015494 <USBD_LL_PrepareReceive>
 8010688:	e01c      	b.n	80106c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010690:	b2db      	uxtb	r3, r3
 8010692:	2b03      	cmp	r3, #3
 8010694:	d10f      	bne.n	80106b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d009      	beq.n	80106b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80106b6:	2180      	movs	r1, #128	; 0x80
 80106b8:	68f8      	ldr	r0, [r7, #12]
 80106ba:	f004 fe41 	bl	8015340 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f001 f8b7 	bl	8011832 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d03a      	beq.n	8010744 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f7ff fe42 	bl	8010358 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2200      	movs	r2, #0
 80106d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80106dc:	e032      	b.n	8010744 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80106de:	7afb      	ldrb	r3, [r7, #11]
 80106e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80106e4:	b2db      	uxtb	r3, r3
 80106e6:	4619      	mov	r1, r3
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f000 f97f 	bl	80109ec <USBD_CoreFindEP>
 80106ee:	4603      	mov	r3, r0
 80106f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80106f2:	7dfb      	ldrb	r3, [r7, #23]
 80106f4:	2bff      	cmp	r3, #255	; 0xff
 80106f6:	d025      	beq.n	8010744 <USBD_LL_DataInStage+0x15a>
 80106f8:	7dfb      	ldrb	r3, [r7, #23]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d122      	bne.n	8010744 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010704:	b2db      	uxtb	r3, r3
 8010706:	2b03      	cmp	r3, #3
 8010708:	d11c      	bne.n	8010744 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801070a:	7dfa      	ldrb	r2, [r7, #23]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	32ae      	adds	r2, #174	; 0xae
 8010710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010714:	695b      	ldr	r3, [r3, #20]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d014      	beq.n	8010744 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801071a:	7dfa      	ldrb	r2, [r7, #23]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010722:	7dfa      	ldrb	r2, [r7, #23]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	32ae      	adds	r2, #174	; 0xae
 8010728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801072c:	695b      	ldr	r3, [r3, #20]
 801072e:	7afa      	ldrb	r2, [r7, #11]
 8010730:	4611      	mov	r1, r2
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	4798      	blx	r3
 8010736:	4603      	mov	r3, r0
 8010738:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801073a:	7dbb      	ldrb	r3, [r7, #22]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d001      	beq.n	8010744 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010740:	7dbb      	ldrb	r3, [r7, #22]
 8010742:	e000      	b.n	8010746 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010744:	2300      	movs	r3, #0
}
 8010746:	4618      	mov	r0, r3
 8010748:	3718      	adds	r7, #24
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}

0801074e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801074e:	b580      	push	{r7, lr}
 8010750:	b084      	sub	sp, #16
 8010752:	af00      	add	r7, sp, #0
 8010754:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010756:	2300      	movs	r3, #0
 8010758:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2201      	movs	r2, #1
 801075e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2200      	movs	r2, #0
 801076e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2200      	movs	r2, #0
 801077c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010786:	2b00      	cmp	r3, #0
 8010788:	d014      	beq.n	80107b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00e      	beq.n	80107b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	6852      	ldr	r2, [r2, #4]
 80107a2:	b2d2      	uxtb	r2, r2
 80107a4:	4611      	mov	r1, r2
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	4798      	blx	r3
 80107aa:	4603      	mov	r3, r0
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d001      	beq.n	80107b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80107b0:	2303      	movs	r3, #3
 80107b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107b4:	2340      	movs	r3, #64	; 0x40
 80107b6:	2200      	movs	r2, #0
 80107b8:	2100      	movs	r1, #0
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f004 fd7b 	bl	80152b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2201      	movs	r2, #1
 80107c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2240      	movs	r2, #64	; 0x40
 80107cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107d0:	2340      	movs	r3, #64	; 0x40
 80107d2:	2200      	movs	r2, #0
 80107d4:	2180      	movs	r1, #128	; 0x80
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f004 fd6d 	bl	80152b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2201      	movs	r2, #1
 80107e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2240      	movs	r2, #64	; 0x40
 80107e6:	621a      	str	r2, [r3, #32]

  return ret;
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3710      	adds	r7, #16
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}

080107f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80107f2:	b480      	push	{r7}
 80107f4:	b083      	sub	sp, #12
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
 80107fa:	460b      	mov	r3, r1
 80107fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	78fa      	ldrb	r2, [r7, #3]
 8010802:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010804:	2300      	movs	r3, #0
}
 8010806:	4618      	mov	r0, r3
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010820:	b2da      	uxtb	r2, r3
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2204      	movs	r2, #4
 801082c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr

0801083e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801083e:	b480      	push	{r7}
 8010840:	b083      	sub	sp, #12
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801084c:	b2db      	uxtb	r3, r3
 801084e:	2b04      	cmp	r3, #4
 8010850:	d106      	bne.n	8010860 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010858:	b2da      	uxtb	r2, r3
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010860:	2300      	movs	r3, #0
}
 8010862:	4618      	mov	r0, r3
 8010864:	370c      	adds	r7, #12
 8010866:	46bd      	mov	sp, r7
 8010868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086c:	4770      	bx	lr

0801086e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801086e:	b580      	push	{r7, lr}
 8010870:	b082      	sub	sp, #8
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801087c:	b2db      	uxtb	r3, r3
 801087e:	2b03      	cmp	r3, #3
 8010880:	d110      	bne.n	80108a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010888:	2b00      	cmp	r3, #0
 801088a:	d00b      	beq.n	80108a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010892:	69db      	ldr	r3, [r3, #28]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d005      	beq.n	80108a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801089e:	69db      	ldr	r3, [r3, #28]
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80108a4:	2300      	movs	r3, #0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3708      	adds	r7, #8
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b082      	sub	sp, #8
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
 80108b6:	460b      	mov	r3, r1
 80108b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	32ae      	adds	r2, #174	; 0xae
 80108c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d101      	bne.n	80108d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80108cc:	2303      	movs	r3, #3
 80108ce:	e01c      	b.n	801090a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	2b03      	cmp	r3, #3
 80108da:	d115      	bne.n	8010908 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	32ae      	adds	r2, #174	; 0xae
 80108e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108ea:	6a1b      	ldr	r3, [r3, #32]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d00b      	beq.n	8010908 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	32ae      	adds	r2, #174	; 0xae
 80108fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108fe:	6a1b      	ldr	r3, [r3, #32]
 8010900:	78fa      	ldrb	r2, [r7, #3]
 8010902:	4611      	mov	r1, r2
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	3708      	adds	r7, #8
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b082      	sub	sp, #8
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	460b      	mov	r3, r1
 801091c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	32ae      	adds	r2, #174	; 0xae
 8010928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d101      	bne.n	8010934 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010930:	2303      	movs	r3, #3
 8010932:	e01c      	b.n	801096e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801093a:	b2db      	uxtb	r3, r3
 801093c:	2b03      	cmp	r3, #3
 801093e:	d115      	bne.n	801096c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	32ae      	adds	r2, #174	; 0xae
 801094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00b      	beq.n	801096c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	32ae      	adds	r2, #174	; 0xae
 801095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010964:	78fa      	ldrb	r2, [r7, #3]
 8010966:	4611      	mov	r1, r2
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010976:	b480      	push	{r7}
 8010978:	b083      	sub	sp, #12
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801097e:	2300      	movs	r3, #0
}
 8010980:	4618      	mov	r0, r3
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b084      	sub	sp, #16
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010994:	2300      	movs	r3, #0
 8010996:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2201      	movs	r2, #1
 801099c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d00e      	beq.n	80109c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	6852      	ldr	r2, [r2, #4]
 80109b6:	b2d2      	uxtb	r2, r2
 80109b8:	4611      	mov	r1, r2
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	4798      	blx	r3
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d001      	beq.n	80109c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80109c4:	2303      	movs	r3, #3
 80109c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80109c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80109d2:	b480      	push	{r7}
 80109d4:	b083      	sub	sp, #12
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
 80109da:	460b      	mov	r3, r1
 80109dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80109de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	460b      	mov	r3, r1
 80109f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80109f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr

08010a06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b086      	sub	sp, #24
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	460b      	mov	r3, r1
 8010a10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	885b      	ldrh	r3, [r3, #2]
 8010a22:	b29a      	uxth	r2, r3
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d920      	bls.n	8010a70 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010a36:	e013      	b.n	8010a60 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010a38:	f107 030a 	add.w	r3, r7, #10
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	6978      	ldr	r0, [r7, #20]
 8010a40:	f000 f81b 	bl	8010a7a <USBD_GetNextDesc>
 8010a44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	785b      	ldrb	r3, [r3, #1]
 8010a4a:	2b05      	cmp	r3, #5
 8010a4c:	d108      	bne.n	8010a60 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	789b      	ldrb	r3, [r3, #2]
 8010a56:	78fa      	ldrb	r2, [r7, #3]
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d008      	beq.n	8010a6e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	885b      	ldrh	r3, [r3, #2]
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	897b      	ldrh	r3, [r7, #10]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d8e5      	bhi.n	8010a38 <USBD_GetEpDesc+0x32>
 8010a6c:	e000      	b.n	8010a70 <USBD_GetEpDesc+0x6a>
          break;
 8010a6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010a70:	693b      	ldr	r3, [r7, #16]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3718      	adds	r7, #24
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010a7a:	b480      	push	{r7}
 8010a7c:	b085      	sub	sp, #20
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	881a      	ldrh	r2, [r3, #0]
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	4413      	add	r3, r2
 8010a94:	b29a      	uxth	r2, r3
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4413      	add	r3, r2
 8010aa4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3714      	adds	r7, #20
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b087      	sub	sp, #28
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010ad2:	8a3b      	ldrh	r3, [r7, #16]
 8010ad4:	021b      	lsls	r3, r3, #8
 8010ad6:	b21a      	sxth	r2, r3
 8010ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010adc:	4313      	orrs	r3, r2
 8010ade:	b21b      	sxth	r3, r3
 8010ae0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010ae2:	89fb      	ldrh	r3, [r7, #14]
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	371c      	adds	r7, #28
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010afa:	2300      	movs	r3, #0
 8010afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b06:	2b40      	cmp	r3, #64	; 0x40
 8010b08:	d005      	beq.n	8010b16 <USBD_StdDevReq+0x26>
 8010b0a:	2b40      	cmp	r3, #64	; 0x40
 8010b0c:	d857      	bhi.n	8010bbe <USBD_StdDevReq+0xce>
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d00f      	beq.n	8010b32 <USBD_StdDevReq+0x42>
 8010b12:	2b20      	cmp	r3, #32
 8010b14:	d153      	bne.n	8010bbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	32ae      	adds	r2, #174	; 0xae
 8010b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b24:	689b      	ldr	r3, [r3, #8]
 8010b26:	6839      	ldr	r1, [r7, #0]
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	4798      	blx	r3
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8010b30:	e04a      	b.n	8010bc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	785b      	ldrb	r3, [r3, #1]
 8010b36:	2b09      	cmp	r3, #9
 8010b38:	d83b      	bhi.n	8010bb2 <USBD_StdDevReq+0xc2>
 8010b3a:	a201      	add	r2, pc, #4	; (adr r2, 8010b40 <USBD_StdDevReq+0x50>)
 8010b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b40:	08010b95 	.word	0x08010b95
 8010b44:	08010ba9 	.word	0x08010ba9
 8010b48:	08010bb3 	.word	0x08010bb3
 8010b4c:	08010b9f 	.word	0x08010b9f
 8010b50:	08010bb3 	.word	0x08010bb3
 8010b54:	08010b73 	.word	0x08010b73
 8010b58:	08010b69 	.word	0x08010b69
 8010b5c:	08010bb3 	.word	0x08010bb3
 8010b60:	08010b8b 	.word	0x08010b8b
 8010b64:	08010b7d 	.word	0x08010b7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010b68:	6839      	ldr	r1, [r7, #0]
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f000 fa3c 	bl	8010fe8 <USBD_GetDescriptor>
          break;
 8010b70:	e024      	b.n	8010bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010b72:	6839      	ldr	r1, [r7, #0]
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 fba1 	bl	80112bc <USBD_SetAddress>
          break;
 8010b7a:	e01f      	b.n	8010bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010b7c:	6839      	ldr	r1, [r7, #0]
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 fbe0 	bl	8011344 <USBD_SetConfig>
 8010b84:	4603      	mov	r3, r0
 8010b86:	73fb      	strb	r3, [r7, #15]
          break;
 8010b88:	e018      	b.n	8010bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010b8a:	6839      	ldr	r1, [r7, #0]
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 fc83 	bl	8011498 <USBD_GetConfig>
          break;
 8010b92:	e013      	b.n	8010bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010b94:	6839      	ldr	r1, [r7, #0]
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f000 fcb4 	bl	8011504 <USBD_GetStatus>
          break;
 8010b9c:	e00e      	b.n	8010bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010b9e:	6839      	ldr	r1, [r7, #0]
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f000 fce3 	bl	801156c <USBD_SetFeature>
          break;
 8010ba6:	e009      	b.n	8010bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010ba8:	6839      	ldr	r1, [r7, #0]
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f000 fd07 	bl	80115be <USBD_ClrFeature>
          break;
 8010bb0:	e004      	b.n	8010bbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010bb2:	6839      	ldr	r1, [r7, #0]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 fd5e 	bl	8011676 <USBD_CtlError>
          break;
 8010bba:	bf00      	nop
      }
      break;
 8010bbc:	e004      	b.n	8010bc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010bbe:	6839      	ldr	r1, [r7, #0]
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 fd58 	bl	8011676 <USBD_CtlError>
      break;
 8010bc6:	bf00      	nop
  }

  return ret;
 8010bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop

08010bd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010bde:	2300      	movs	r3, #0
 8010be0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	781b      	ldrb	r3, [r3, #0]
 8010be6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010bea:	2b40      	cmp	r3, #64	; 0x40
 8010bec:	d005      	beq.n	8010bfa <USBD_StdItfReq+0x26>
 8010bee:	2b40      	cmp	r3, #64	; 0x40
 8010bf0:	d852      	bhi.n	8010c98 <USBD_StdItfReq+0xc4>
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d001      	beq.n	8010bfa <USBD_StdItfReq+0x26>
 8010bf6:	2b20      	cmp	r3, #32
 8010bf8:	d14e      	bne.n	8010c98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c00:	b2db      	uxtb	r3, r3
 8010c02:	3b01      	subs	r3, #1
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d840      	bhi.n	8010c8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	889b      	ldrh	r3, [r3, #4]
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	d836      	bhi.n	8010c80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	889b      	ldrh	r3, [r3, #4]
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	4619      	mov	r1, r3
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f7ff fed9 	bl	80109d2 <USBD_CoreFindIF>
 8010c20:	4603      	mov	r3, r0
 8010c22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010c24:	7bbb      	ldrb	r3, [r7, #14]
 8010c26:	2bff      	cmp	r3, #255	; 0xff
 8010c28:	d01d      	beq.n	8010c66 <USBD_StdItfReq+0x92>
 8010c2a:	7bbb      	ldrb	r3, [r7, #14]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d11a      	bne.n	8010c66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010c30:	7bba      	ldrb	r2, [r7, #14]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	32ae      	adds	r2, #174	; 0xae
 8010c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c3a:	689b      	ldr	r3, [r3, #8]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d00f      	beq.n	8010c60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010c40:	7bba      	ldrb	r2, [r7, #14]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010c48:	7bba      	ldrb	r2, [r7, #14]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	32ae      	adds	r2, #174	; 0xae
 8010c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c52:	689b      	ldr	r3, [r3, #8]
 8010c54:	6839      	ldr	r1, [r7, #0]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	4798      	blx	r3
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010c5e:	e004      	b.n	8010c6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010c60:	2303      	movs	r3, #3
 8010c62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010c64:	e001      	b.n	8010c6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010c66:	2303      	movs	r3, #3
 8010c68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	88db      	ldrh	r3, [r3, #6]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d110      	bne.n	8010c94 <USBD_StdItfReq+0xc0>
 8010c72:	7bfb      	ldrb	r3, [r7, #15]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d10d      	bne.n	8010c94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 fdc7 	bl	801180c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010c7e:	e009      	b.n	8010c94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010c80:	6839      	ldr	r1, [r7, #0]
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 fcf7 	bl	8011676 <USBD_CtlError>
          break;
 8010c88:	e004      	b.n	8010c94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010c8a:	6839      	ldr	r1, [r7, #0]
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f000 fcf2 	bl	8011676 <USBD_CtlError>
          break;
 8010c92:	e000      	b.n	8010c96 <USBD_StdItfReq+0xc2>
          break;
 8010c94:	bf00      	nop
      }
      break;
 8010c96:	e004      	b.n	8010ca2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010c98:	6839      	ldr	r1, [r7, #0]
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 fceb 	bl	8011676 <USBD_CtlError>
      break;
 8010ca0:	bf00      	nop
  }

  return ret;
 8010ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	889b      	ldrh	r3, [r3, #4]
 8010cbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010cc8:	2b40      	cmp	r3, #64	; 0x40
 8010cca:	d007      	beq.n	8010cdc <USBD_StdEPReq+0x30>
 8010ccc:	2b40      	cmp	r3, #64	; 0x40
 8010cce:	f200 817f 	bhi.w	8010fd0 <USBD_StdEPReq+0x324>
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d02a      	beq.n	8010d2c <USBD_StdEPReq+0x80>
 8010cd6:	2b20      	cmp	r3, #32
 8010cd8:	f040 817a 	bne.w	8010fd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010cdc:	7bbb      	ldrb	r3, [r7, #14]
 8010cde:	4619      	mov	r1, r3
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7ff fe83 	bl	80109ec <USBD_CoreFindEP>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010cea:	7b7b      	ldrb	r3, [r7, #13]
 8010cec:	2bff      	cmp	r3, #255	; 0xff
 8010cee:	f000 8174 	beq.w	8010fda <USBD_StdEPReq+0x32e>
 8010cf2:	7b7b      	ldrb	r3, [r7, #13]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	f040 8170 	bne.w	8010fda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010cfa:	7b7a      	ldrb	r2, [r7, #13]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010d02:	7b7a      	ldrb	r2, [r7, #13]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	32ae      	adds	r2, #174	; 0xae
 8010d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d0c:	689b      	ldr	r3, [r3, #8]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	f000 8163 	beq.w	8010fda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010d14:	7b7a      	ldrb	r2, [r7, #13]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	32ae      	adds	r2, #174	; 0xae
 8010d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d1e:	689b      	ldr	r3, [r3, #8]
 8010d20:	6839      	ldr	r1, [r7, #0]
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	4798      	blx	r3
 8010d26:	4603      	mov	r3, r0
 8010d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010d2a:	e156      	b.n	8010fda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	785b      	ldrb	r3, [r3, #1]
 8010d30:	2b03      	cmp	r3, #3
 8010d32:	d008      	beq.n	8010d46 <USBD_StdEPReq+0x9a>
 8010d34:	2b03      	cmp	r3, #3
 8010d36:	f300 8145 	bgt.w	8010fc4 <USBD_StdEPReq+0x318>
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f000 809b 	beq.w	8010e76 <USBD_StdEPReq+0x1ca>
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	d03c      	beq.n	8010dbe <USBD_StdEPReq+0x112>
 8010d44:	e13e      	b.n	8010fc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d002      	beq.n	8010d58 <USBD_StdEPReq+0xac>
 8010d52:	2b03      	cmp	r3, #3
 8010d54:	d016      	beq.n	8010d84 <USBD_StdEPReq+0xd8>
 8010d56:	e02c      	b.n	8010db2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010d58:	7bbb      	ldrb	r3, [r7, #14]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00d      	beq.n	8010d7a <USBD_StdEPReq+0xce>
 8010d5e:	7bbb      	ldrb	r3, [r7, #14]
 8010d60:	2b80      	cmp	r3, #128	; 0x80
 8010d62:	d00a      	beq.n	8010d7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010d64:	7bbb      	ldrb	r3, [r7, #14]
 8010d66:	4619      	mov	r1, r3
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f004 fae9 	bl	8015340 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d6e:	2180      	movs	r1, #128	; 0x80
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f004 fae5 	bl	8015340 <USBD_LL_StallEP>
 8010d76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010d78:	e020      	b.n	8010dbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010d7a:	6839      	ldr	r1, [r7, #0]
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f000 fc7a 	bl	8011676 <USBD_CtlError>
              break;
 8010d82:	e01b      	b.n	8010dbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	885b      	ldrh	r3, [r3, #2]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10e      	bne.n	8010daa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010d8c:	7bbb      	ldrb	r3, [r7, #14]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00b      	beq.n	8010daa <USBD_StdEPReq+0xfe>
 8010d92:	7bbb      	ldrb	r3, [r7, #14]
 8010d94:	2b80      	cmp	r3, #128	; 0x80
 8010d96:	d008      	beq.n	8010daa <USBD_StdEPReq+0xfe>
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	88db      	ldrh	r3, [r3, #6]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d104      	bne.n	8010daa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010da0:	7bbb      	ldrb	r3, [r7, #14]
 8010da2:	4619      	mov	r1, r3
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f004 facb 	bl	8015340 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f000 fd2e 	bl	801180c <USBD_CtlSendStatus>

              break;
 8010db0:	e004      	b.n	8010dbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010db2:	6839      	ldr	r1, [r7, #0]
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 fc5e 	bl	8011676 <USBD_CtlError>
              break;
 8010dba:	bf00      	nop
          }
          break;
 8010dbc:	e107      	b.n	8010fce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	2b02      	cmp	r3, #2
 8010dc8:	d002      	beq.n	8010dd0 <USBD_StdEPReq+0x124>
 8010dca:	2b03      	cmp	r3, #3
 8010dcc:	d016      	beq.n	8010dfc <USBD_StdEPReq+0x150>
 8010dce:	e04b      	b.n	8010e68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010dd0:	7bbb      	ldrb	r3, [r7, #14]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d00d      	beq.n	8010df2 <USBD_StdEPReq+0x146>
 8010dd6:	7bbb      	ldrb	r3, [r7, #14]
 8010dd8:	2b80      	cmp	r3, #128	; 0x80
 8010dda:	d00a      	beq.n	8010df2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010ddc:	7bbb      	ldrb	r3, [r7, #14]
 8010dde:	4619      	mov	r1, r3
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f004 faad 	bl	8015340 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010de6:	2180      	movs	r1, #128	; 0x80
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f004 faa9 	bl	8015340 <USBD_LL_StallEP>
 8010dee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010df0:	e040      	b.n	8010e74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010df2:	6839      	ldr	r1, [r7, #0]
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f000 fc3e 	bl	8011676 <USBD_CtlError>
              break;
 8010dfa:	e03b      	b.n	8010e74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	885b      	ldrh	r3, [r3, #2]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d136      	bne.n	8010e72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
 8010e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d004      	beq.n	8010e18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010e0e:	7bbb      	ldrb	r3, [r7, #14]
 8010e10:	4619      	mov	r1, r3
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f004 fab3 	bl	801537e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 fcf7 	bl	801180c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010e1e:	7bbb      	ldrb	r3, [r7, #14]
 8010e20:	4619      	mov	r1, r3
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7ff fde2 	bl	80109ec <USBD_CoreFindEP>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010e2c:	7b7b      	ldrb	r3, [r7, #13]
 8010e2e:	2bff      	cmp	r3, #255	; 0xff
 8010e30:	d01f      	beq.n	8010e72 <USBD_StdEPReq+0x1c6>
 8010e32:	7b7b      	ldrb	r3, [r7, #13]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d11c      	bne.n	8010e72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010e38:	7b7a      	ldrb	r2, [r7, #13]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010e40:	7b7a      	ldrb	r2, [r7, #13]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	32ae      	adds	r2, #174	; 0xae
 8010e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e4a:	689b      	ldr	r3, [r3, #8]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d010      	beq.n	8010e72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010e50:	7b7a      	ldrb	r2, [r7, #13]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	32ae      	adds	r2, #174	; 0xae
 8010e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e5a:	689b      	ldr	r3, [r3, #8]
 8010e5c:	6839      	ldr	r1, [r7, #0]
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	4798      	blx	r3
 8010e62:	4603      	mov	r3, r0
 8010e64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010e66:	e004      	b.n	8010e72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010e68:	6839      	ldr	r1, [r7, #0]
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 fc03 	bl	8011676 <USBD_CtlError>
              break;
 8010e70:	e000      	b.n	8010e74 <USBD_StdEPReq+0x1c8>
              break;
 8010e72:	bf00      	nop
          }
          break;
 8010e74:	e0ab      	b.n	8010fce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e7c:	b2db      	uxtb	r3, r3
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	d002      	beq.n	8010e88 <USBD_StdEPReq+0x1dc>
 8010e82:	2b03      	cmp	r3, #3
 8010e84:	d032      	beq.n	8010eec <USBD_StdEPReq+0x240>
 8010e86:	e097      	b.n	8010fb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010e88:	7bbb      	ldrb	r3, [r7, #14]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d007      	beq.n	8010e9e <USBD_StdEPReq+0x1f2>
 8010e8e:	7bbb      	ldrb	r3, [r7, #14]
 8010e90:	2b80      	cmp	r3, #128	; 0x80
 8010e92:	d004      	beq.n	8010e9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010e94:	6839      	ldr	r1, [r7, #0]
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f000 fbed 	bl	8011676 <USBD_CtlError>
                break;
 8010e9c:	e091      	b.n	8010fc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	da0b      	bge.n	8010ebe <USBD_StdEPReq+0x212>
 8010ea6:	7bbb      	ldrb	r3, [r7, #14]
 8010ea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010eac:	4613      	mov	r3, r2
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	4413      	add	r3, r2
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	3310      	adds	r3, #16
 8010eb6:	687a      	ldr	r2, [r7, #4]
 8010eb8:	4413      	add	r3, r2
 8010eba:	3304      	adds	r3, #4
 8010ebc:	e00b      	b.n	8010ed6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010ebe:	7bbb      	ldrb	r3, [r7, #14]
 8010ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ec4:	4613      	mov	r3, r2
 8010ec6:	009b      	lsls	r3, r3, #2
 8010ec8:	4413      	add	r3, r2
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010ed0:	687a      	ldr	r2, [r7, #4]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	3304      	adds	r3, #4
 8010ed6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2200      	movs	r2, #0
 8010edc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	2202      	movs	r2, #2
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f000 fc37 	bl	8011758 <USBD_CtlSendData>
              break;
 8010eea:	e06a      	b.n	8010fc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	da11      	bge.n	8010f18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010ef4:	7bbb      	ldrb	r3, [r7, #14]
 8010ef6:	f003 020f 	and.w	r2, r3, #15
 8010efa:	6879      	ldr	r1, [r7, #4]
 8010efc:	4613      	mov	r3, r2
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	4413      	add	r3, r2
 8010f02:	009b      	lsls	r3, r3, #2
 8010f04:	440b      	add	r3, r1
 8010f06:	3324      	adds	r3, #36	; 0x24
 8010f08:	881b      	ldrh	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d117      	bne.n	8010f3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010f0e:	6839      	ldr	r1, [r7, #0]
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f000 fbb0 	bl	8011676 <USBD_CtlError>
                  break;
 8010f16:	e054      	b.n	8010fc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010f18:	7bbb      	ldrb	r3, [r7, #14]
 8010f1a:	f003 020f 	and.w	r2, r3, #15
 8010f1e:	6879      	ldr	r1, [r7, #4]
 8010f20:	4613      	mov	r3, r2
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	4413      	add	r3, r2
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	440b      	add	r3, r1
 8010f2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d104      	bne.n	8010f3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010f34:	6839      	ldr	r1, [r7, #0]
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f000 fb9d 	bl	8011676 <USBD_CtlError>
                  break;
 8010f3c:	e041      	b.n	8010fc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	da0b      	bge.n	8010f5e <USBD_StdEPReq+0x2b2>
 8010f46:	7bbb      	ldrb	r3, [r7, #14]
 8010f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f4c:	4613      	mov	r3, r2
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	4413      	add	r3, r2
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	3310      	adds	r3, #16
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	4413      	add	r3, r2
 8010f5a:	3304      	adds	r3, #4
 8010f5c:	e00b      	b.n	8010f76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010f5e:	7bbb      	ldrb	r3, [r7, #14]
 8010f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f64:	4613      	mov	r3, r2
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	4413      	add	r3, r2
 8010f6a:	009b      	lsls	r3, r3, #2
 8010f6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	4413      	add	r3, r2
 8010f74:	3304      	adds	r3, #4
 8010f76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010f78:	7bbb      	ldrb	r3, [r7, #14]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d002      	beq.n	8010f84 <USBD_StdEPReq+0x2d8>
 8010f7e:	7bbb      	ldrb	r3, [r7, #14]
 8010f80:	2b80      	cmp	r3, #128	; 0x80
 8010f82:	d103      	bne.n	8010f8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	2200      	movs	r2, #0
 8010f88:	601a      	str	r2, [r3, #0]
 8010f8a:	e00e      	b.n	8010faa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010f8c:	7bbb      	ldrb	r3, [r7, #14]
 8010f8e:	4619      	mov	r1, r3
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f004 fa13 	bl	80153bc <USBD_LL_IsStallEP>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d003      	beq.n	8010fa4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	601a      	str	r2, [r3, #0]
 8010fa2:	e002      	b.n	8010faa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	2202      	movs	r2, #2
 8010fae:	4619      	mov	r1, r3
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f000 fbd1 	bl	8011758 <USBD_CtlSendData>
              break;
 8010fb6:	e004      	b.n	8010fc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010fb8:	6839      	ldr	r1, [r7, #0]
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 fb5b 	bl	8011676 <USBD_CtlError>
              break;
 8010fc0:	bf00      	nop
          }
          break;
 8010fc2:	e004      	b.n	8010fce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010fc4:	6839      	ldr	r1, [r7, #0]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fb55 	bl	8011676 <USBD_CtlError>
          break;
 8010fcc:	bf00      	nop
      }
      break;
 8010fce:	e005      	b.n	8010fdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010fd0:	6839      	ldr	r1, [r7, #0]
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 fb4f 	bl	8011676 <USBD_CtlError>
      break;
 8010fd8:	e000      	b.n	8010fdc <USBD_StdEPReq+0x330>
      break;
 8010fda:	bf00      	nop
  }

  return ret;
 8010fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3710      	adds	r7, #16
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
	...

08010fe8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	885b      	ldrh	r3, [r3, #2]
 8011002:	0a1b      	lsrs	r3, r3, #8
 8011004:	b29b      	uxth	r3, r3
 8011006:	3b01      	subs	r3, #1
 8011008:	2b06      	cmp	r3, #6
 801100a:	f200 8128 	bhi.w	801125e <USBD_GetDescriptor+0x276>
 801100e:	a201      	add	r2, pc, #4	; (adr r2, 8011014 <USBD_GetDescriptor+0x2c>)
 8011010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011014:	08011031 	.word	0x08011031
 8011018:	08011049 	.word	0x08011049
 801101c:	08011089 	.word	0x08011089
 8011020:	0801125f 	.word	0x0801125f
 8011024:	0801125f 	.word	0x0801125f
 8011028:	080111ff 	.word	0x080111ff
 801102c:	0801122b 	.word	0x0801122b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	7c12      	ldrb	r2, [r2, #16]
 801103c:	f107 0108 	add.w	r1, r7, #8
 8011040:	4610      	mov	r0, r2
 8011042:	4798      	blx	r3
 8011044:	60f8      	str	r0, [r7, #12]
      break;
 8011046:	e112      	b.n	801126e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	7c1b      	ldrb	r3, [r3, #16]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d10d      	bne.n	801106c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011058:	f107 0208 	add.w	r2, r7, #8
 801105c:	4610      	mov	r0, r2
 801105e:	4798      	blx	r3
 8011060:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	3301      	adds	r3, #1
 8011066:	2202      	movs	r2, #2
 8011068:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801106a:	e100      	b.n	801126e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011074:	f107 0208 	add.w	r2, r7, #8
 8011078:	4610      	mov	r0, r2
 801107a:	4798      	blx	r3
 801107c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	3301      	adds	r3, #1
 8011082:	2202      	movs	r2, #2
 8011084:	701a      	strb	r2, [r3, #0]
      break;
 8011086:	e0f2      	b.n	801126e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	885b      	ldrh	r3, [r3, #2]
 801108c:	b2db      	uxtb	r3, r3
 801108e:	2b05      	cmp	r3, #5
 8011090:	f200 80ac 	bhi.w	80111ec <USBD_GetDescriptor+0x204>
 8011094:	a201      	add	r2, pc, #4	; (adr r2, 801109c <USBD_GetDescriptor+0xb4>)
 8011096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801109a:	bf00      	nop
 801109c:	080110b5 	.word	0x080110b5
 80110a0:	080110e9 	.word	0x080110e9
 80110a4:	0801111d 	.word	0x0801111d
 80110a8:	08011151 	.word	0x08011151
 80110ac:	08011185 	.word	0x08011185
 80110b0:	080111b9 	.word	0x080111b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d00b      	beq.n	80110d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	7c12      	ldrb	r2, [r2, #16]
 80110cc:	f107 0108 	add.w	r1, r7, #8
 80110d0:	4610      	mov	r0, r2
 80110d2:	4798      	blx	r3
 80110d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80110d6:	e091      	b.n	80111fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80110d8:	6839      	ldr	r1, [r7, #0]
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f000 facb 	bl	8011676 <USBD_CtlError>
            err++;
 80110e0:	7afb      	ldrb	r3, [r7, #11]
 80110e2:	3301      	adds	r3, #1
 80110e4:	72fb      	strb	r3, [r7, #11]
          break;
 80110e6:	e089      	b.n	80111fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110ee:	689b      	ldr	r3, [r3, #8]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d00b      	beq.n	801110c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	687a      	ldr	r2, [r7, #4]
 80110fe:	7c12      	ldrb	r2, [r2, #16]
 8011100:	f107 0108 	add.w	r1, r7, #8
 8011104:	4610      	mov	r0, r2
 8011106:	4798      	blx	r3
 8011108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801110a:	e077      	b.n	80111fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801110c:	6839      	ldr	r1, [r7, #0]
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 fab1 	bl	8011676 <USBD_CtlError>
            err++;
 8011114:	7afb      	ldrb	r3, [r7, #11]
 8011116:	3301      	adds	r3, #1
 8011118:	72fb      	strb	r3, [r7, #11]
          break;
 801111a:	e06f      	b.n	80111fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d00b      	beq.n	8011140 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	7c12      	ldrb	r2, [r2, #16]
 8011134:	f107 0108 	add.w	r1, r7, #8
 8011138:	4610      	mov	r0, r2
 801113a:	4798      	blx	r3
 801113c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801113e:	e05d      	b.n	80111fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011140:	6839      	ldr	r1, [r7, #0]
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 fa97 	bl	8011676 <USBD_CtlError>
            err++;
 8011148:	7afb      	ldrb	r3, [r7, #11]
 801114a:	3301      	adds	r3, #1
 801114c:	72fb      	strb	r3, [r7, #11]
          break;
 801114e:	e055      	b.n	80111fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d00b      	beq.n	8011174 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011162:	691b      	ldr	r3, [r3, #16]
 8011164:	687a      	ldr	r2, [r7, #4]
 8011166:	7c12      	ldrb	r2, [r2, #16]
 8011168:	f107 0108 	add.w	r1, r7, #8
 801116c:	4610      	mov	r0, r2
 801116e:	4798      	blx	r3
 8011170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011172:	e043      	b.n	80111fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011174:	6839      	ldr	r1, [r7, #0]
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f000 fa7d 	bl	8011676 <USBD_CtlError>
            err++;
 801117c:	7afb      	ldrb	r3, [r7, #11]
 801117e:	3301      	adds	r3, #1
 8011180:	72fb      	strb	r3, [r7, #11]
          break;
 8011182:	e03b      	b.n	80111fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801118a:	695b      	ldr	r3, [r3, #20]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d00b      	beq.n	80111a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011196:	695b      	ldr	r3, [r3, #20]
 8011198:	687a      	ldr	r2, [r7, #4]
 801119a:	7c12      	ldrb	r2, [r2, #16]
 801119c:	f107 0108 	add.w	r1, r7, #8
 80111a0:	4610      	mov	r0, r2
 80111a2:	4798      	blx	r3
 80111a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111a6:	e029      	b.n	80111fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80111a8:	6839      	ldr	r1, [r7, #0]
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f000 fa63 	bl	8011676 <USBD_CtlError>
            err++;
 80111b0:	7afb      	ldrb	r3, [r7, #11]
 80111b2:	3301      	adds	r3, #1
 80111b4:	72fb      	strb	r3, [r7, #11]
          break;
 80111b6:	e021      	b.n	80111fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111be:	699b      	ldr	r3, [r3, #24]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00b      	beq.n	80111dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111ca:	699b      	ldr	r3, [r3, #24]
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	7c12      	ldrb	r2, [r2, #16]
 80111d0:	f107 0108 	add.w	r1, r7, #8
 80111d4:	4610      	mov	r0, r2
 80111d6:	4798      	blx	r3
 80111d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111da:	e00f      	b.n	80111fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80111dc:	6839      	ldr	r1, [r7, #0]
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 fa49 	bl	8011676 <USBD_CtlError>
            err++;
 80111e4:	7afb      	ldrb	r3, [r7, #11]
 80111e6:	3301      	adds	r3, #1
 80111e8:	72fb      	strb	r3, [r7, #11]
          break;
 80111ea:	e007      	b.n	80111fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80111ec:	6839      	ldr	r1, [r7, #0]
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f000 fa41 	bl	8011676 <USBD_CtlError>
          err++;
 80111f4:	7afb      	ldrb	r3, [r7, #11]
 80111f6:	3301      	adds	r3, #1
 80111f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80111fa:	bf00      	nop
      }
      break;
 80111fc:	e037      	b.n	801126e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	7c1b      	ldrb	r3, [r3, #16]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d109      	bne.n	801121a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801120c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801120e:	f107 0208 	add.w	r2, r7, #8
 8011212:	4610      	mov	r0, r2
 8011214:	4798      	blx	r3
 8011216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011218:	e029      	b.n	801126e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801121a:	6839      	ldr	r1, [r7, #0]
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f000 fa2a 	bl	8011676 <USBD_CtlError>
        err++;
 8011222:	7afb      	ldrb	r3, [r7, #11]
 8011224:	3301      	adds	r3, #1
 8011226:	72fb      	strb	r3, [r7, #11]
      break;
 8011228:	e021      	b.n	801126e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	7c1b      	ldrb	r3, [r3, #16]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d10d      	bne.n	801124e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801123a:	f107 0208 	add.w	r2, r7, #8
 801123e:	4610      	mov	r0, r2
 8011240:	4798      	blx	r3
 8011242:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3301      	adds	r3, #1
 8011248:	2207      	movs	r2, #7
 801124a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801124c:	e00f      	b.n	801126e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801124e:	6839      	ldr	r1, [r7, #0]
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f000 fa10 	bl	8011676 <USBD_CtlError>
        err++;
 8011256:	7afb      	ldrb	r3, [r7, #11]
 8011258:	3301      	adds	r3, #1
 801125a:	72fb      	strb	r3, [r7, #11]
      break;
 801125c:	e007      	b.n	801126e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801125e:	6839      	ldr	r1, [r7, #0]
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f000 fa08 	bl	8011676 <USBD_CtlError>
      err++;
 8011266:	7afb      	ldrb	r3, [r7, #11]
 8011268:	3301      	adds	r3, #1
 801126a:	72fb      	strb	r3, [r7, #11]
      break;
 801126c:	bf00      	nop
  }

  if (err != 0U)
 801126e:	7afb      	ldrb	r3, [r7, #11]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d11e      	bne.n	80112b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	88db      	ldrh	r3, [r3, #6]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d016      	beq.n	80112aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801127c:	893b      	ldrh	r3, [r7, #8]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d00e      	beq.n	80112a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	88da      	ldrh	r2, [r3, #6]
 8011286:	893b      	ldrh	r3, [r7, #8]
 8011288:	4293      	cmp	r3, r2
 801128a:	bf28      	it	cs
 801128c:	4613      	movcs	r3, r2
 801128e:	b29b      	uxth	r3, r3
 8011290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011292:	893b      	ldrh	r3, [r7, #8]
 8011294:	461a      	mov	r2, r3
 8011296:	68f9      	ldr	r1, [r7, #12]
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f000 fa5d 	bl	8011758 <USBD_CtlSendData>
 801129e:	e009      	b.n	80112b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80112a0:	6839      	ldr	r1, [r7, #0]
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 f9e7 	bl	8011676 <USBD_CtlError>
 80112a8:	e004      	b.n	80112b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f000 faae 	bl	801180c <USBD_CtlSendStatus>
 80112b0:	e000      	b.n	80112b4 <USBD_GetDescriptor+0x2cc>
    return;
 80112b2:	bf00      	nop
  }
}
 80112b4:	3710      	adds	r7, #16
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop

080112bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	889b      	ldrh	r3, [r3, #4]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d131      	bne.n	8011332 <USBD_SetAddress+0x76>
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	88db      	ldrh	r3, [r3, #6]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d12d      	bne.n	8011332 <USBD_SetAddress+0x76>
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	885b      	ldrh	r3, [r3, #2]
 80112da:	2b7f      	cmp	r3, #127	; 0x7f
 80112dc:	d829      	bhi.n	8011332 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	885b      	ldrh	r3, [r3, #2]
 80112e2:	b2db      	uxtb	r3, r3
 80112e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	2b03      	cmp	r3, #3
 80112f4:	d104      	bne.n	8011300 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80112f6:	6839      	ldr	r1, [r7, #0]
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f000 f9bc 	bl	8011676 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112fe:	e01d      	b.n	801133c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	7bfa      	ldrb	r2, [r7, #15]
 8011304:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011308:	7bfb      	ldrb	r3, [r7, #15]
 801130a:	4619      	mov	r1, r3
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f004 f881 	bl	8015414 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f000 fa7a 	bl	801180c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011318:	7bfb      	ldrb	r3, [r7, #15]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d004      	beq.n	8011328 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2202      	movs	r2, #2
 8011322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011326:	e009      	b.n	801133c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2201      	movs	r2, #1
 801132c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011330:	e004      	b.n	801133c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011332:	6839      	ldr	r1, [r7, #0]
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 f99e 	bl	8011676 <USBD_CtlError>
  }
}
 801133a:	bf00      	nop
 801133c:	bf00      	nop
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801134e:	2300      	movs	r3, #0
 8011350:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	885b      	ldrh	r3, [r3, #2]
 8011356:	b2da      	uxtb	r2, r3
 8011358:	4b4e      	ldr	r3, [pc, #312]	; (8011494 <USBD_SetConfig+0x150>)
 801135a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801135c:	4b4d      	ldr	r3, [pc, #308]	; (8011494 <USBD_SetConfig+0x150>)
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	2b01      	cmp	r3, #1
 8011362:	d905      	bls.n	8011370 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011364:	6839      	ldr	r1, [r7, #0]
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 f985 	bl	8011676 <USBD_CtlError>
    return USBD_FAIL;
 801136c:	2303      	movs	r3, #3
 801136e:	e08c      	b.n	801148a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011376:	b2db      	uxtb	r3, r3
 8011378:	2b02      	cmp	r3, #2
 801137a:	d002      	beq.n	8011382 <USBD_SetConfig+0x3e>
 801137c:	2b03      	cmp	r3, #3
 801137e:	d029      	beq.n	80113d4 <USBD_SetConfig+0x90>
 8011380:	e075      	b.n	801146e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011382:	4b44      	ldr	r3, [pc, #272]	; (8011494 <USBD_SetConfig+0x150>)
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d020      	beq.n	80113cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801138a:	4b42      	ldr	r3, [pc, #264]	; (8011494 <USBD_SetConfig+0x150>)
 801138c:	781b      	ldrb	r3, [r3, #0]
 801138e:	461a      	mov	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011394:	4b3f      	ldr	r3, [pc, #252]	; (8011494 <USBD_SetConfig+0x150>)
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	4619      	mov	r1, r3
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f7fe ffe7 	bl	801036e <USBD_SetClassConfig>
 80113a0:	4603      	mov	r3, r0
 80113a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80113a4:	7bfb      	ldrb	r3, [r7, #15]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d008      	beq.n	80113bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80113aa:	6839      	ldr	r1, [r7, #0]
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f000 f962 	bl	8011676 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2202      	movs	r2, #2
 80113b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80113ba:	e065      	b.n	8011488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f000 fa25 	bl	801180c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2203      	movs	r2, #3
 80113c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80113ca:	e05d      	b.n	8011488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f000 fa1d 	bl	801180c <USBD_CtlSendStatus>
      break;
 80113d2:	e059      	b.n	8011488 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80113d4:	4b2f      	ldr	r3, [pc, #188]	; (8011494 <USBD_SetConfig+0x150>)
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d112      	bne.n	8011402 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2202      	movs	r2, #2
 80113e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80113e4:	4b2b      	ldr	r3, [pc, #172]	; (8011494 <USBD_SetConfig+0x150>)
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	461a      	mov	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80113ee:	4b29      	ldr	r3, [pc, #164]	; (8011494 <USBD_SetConfig+0x150>)
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	4619      	mov	r1, r3
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f7fe ffd6 	bl	80103a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 fa06 	bl	801180c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011400:	e042      	b.n	8011488 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011402:	4b24      	ldr	r3, [pc, #144]	; (8011494 <USBD_SetConfig+0x150>)
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	461a      	mov	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	429a      	cmp	r2, r3
 801140e:	d02a      	beq.n	8011466 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	b2db      	uxtb	r3, r3
 8011416:	4619      	mov	r1, r3
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7fe ffc4 	bl	80103a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801141e:	4b1d      	ldr	r3, [pc, #116]	; (8011494 <USBD_SetConfig+0x150>)
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	461a      	mov	r2, r3
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011428:	4b1a      	ldr	r3, [pc, #104]	; (8011494 <USBD_SetConfig+0x150>)
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	4619      	mov	r1, r3
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f7fe ff9d 	bl	801036e <USBD_SetClassConfig>
 8011434:	4603      	mov	r3, r0
 8011436:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011438:	7bfb      	ldrb	r3, [r7, #15]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d00f      	beq.n	801145e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801143e:	6839      	ldr	r1, [r7, #0]
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f000 f918 	bl	8011676 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	b2db      	uxtb	r3, r3
 801144c:	4619      	mov	r1, r3
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f7fe ffa9 	bl	80103a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2202      	movs	r2, #2
 8011458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801145c:	e014      	b.n	8011488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 f9d4 	bl	801180c <USBD_CtlSendStatus>
      break;
 8011464:	e010      	b.n	8011488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 f9d0 	bl	801180c <USBD_CtlSendStatus>
      break;
 801146c:	e00c      	b.n	8011488 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801146e:	6839      	ldr	r1, [r7, #0]
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f000 f900 	bl	8011676 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011476:	4b07      	ldr	r3, [pc, #28]	; (8011494 <USBD_SetConfig+0x150>)
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	4619      	mov	r1, r3
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7fe ff92 	bl	80103a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011482:	2303      	movs	r3, #3
 8011484:	73fb      	strb	r3, [r7, #15]
      break;
 8011486:	bf00      	nop
  }

  return ret;
 8011488:	7bfb      	ldrb	r3, [r7, #15]
}
 801148a:	4618      	mov	r0, r3
 801148c:	3710      	adds	r7, #16
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	200020f4 	.word	0x200020f4

08011498 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	88db      	ldrh	r3, [r3, #6]
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d004      	beq.n	80114b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80114aa:	6839      	ldr	r1, [r7, #0]
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f000 f8e2 	bl	8011676 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80114b2:	e023      	b.n	80114fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	2b02      	cmp	r3, #2
 80114be:	dc02      	bgt.n	80114c6 <USBD_GetConfig+0x2e>
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	dc03      	bgt.n	80114cc <USBD_GetConfig+0x34>
 80114c4:	e015      	b.n	80114f2 <USBD_GetConfig+0x5a>
 80114c6:	2b03      	cmp	r3, #3
 80114c8:	d00b      	beq.n	80114e2 <USBD_GetConfig+0x4a>
 80114ca:	e012      	b.n	80114f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	3308      	adds	r3, #8
 80114d6:	2201      	movs	r2, #1
 80114d8:	4619      	mov	r1, r3
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 f93c 	bl	8011758 <USBD_CtlSendData>
        break;
 80114e0:	e00c      	b.n	80114fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	3304      	adds	r3, #4
 80114e6:	2201      	movs	r2, #1
 80114e8:	4619      	mov	r1, r3
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f000 f934 	bl	8011758 <USBD_CtlSendData>
        break;
 80114f0:	e004      	b.n	80114fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80114f2:	6839      	ldr	r1, [r7, #0]
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f000 f8be 	bl	8011676 <USBD_CtlError>
        break;
 80114fa:	bf00      	nop
}
 80114fc:	bf00      	nop
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011514:	b2db      	uxtb	r3, r3
 8011516:	3b01      	subs	r3, #1
 8011518:	2b02      	cmp	r3, #2
 801151a:	d81e      	bhi.n	801155a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	88db      	ldrh	r3, [r3, #6]
 8011520:	2b02      	cmp	r3, #2
 8011522:	d004      	beq.n	801152e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011524:	6839      	ldr	r1, [r7, #0]
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 f8a5 	bl	8011676 <USBD_CtlError>
        break;
 801152c:	e01a      	b.n	8011564 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2201      	movs	r2, #1
 8011532:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801153a:	2b00      	cmp	r3, #0
 801153c:	d005      	beq.n	801154a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	68db      	ldr	r3, [r3, #12]
 8011542:	f043 0202 	orr.w	r2, r3, #2
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	330c      	adds	r3, #12
 801154e:	2202      	movs	r2, #2
 8011550:	4619      	mov	r1, r3
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f000 f900 	bl	8011758 <USBD_CtlSendData>
      break;
 8011558:	e004      	b.n	8011564 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801155a:	6839      	ldr	r1, [r7, #0]
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f000 f88a 	bl	8011676 <USBD_CtlError>
      break;
 8011562:	bf00      	nop
  }
}
 8011564:	bf00      	nop
 8011566:	3708      	adds	r7, #8
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	885b      	ldrh	r3, [r3, #2]
 801157a:	2b01      	cmp	r3, #1
 801157c:	d107      	bne.n	801158e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2201      	movs	r2, #1
 8011582:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f000 f940 	bl	801180c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801158c:	e013      	b.n	80115b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	885b      	ldrh	r3, [r3, #2]
 8011592:	2b02      	cmp	r3, #2
 8011594:	d10b      	bne.n	80115ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	889b      	ldrh	r3, [r3, #4]
 801159a:	0a1b      	lsrs	r3, r3, #8
 801159c:	b29b      	uxth	r3, r3
 801159e:	b2da      	uxtb	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f000 f930 	bl	801180c <USBD_CtlSendStatus>
}
 80115ac:	e003      	b.n	80115b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80115ae:	6839      	ldr	r1, [r7, #0]
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 f860 	bl	8011676 <USBD_CtlError>
}
 80115b6:	bf00      	nop
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115be:	b580      	push	{r7, lr}
 80115c0:	b082      	sub	sp, #8
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115ce:	b2db      	uxtb	r3, r3
 80115d0:	3b01      	subs	r3, #1
 80115d2:	2b02      	cmp	r3, #2
 80115d4:	d80b      	bhi.n	80115ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	885b      	ldrh	r3, [r3, #2]
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d10c      	bne.n	80115f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2200      	movs	r2, #0
 80115e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f000 f910 	bl	801180c <USBD_CtlSendStatus>
      }
      break;
 80115ec:	e004      	b.n	80115f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80115ee:	6839      	ldr	r1, [r7, #0]
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 f840 	bl	8011676 <USBD_CtlError>
      break;
 80115f6:	e000      	b.n	80115fa <USBD_ClrFeature+0x3c>
      break;
 80115f8:	bf00      	nop
  }
}
 80115fa:	bf00      	nop
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b084      	sub	sp, #16
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
 801160a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	781a      	ldrb	r2, [r3, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	3301      	adds	r3, #1
 801161c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	781a      	ldrb	r2, [r3, #0]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	3301      	adds	r3, #1
 801162a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f7ff fa41 	bl	8010ab4 <SWAPBYTE>
 8011632:	4603      	mov	r3, r0
 8011634:	461a      	mov	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	3301      	adds	r3, #1
 801163e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	3301      	adds	r3, #1
 8011644:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011646:	68f8      	ldr	r0, [r7, #12]
 8011648:	f7ff fa34 	bl	8010ab4 <SWAPBYTE>
 801164c:	4603      	mov	r3, r0
 801164e:	461a      	mov	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	3301      	adds	r3, #1
 8011658:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	3301      	adds	r3, #1
 801165e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011660:	68f8      	ldr	r0, [r7, #12]
 8011662:	f7ff fa27 	bl	8010ab4 <SWAPBYTE>
 8011666:	4603      	mov	r3, r0
 8011668:	461a      	mov	r2, r3
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	80da      	strh	r2, [r3, #6]
}
 801166e:	bf00      	nop
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011676:	b580      	push	{r7, lr}
 8011678:	b082      	sub	sp, #8
 801167a:	af00      	add	r7, sp, #0
 801167c:	6078      	str	r0, [r7, #4]
 801167e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011680:	2180      	movs	r1, #128	; 0x80
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f003 fe5c 	bl	8015340 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011688:	2100      	movs	r1, #0
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f003 fe58 	bl	8015340 <USBD_LL_StallEP>
}
 8011690:	bf00      	nop
 8011692:	3708      	adds	r7, #8
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b086      	sub	sp, #24
 801169c:	af00      	add	r7, sp, #0
 801169e:	60f8      	str	r0, [r7, #12]
 80116a0:	60b9      	str	r1, [r7, #8]
 80116a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80116a4:	2300      	movs	r3, #0
 80116a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d036      	beq.n	801171c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80116b2:	6938      	ldr	r0, [r7, #16]
 80116b4:	f000 f836 	bl	8011724 <USBD_GetLen>
 80116b8:	4603      	mov	r3, r0
 80116ba:	3301      	adds	r3, #1
 80116bc:	b29b      	uxth	r3, r3
 80116be:	005b      	lsls	r3, r3, #1
 80116c0:	b29a      	uxth	r2, r3
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80116c6:	7dfb      	ldrb	r3, [r7, #23]
 80116c8:	68ba      	ldr	r2, [r7, #8]
 80116ca:	4413      	add	r3, r2
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	7812      	ldrb	r2, [r2, #0]
 80116d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80116d2:	7dfb      	ldrb	r3, [r7, #23]
 80116d4:	3301      	adds	r3, #1
 80116d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80116d8:	7dfb      	ldrb	r3, [r7, #23]
 80116da:	68ba      	ldr	r2, [r7, #8]
 80116dc:	4413      	add	r3, r2
 80116de:	2203      	movs	r2, #3
 80116e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80116e2:	7dfb      	ldrb	r3, [r7, #23]
 80116e4:	3301      	adds	r3, #1
 80116e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80116e8:	e013      	b.n	8011712 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80116ea:	7dfb      	ldrb	r3, [r7, #23]
 80116ec:	68ba      	ldr	r2, [r7, #8]
 80116ee:	4413      	add	r3, r2
 80116f0:	693a      	ldr	r2, [r7, #16]
 80116f2:	7812      	ldrb	r2, [r2, #0]
 80116f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	3301      	adds	r3, #1
 80116fa:	613b      	str	r3, [r7, #16]
    idx++;
 80116fc:	7dfb      	ldrb	r3, [r7, #23]
 80116fe:	3301      	adds	r3, #1
 8011700:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011702:	7dfb      	ldrb	r3, [r7, #23]
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	4413      	add	r3, r2
 8011708:	2200      	movs	r2, #0
 801170a:	701a      	strb	r2, [r3, #0]
    idx++;
 801170c:	7dfb      	ldrb	r3, [r7, #23]
 801170e:	3301      	adds	r3, #1
 8011710:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d1e7      	bne.n	80116ea <USBD_GetString+0x52>
 801171a:	e000      	b.n	801171e <USBD_GetString+0x86>
    return;
 801171c:	bf00      	nop
  }
}
 801171e:	3718      	adds	r7, #24
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801172c:	2300      	movs	r3, #0
 801172e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011734:	e005      	b.n	8011742 <USBD_GetLen+0x1e>
  {
    len++;
 8011736:	7bfb      	ldrb	r3, [r7, #15]
 8011738:	3301      	adds	r3, #1
 801173a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	3301      	adds	r3, #1
 8011740:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d1f5      	bne.n	8011736 <USBD_GetLen+0x12>
  }

  return len;
 801174a:	7bfb      	ldrb	r3, [r7, #15]
}
 801174c:	4618      	mov	r0, r3
 801174e:	3714      	adds	r7, #20
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr

08011758 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	2202      	movs	r2, #2
 8011768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	68ba      	ldr	r2, [r7, #8]
 801177c:	2100      	movs	r1, #0
 801177e:	68f8      	ldr	r0, [r7, #12]
 8011780:	f003 fe67 	bl	8015452 <USBD_LL_Transmit>

  return USBD_OK;
 8011784:	2300      	movs	r3, #0
}
 8011786:	4618      	mov	r0, r3
 8011788:	3710      	adds	r7, #16
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}

0801178e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801178e:	b580      	push	{r7, lr}
 8011790:	b084      	sub	sp, #16
 8011792:	af00      	add	r7, sp, #0
 8011794:	60f8      	str	r0, [r7, #12]
 8011796:	60b9      	str	r1, [r7, #8]
 8011798:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	68ba      	ldr	r2, [r7, #8]
 801179e:	2100      	movs	r1, #0
 80117a0:	68f8      	ldr	r0, [r7, #12]
 80117a2:	f003 fe56 	bl	8015452 <USBD_LL_Transmit>

  return USBD_OK;
 80117a6:	2300      	movs	r3, #0
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3710      	adds	r7, #16
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b084      	sub	sp, #16
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2203      	movs	r2, #3
 80117c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	68ba      	ldr	r2, [r7, #8]
 80117d8:	2100      	movs	r1, #0
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	f003 fe5a 	bl	8015494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80117e0:	2300      	movs	r3, #0
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3710      	adds	r7, #16
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}

080117ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80117ea:	b580      	push	{r7, lr}
 80117ec:	b084      	sub	sp, #16
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	60f8      	str	r0, [r7, #12]
 80117f2:	60b9      	str	r1, [r7, #8]
 80117f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	68ba      	ldr	r2, [r7, #8]
 80117fa:	2100      	movs	r1, #0
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	f003 fe49 	bl	8015494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011802:	2300      	movs	r3, #0
}
 8011804:	4618      	mov	r0, r3
 8011806:	3710      	adds	r7, #16
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2204      	movs	r2, #4
 8011818:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801181c:	2300      	movs	r3, #0
 801181e:	2200      	movs	r2, #0
 8011820:	2100      	movs	r1, #0
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f003 fe15 	bl	8015452 <USBD_LL_Transmit>

  return USBD_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3708      	adds	r7, #8
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}

08011832 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011832:	b580      	push	{r7, lr}
 8011834:	b082      	sub	sp, #8
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2205      	movs	r2, #5
 801183e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011842:	2300      	movs	r3, #0
 8011844:	2200      	movs	r2, #0
 8011846:	2100      	movs	r1, #0
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f003 fe23 	bl	8015494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011858:	b480      	push	{r7}
 801185a:	b087      	sub	sp, #28
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	4613      	mov	r3, r2
 8011864:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011866:	2301      	movs	r3, #1
 8011868:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801186a:	2300      	movs	r3, #0
 801186c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801186e:	4b1f      	ldr	r3, [pc, #124]	; (80118ec <FATFS_LinkDriverEx+0x94>)
 8011870:	7a5b      	ldrb	r3, [r3, #9]
 8011872:	b2db      	uxtb	r3, r3
 8011874:	2b00      	cmp	r3, #0
 8011876:	d131      	bne.n	80118dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011878:	4b1c      	ldr	r3, [pc, #112]	; (80118ec <FATFS_LinkDriverEx+0x94>)
 801187a:	7a5b      	ldrb	r3, [r3, #9]
 801187c:	b2db      	uxtb	r3, r3
 801187e:	461a      	mov	r2, r3
 8011880:	4b1a      	ldr	r3, [pc, #104]	; (80118ec <FATFS_LinkDriverEx+0x94>)
 8011882:	2100      	movs	r1, #0
 8011884:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011886:	4b19      	ldr	r3, [pc, #100]	; (80118ec <FATFS_LinkDriverEx+0x94>)
 8011888:	7a5b      	ldrb	r3, [r3, #9]
 801188a:	b2db      	uxtb	r3, r3
 801188c:	4a17      	ldr	r2, [pc, #92]	; (80118ec <FATFS_LinkDriverEx+0x94>)
 801188e:	009b      	lsls	r3, r3, #2
 8011890:	4413      	add	r3, r2
 8011892:	68fa      	ldr	r2, [r7, #12]
 8011894:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011896:	4b15      	ldr	r3, [pc, #84]	; (80118ec <FATFS_LinkDriverEx+0x94>)
 8011898:	7a5b      	ldrb	r3, [r3, #9]
 801189a:	b2db      	uxtb	r3, r3
 801189c:	461a      	mov	r2, r3
 801189e:	4b13      	ldr	r3, [pc, #76]	; (80118ec <FATFS_LinkDriverEx+0x94>)
 80118a0:	4413      	add	r3, r2
 80118a2:	79fa      	ldrb	r2, [r7, #7]
 80118a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80118a6:	4b11      	ldr	r3, [pc, #68]	; (80118ec <FATFS_LinkDriverEx+0x94>)
 80118a8:	7a5b      	ldrb	r3, [r3, #9]
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	1c5a      	adds	r2, r3, #1
 80118ae:	b2d1      	uxtb	r1, r2
 80118b0:	4a0e      	ldr	r2, [pc, #56]	; (80118ec <FATFS_LinkDriverEx+0x94>)
 80118b2:	7251      	strb	r1, [r2, #9]
 80118b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80118b6:	7dbb      	ldrb	r3, [r7, #22]
 80118b8:	3330      	adds	r3, #48	; 0x30
 80118ba:	b2da      	uxtb	r2, r3
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	3301      	adds	r3, #1
 80118c4:	223a      	movs	r2, #58	; 0x3a
 80118c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	3302      	adds	r3, #2
 80118cc:	222f      	movs	r2, #47	; 0x2f
 80118ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	3303      	adds	r3, #3
 80118d4:	2200      	movs	r2, #0
 80118d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80118d8:	2300      	movs	r3, #0
 80118da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80118dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	371c      	adds	r7, #28
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	200020f8 	.word	0x200020f8

080118f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118fa:	2200      	movs	r2, #0
 80118fc:	6839      	ldr	r1, [r7, #0]
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f7ff ffaa 	bl	8011858 <FATFS_LinkDriverEx>
 8011904:	4603      	mov	r3, r0
}
 8011906:	4618      	mov	r0, r3
 8011908:	3708      	adds	r7, #8
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}

0801190e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801190e:	b480      	push	{r7}
 8011910:	b085      	sub	sp, #20
 8011912:	af00      	add	r7, sp, #0
 8011914:	4603      	mov	r3, r0
 8011916:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011918:	2300      	movs	r3, #0
 801191a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801191c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011920:	2b84      	cmp	r3, #132	; 0x84
 8011922:	d005      	beq.n	8011930 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011924:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	4413      	add	r3, r2
 801192c:	3303      	adds	r3, #3
 801192e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011930:	68fb      	ldr	r3, [r7, #12]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3714      	adds	r7, #20
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr

0801193e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801193e:	b580      	push	{r7, lr}
 8011940:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011942:	f001 fa73 	bl	8012e2c <vTaskStartScheduler>
  
  return osOK;
 8011946:	2300      	movs	r3, #0
}
 8011948:	4618      	mov	r0, r3
 801194a:	bd80      	pop	{r7, pc}

0801194c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801194e:	b089      	sub	sp, #36	; 0x24
 8011950:	af04      	add	r7, sp, #16
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	695b      	ldr	r3, [r3, #20]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d020      	beq.n	80119a0 <osThreadCreate+0x54>
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	699b      	ldr	r3, [r3, #24]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d01c      	beq.n	80119a0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	685c      	ldr	r4, [r3, #4]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	691e      	ldr	r6, [r3, #16]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011978:	4618      	mov	r0, r3
 801197a:	f7ff ffc8 	bl	801190e <makeFreeRtosPriority>
 801197e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	695b      	ldr	r3, [r3, #20]
 8011984:	687a      	ldr	r2, [r7, #4]
 8011986:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011988:	9202      	str	r2, [sp, #8]
 801198a:	9301      	str	r3, [sp, #4]
 801198c:	9100      	str	r1, [sp, #0]
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	4632      	mov	r2, r6
 8011992:	4629      	mov	r1, r5
 8011994:	4620      	mov	r0, r4
 8011996:	f000 ffe9 	bl	801296c <xTaskCreateStatic>
 801199a:	4603      	mov	r3, r0
 801199c:	60fb      	str	r3, [r7, #12]
 801199e:	e01c      	b.n	80119da <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	685c      	ldr	r4, [r3, #4]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119ac:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7ff ffaa 	bl	801190e <makeFreeRtosPriority>
 80119ba:	4602      	mov	r2, r0
 80119bc:	f107 030c 	add.w	r3, r7, #12
 80119c0:	9301      	str	r3, [sp, #4]
 80119c2:	9200      	str	r2, [sp, #0]
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	4632      	mov	r2, r6
 80119c8:	4629      	mov	r1, r5
 80119ca:	4620      	mov	r0, r4
 80119cc:	f001 f82b 	bl	8012a26 <xTaskCreate>
 80119d0:	4603      	mov	r3, r0
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d001      	beq.n	80119da <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80119d6:	2300      	movs	r3, #0
 80119d8:	e000      	b.n	80119dc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80119da:	68fb      	ldr	r3, [r7, #12]
}
 80119dc:	4618      	mov	r0, r3
 80119de:	3714      	adds	r7, #20
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d001      	beq.n	80119fa <osDelay+0x16>
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	e000      	b.n	80119fc <osDelay+0x18>
 80119fa:	2301      	movs	r3, #1
 80119fc:	4618      	mov	r0, r3
 80119fe:	f001 f9e1 	bl	8012dc4 <vTaskDelay>
  
  return osOK;
 8011a02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3710      	adds	r7, #16
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}

08011a0c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b082      	sub	sp, #8
 8011a10:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011a12:	201c      	movs	r0, #28
 8011a14:	f002 fed8 	bl	80147c8 <pvPortMalloc>
 8011a18:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00a      	beq.n	8011a36 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2200      	movs	r2, #0
 8011a24:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	3304      	adds	r3, #4
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f000 f9c8 	bl	8011dc0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2200      	movs	r2, #0
 8011a34:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011a36:	687b      	ldr	r3, [r7, #4]
	}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3708      	adds	r7, #8
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b090      	sub	sp, #64	; 0x40
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	60f8      	str	r0, [r7, #12]
 8011a48:	60b9      	str	r1, [r7, #8]
 8011a4a:	607a      	str	r2, [r7, #4]
 8011a4c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011a52:	2300      	movs	r3, #0
 8011a54:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011a56:	2300      	movs	r3, #0
 8011a58:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d10a      	bne.n	8011a76 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a64:	f383 8811 	msr	BASEPRI, r3
 8011a68:	f3bf 8f6f 	isb	sy
 8011a6c:	f3bf 8f4f 	dsb	sy
 8011a70:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011a72:	bf00      	nop
 8011a74:	e7fe      	b.n	8011a74 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d00a      	beq.n	8011a96 <xEventGroupWaitBits+0x56>
	__asm volatile
 8011a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a84:	f383 8811 	msr	BASEPRI, r3
 8011a88:	f3bf 8f6f 	isb	sy
 8011a8c:	f3bf 8f4f 	dsb	sy
 8011a90:	61fb      	str	r3, [r7, #28]
}
 8011a92:	bf00      	nop
 8011a94:	e7fe      	b.n	8011a94 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d10a      	bne.n	8011ab2 <xEventGroupWaitBits+0x72>
	__asm volatile
 8011a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa0:	f383 8811 	msr	BASEPRI, r3
 8011aa4:	f3bf 8f6f 	isb	sy
 8011aa8:	f3bf 8f4f 	dsb	sy
 8011aac:	61bb      	str	r3, [r7, #24]
}
 8011aae:	bf00      	nop
 8011ab0:	e7fe      	b.n	8011ab0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ab2:	f001 fecb 	bl	801384c <xTaskGetSchedulerState>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d102      	bne.n	8011ac2 <xEventGroupWaitBits+0x82>
 8011abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d101      	bne.n	8011ac6 <xEventGroupWaitBits+0x86>
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e000      	b.n	8011ac8 <xEventGroupWaitBits+0x88>
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d10a      	bne.n	8011ae2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad0:	f383 8811 	msr	BASEPRI, r3
 8011ad4:	f3bf 8f6f 	isb	sy
 8011ad8:	f3bf 8f4f 	dsb	sy
 8011adc:	617b      	str	r3, [r7, #20]
}
 8011ade:	bf00      	nop
 8011ae0:	e7fe      	b.n	8011ae0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011ae2:	f001 fa15 	bl	8012f10 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011aec:	683a      	ldr	r2, [r7, #0]
 8011aee:	68b9      	ldr	r1, [r7, #8]
 8011af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011af2:	f000 f943 	bl	8011d7c <prvTestWaitCondition>
 8011af6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00e      	beq.n	8011b1c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011b02:	2300      	movs	r3, #0
 8011b04:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d028      	beq.n	8011b5e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	43db      	mvns	r3, r3
 8011b14:	401a      	ands	r2, r3
 8011b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b18:	601a      	str	r2, [r3, #0]
 8011b1a:	e020      	b.n	8011b5e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d104      	bne.n	8011b2c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8011b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b24:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011b26:	2301      	movs	r3, #1
 8011b28:	633b      	str	r3, [r7, #48]	; 0x30
 8011b2a:	e018      	b.n	8011b5e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d003      	beq.n	8011b3a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011b38:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d003      	beq.n	8011b48 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011b46:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b4a:	1d18      	adds	r0, r3, #4
 8011b4c:	68ba      	ldr	r2, [r7, #8]
 8011b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b50:	4313      	orrs	r3, r2
 8011b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b54:	4619      	mov	r1, r3
 8011b56:	f001 fbef 	bl	8013338 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011b5e:	f001 f9e5 	bl	8012f2c <xTaskResumeAll>
 8011b62:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d031      	beq.n	8011bce <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d107      	bne.n	8011b80 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011b70:	4b19      	ldr	r3, [pc, #100]	; (8011bd8 <xEventGroupWaitBits+0x198>)
 8011b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b76:	601a      	str	r2, [r3, #0]
 8011b78:	f3bf 8f4f 	dsb	sy
 8011b7c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011b80:	f001 ff08 	bl	8013994 <uxTaskResetEventItemValue>
 8011b84:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d11a      	bne.n	8011bc6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011b90:	f002 fcf8 	bl	8014584 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011b9a:	683a      	ldr	r2, [r7, #0]
 8011b9c:	68b9      	ldr	r1, [r7, #8]
 8011b9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ba0:	f000 f8ec 	bl	8011d7c <prvTestWaitCondition>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d009      	beq.n	8011bbe <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d006      	beq.n	8011bbe <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	43db      	mvns	r3, r3
 8011bb8:	401a      	ands	r2, r3
 8011bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bbc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011bc2:	f002 fd0f 	bl	80145e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3740      	adds	r7, #64	; 0x40
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	e000ed04 	.word	0xe000ed04

08011bdc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b086      	sub	sp, #24
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d10a      	bne.n	8011c06 <xEventGroupClearBits+0x2a>
	__asm volatile
 8011bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf4:	f383 8811 	msr	BASEPRI, r3
 8011bf8:	f3bf 8f6f 	isb	sy
 8011bfc:	f3bf 8f4f 	dsb	sy
 8011c00:	60fb      	str	r3, [r7, #12]
}
 8011c02:	bf00      	nop
 8011c04:	e7fe      	b.n	8011c04 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00a      	beq.n	8011c26 <xEventGroupClearBits+0x4a>
	__asm volatile
 8011c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c14:	f383 8811 	msr	BASEPRI, r3
 8011c18:	f3bf 8f6f 	isb	sy
 8011c1c:	f3bf 8f4f 	dsb	sy
 8011c20:	60bb      	str	r3, [r7, #8]
}
 8011c22:	bf00      	nop
 8011c24:	e7fe      	b.n	8011c24 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8011c26:	f002 fcad 	bl	8014584 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	43db      	mvns	r3, r3
 8011c38:	401a      	ands	r2, r3
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8011c3e:	f002 fcd1 	bl	80145e4 <vPortExitCritical>

	return uxReturn;
 8011c42:	693b      	ldr	r3, [r7, #16]
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3718      	adds	r7, #24
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}

08011c4c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b08e      	sub	sp, #56	; 0x38
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011c56:	2300      	movs	r3, #0
 8011c58:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d10a      	bne.n	8011c7e <xEventGroupSetBits+0x32>
	__asm volatile
 8011c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6c:	f383 8811 	msr	BASEPRI, r3
 8011c70:	f3bf 8f6f 	isb	sy
 8011c74:	f3bf 8f4f 	dsb	sy
 8011c78:	613b      	str	r3, [r7, #16]
}
 8011c7a:	bf00      	nop
 8011c7c:	e7fe      	b.n	8011c7c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d00a      	beq.n	8011c9e <xEventGroupSetBits+0x52>
	__asm volatile
 8011c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c8c:	f383 8811 	msr	BASEPRI, r3
 8011c90:	f3bf 8f6f 	isb	sy
 8011c94:	f3bf 8f4f 	dsb	sy
 8011c98:	60fb      	str	r3, [r7, #12]
}
 8011c9a:	bf00      	nop
 8011c9c:	e7fe      	b.n	8011c9c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca0:	3304      	adds	r3, #4
 8011ca2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca6:	3308      	adds	r3, #8
 8011ca8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011caa:	f001 f931 	bl	8012f10 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	431a      	orrs	r2, r3
 8011cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cbe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011cc0:	e03c      	b.n	8011d3c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011cd2:	69bb      	ldr	r3, [r7, #24]
 8011cd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011cd8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011ce0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d108      	bne.n	8011cfe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	69bb      	ldr	r3, [r7, #24]
 8011cf2:	4013      	ands	r3, r2
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d00b      	beq.n	8011d10 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cfc:	e008      	b.n	8011d10 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d00:	681a      	ldr	r2, [r3, #0]
 8011d02:	69bb      	ldr	r3, [r7, #24]
 8011d04:	4013      	ands	r3, r2
 8011d06:	69ba      	ldr	r2, [r7, #24]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d101      	bne.n	8011d10 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d010      	beq.n	8011d38 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d003      	beq.n	8011d28 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	4313      	orrs	r3, r2
 8011d26:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011d30:	4619      	mov	r1, r3
 8011d32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d34:	f001 fbca 	bl	80134cc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d3e:	6a3b      	ldr	r3, [r7, #32]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d1be      	bne.n	8011cc2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4a:	43db      	mvns	r3, r3
 8011d4c:	401a      	ands	r2, r3
 8011d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d50:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011d52:	f001 f8eb 	bl	8012f2c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d58:	681b      	ldr	r3, [r3, #0]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3738      	adds	r7, #56	; 0x38
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b082      	sub	sp, #8
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
 8011d6a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011d6c:	6839      	ldr	r1, [r7, #0]
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7ff ff6c 	bl	8011c4c <xEventGroupSetBits>
}
 8011d74:	bf00      	nop
 8011d76:	3708      	adds	r7, #8
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b087      	sub	sp, #28
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d107      	bne.n	8011da2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011d92:	68fa      	ldr	r2, [r7, #12]
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	4013      	ands	r3, r2
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00a      	beq.n	8011db2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	617b      	str	r3, [r7, #20]
 8011da0:	e007      	b.n	8011db2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011da2:	68fa      	ldr	r2, [r7, #12]
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	4013      	ands	r3, r2
 8011da8:	68ba      	ldr	r2, [r7, #8]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d101      	bne.n	8011db2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011dae:	2301      	movs	r3, #1
 8011db0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011db2:	697b      	ldr	r3, [r7, #20]
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	371c      	adds	r7, #28
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f103 0208 	add.w	r2, r3, #8
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f103 0208 	add.w	r2, r3, #8
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f103 0208 	add.w	r2, r3, #8
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2200      	movs	r2, #0
 8011df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011df4:	bf00      	nop
 8011df6:	370c      	adds	r7, #12
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr

08011e00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011e00:	b480      	push	{r7}
 8011e02:	b083      	sub	sp, #12
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011e0e:	bf00      	nop
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr

08011e1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e1a:	b480      	push	{r7}
 8011e1c:	b085      	sub	sp, #20
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
 8011e22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	689a      	ldr	r2, [r3, #8]
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	689b      	ldr	r3, [r3, #8]
 8011e3c:	683a      	ldr	r2, [r7, #0]
 8011e3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	683a      	ldr	r2, [r7, #0]
 8011e44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	1c5a      	adds	r2, r3, #1
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	601a      	str	r2, [r3, #0]
}
 8011e56:	bf00      	nop
 8011e58:	3714      	adds	r7, #20
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr

08011e62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e62:	b480      	push	{r7}
 8011e64:	b085      	sub	sp, #20
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
 8011e6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e78:	d103      	bne.n	8011e82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	691b      	ldr	r3, [r3, #16]
 8011e7e:	60fb      	str	r3, [r7, #12]
 8011e80:	e00c      	b.n	8011e9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	3308      	adds	r3, #8
 8011e86:	60fb      	str	r3, [r7, #12]
 8011e88:	e002      	b.n	8011e90 <vListInsert+0x2e>
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	60fb      	str	r3, [r7, #12]
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d2f6      	bcs.n	8011e8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	685a      	ldr	r2, [r3, #4]
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	683a      	ldr	r2, [r7, #0]
 8011eaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	68fa      	ldr	r2, [r7, #12]
 8011eb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	683a      	ldr	r2, [r7, #0]
 8011eb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	1c5a      	adds	r2, r3, #1
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	601a      	str	r2, [r3, #0]
}
 8011ec8:	bf00      	nop
 8011eca:	3714      	adds	r7, #20
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr

08011ed4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	691b      	ldr	r3, [r3, #16]
 8011ee0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	6892      	ldr	r2, [r2, #8]
 8011eea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	689b      	ldr	r3, [r3, #8]
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	6852      	ldr	r2, [r2, #4]
 8011ef4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d103      	bne.n	8011f08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	689a      	ldr	r2, [r3, #8]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	1e5a      	subs	r2, r3, #1
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	681b      	ldr	r3, [r3, #0]
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3714      	adds	r7, #20
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d10a      	bne.n	8011f52 <xQueueGenericReset+0x2a>
	__asm volatile
 8011f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f40:	f383 8811 	msr	BASEPRI, r3
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	f3bf 8f4f 	dsb	sy
 8011f4c:	60bb      	str	r3, [r7, #8]
}
 8011f4e:	bf00      	nop
 8011f50:	e7fe      	b.n	8011f50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011f52:	f002 fb17 	bl	8014584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681a      	ldr	r2, [r3, #0]
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f5e:	68f9      	ldr	r1, [r7, #12]
 8011f60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011f62:	fb01 f303 	mul.w	r3, r1, r3
 8011f66:	441a      	add	r2, r3
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f82:	3b01      	subs	r3, #1
 8011f84:	68f9      	ldr	r1, [r7, #12]
 8011f86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011f88:	fb01 f303 	mul.w	r3, r1, r3
 8011f8c:	441a      	add	r2, r3
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	22ff      	movs	r2, #255	; 0xff
 8011f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	22ff      	movs	r2, #255	; 0xff
 8011f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d114      	bne.n	8011fd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	691b      	ldr	r3, [r3, #16]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d01a      	beq.n	8011fe6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	3310      	adds	r3, #16
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f001 fa27 	bl	8013408 <xTaskRemoveFromEventList>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d012      	beq.n	8011fe6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011fc0:	4b0c      	ldr	r3, [pc, #48]	; (8011ff4 <xQueueGenericReset+0xcc>)
 8011fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fc6:	601a      	str	r2, [r3, #0]
 8011fc8:	f3bf 8f4f 	dsb	sy
 8011fcc:	f3bf 8f6f 	isb	sy
 8011fd0:	e009      	b.n	8011fe6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	3310      	adds	r3, #16
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7ff fef2 	bl	8011dc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	3324      	adds	r3, #36	; 0x24
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7ff feed 	bl	8011dc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011fe6:	f002 fafd 	bl	80145e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011fea:	2301      	movs	r3, #1
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3710      	adds	r7, #16
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	e000ed04 	.word	0xe000ed04

08011ff8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b08e      	sub	sp, #56	; 0x38
 8011ffc:	af02      	add	r7, sp, #8
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]
 8012004:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d10a      	bne.n	8012022 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012010:	f383 8811 	msr	BASEPRI, r3
 8012014:	f3bf 8f6f 	isb	sy
 8012018:	f3bf 8f4f 	dsb	sy
 801201c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801201e:	bf00      	nop
 8012020:	e7fe      	b.n	8012020 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d10a      	bne.n	801203e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801202c:	f383 8811 	msr	BASEPRI, r3
 8012030:	f3bf 8f6f 	isb	sy
 8012034:	f3bf 8f4f 	dsb	sy
 8012038:	627b      	str	r3, [r7, #36]	; 0x24
}
 801203a:	bf00      	nop
 801203c:	e7fe      	b.n	801203c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d002      	beq.n	801204a <xQueueGenericCreateStatic+0x52>
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <xQueueGenericCreateStatic+0x56>
 801204a:	2301      	movs	r3, #1
 801204c:	e000      	b.n	8012050 <xQueueGenericCreateStatic+0x58>
 801204e:	2300      	movs	r3, #0
 8012050:	2b00      	cmp	r3, #0
 8012052:	d10a      	bne.n	801206a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012058:	f383 8811 	msr	BASEPRI, r3
 801205c:	f3bf 8f6f 	isb	sy
 8012060:	f3bf 8f4f 	dsb	sy
 8012064:	623b      	str	r3, [r7, #32]
}
 8012066:	bf00      	nop
 8012068:	e7fe      	b.n	8012068 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d102      	bne.n	8012076 <xQueueGenericCreateStatic+0x7e>
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d101      	bne.n	801207a <xQueueGenericCreateStatic+0x82>
 8012076:	2301      	movs	r3, #1
 8012078:	e000      	b.n	801207c <xQueueGenericCreateStatic+0x84>
 801207a:	2300      	movs	r3, #0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d10a      	bne.n	8012096 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012084:	f383 8811 	msr	BASEPRI, r3
 8012088:	f3bf 8f6f 	isb	sy
 801208c:	f3bf 8f4f 	dsb	sy
 8012090:	61fb      	str	r3, [r7, #28]
}
 8012092:	bf00      	nop
 8012094:	e7fe      	b.n	8012094 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012096:	2348      	movs	r3, #72	; 0x48
 8012098:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	2b48      	cmp	r3, #72	; 0x48
 801209e:	d00a      	beq.n	80120b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80120a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a4:	f383 8811 	msr	BASEPRI, r3
 80120a8:	f3bf 8f6f 	isb	sy
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	61bb      	str	r3, [r7, #24]
}
 80120b2:	bf00      	nop
 80120b4:	e7fe      	b.n	80120b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80120b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80120bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d00d      	beq.n	80120de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80120c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c4:	2201      	movs	r2, #1
 80120c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80120ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80120ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d0:	9300      	str	r3, [sp, #0]
 80120d2:	4613      	mov	r3, r2
 80120d4:	687a      	ldr	r2, [r7, #4]
 80120d6:	68b9      	ldr	r1, [r7, #8]
 80120d8:	68f8      	ldr	r0, [r7, #12]
 80120da:	f000 f83f 	bl	801215c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80120de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80120e0:	4618      	mov	r0, r3
 80120e2:	3730      	adds	r7, #48	; 0x30
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b08a      	sub	sp, #40	; 0x28
 80120ec:	af02      	add	r7, sp, #8
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	60b9      	str	r1, [r7, #8]
 80120f2:	4613      	mov	r3, r2
 80120f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d10a      	bne.n	8012112 <xQueueGenericCreate+0x2a>
	__asm volatile
 80120fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012100:	f383 8811 	msr	BASEPRI, r3
 8012104:	f3bf 8f6f 	isb	sy
 8012108:	f3bf 8f4f 	dsb	sy
 801210c:	613b      	str	r3, [r7, #16]
}
 801210e:	bf00      	nop
 8012110:	e7fe      	b.n	8012110 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	68ba      	ldr	r2, [r7, #8]
 8012116:	fb02 f303 	mul.w	r3, r2, r3
 801211a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	3348      	adds	r3, #72	; 0x48
 8012120:	4618      	mov	r0, r3
 8012122:	f002 fb51 	bl	80147c8 <pvPortMalloc>
 8012126:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012128:	69bb      	ldr	r3, [r7, #24]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d011      	beq.n	8012152 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	3348      	adds	r3, #72	; 0x48
 8012136:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	2200      	movs	r2, #0
 801213c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012140:	79fa      	ldrb	r2, [r7, #7]
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	9300      	str	r3, [sp, #0]
 8012146:	4613      	mov	r3, r2
 8012148:	697a      	ldr	r2, [r7, #20]
 801214a:	68b9      	ldr	r1, [r7, #8]
 801214c:	68f8      	ldr	r0, [r7, #12]
 801214e:	f000 f805 	bl	801215c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012152:	69bb      	ldr	r3, [r7, #24]
	}
 8012154:	4618      	mov	r0, r3
 8012156:	3720      	adds	r7, #32
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b084      	sub	sp, #16
 8012160:	af00      	add	r7, sp, #0
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	60b9      	str	r1, [r7, #8]
 8012166:	607a      	str	r2, [r7, #4]
 8012168:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d103      	bne.n	8012178 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	69ba      	ldr	r2, [r7, #24]
 8012174:	601a      	str	r2, [r3, #0]
 8012176:	e002      	b.n	801217e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	687a      	ldr	r2, [r7, #4]
 801217c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	68fa      	ldr	r2, [r7, #12]
 8012182:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012184:	69bb      	ldr	r3, [r7, #24]
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801218a:	2101      	movs	r1, #1
 801218c:	69b8      	ldr	r0, [r7, #24]
 801218e:	f7ff fecb 	bl	8011f28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012192:	bf00      	nop
 8012194:	3710      	adds	r7, #16
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
	...

0801219c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b08e      	sub	sp, #56	; 0x38
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80121aa:	2300      	movs	r3, #0
 80121ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80121b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d10a      	bne.n	80121ce <xQueueGenericSend+0x32>
	__asm volatile
 80121b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121bc:	f383 8811 	msr	BASEPRI, r3
 80121c0:	f3bf 8f6f 	isb	sy
 80121c4:	f3bf 8f4f 	dsb	sy
 80121c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80121ca:	bf00      	nop
 80121cc:	e7fe      	b.n	80121cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d103      	bne.n	80121dc <xQueueGenericSend+0x40>
 80121d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d101      	bne.n	80121e0 <xQueueGenericSend+0x44>
 80121dc:	2301      	movs	r3, #1
 80121de:	e000      	b.n	80121e2 <xQueueGenericSend+0x46>
 80121e0:	2300      	movs	r3, #0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d10a      	bne.n	80121fc <xQueueGenericSend+0x60>
	__asm volatile
 80121e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ea:	f383 8811 	msr	BASEPRI, r3
 80121ee:	f3bf 8f6f 	isb	sy
 80121f2:	f3bf 8f4f 	dsb	sy
 80121f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121f8:	bf00      	nop
 80121fa:	e7fe      	b.n	80121fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	2b02      	cmp	r3, #2
 8012200:	d103      	bne.n	801220a <xQueueGenericSend+0x6e>
 8012202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012206:	2b01      	cmp	r3, #1
 8012208:	d101      	bne.n	801220e <xQueueGenericSend+0x72>
 801220a:	2301      	movs	r3, #1
 801220c:	e000      	b.n	8012210 <xQueueGenericSend+0x74>
 801220e:	2300      	movs	r3, #0
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10a      	bne.n	801222a <xQueueGenericSend+0x8e>
	__asm volatile
 8012214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012218:	f383 8811 	msr	BASEPRI, r3
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	623b      	str	r3, [r7, #32]
}
 8012226:	bf00      	nop
 8012228:	e7fe      	b.n	8012228 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801222a:	f001 fb0f 	bl	801384c <xTaskGetSchedulerState>
 801222e:	4603      	mov	r3, r0
 8012230:	2b00      	cmp	r3, #0
 8012232:	d102      	bne.n	801223a <xQueueGenericSend+0x9e>
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d101      	bne.n	801223e <xQueueGenericSend+0xa2>
 801223a:	2301      	movs	r3, #1
 801223c:	e000      	b.n	8012240 <xQueueGenericSend+0xa4>
 801223e:	2300      	movs	r3, #0
 8012240:	2b00      	cmp	r3, #0
 8012242:	d10a      	bne.n	801225a <xQueueGenericSend+0xbe>
	__asm volatile
 8012244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012248:	f383 8811 	msr	BASEPRI, r3
 801224c:	f3bf 8f6f 	isb	sy
 8012250:	f3bf 8f4f 	dsb	sy
 8012254:	61fb      	str	r3, [r7, #28]
}
 8012256:	bf00      	nop
 8012258:	e7fe      	b.n	8012258 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801225a:	f002 f993 	bl	8014584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012266:	429a      	cmp	r2, r3
 8012268:	d302      	bcc.n	8012270 <xQueueGenericSend+0xd4>
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	2b02      	cmp	r3, #2
 801226e:	d129      	bne.n	80122c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012270:	683a      	ldr	r2, [r7, #0]
 8012272:	68b9      	ldr	r1, [r7, #8]
 8012274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012276:	f000 fa0b 	bl	8012690 <prvCopyDataToQueue>
 801227a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012280:	2b00      	cmp	r3, #0
 8012282:	d010      	beq.n	80122a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012286:	3324      	adds	r3, #36	; 0x24
 8012288:	4618      	mov	r0, r3
 801228a:	f001 f8bd 	bl	8013408 <xTaskRemoveFromEventList>
 801228e:	4603      	mov	r3, r0
 8012290:	2b00      	cmp	r3, #0
 8012292:	d013      	beq.n	80122bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012294:	4b3f      	ldr	r3, [pc, #252]	; (8012394 <xQueueGenericSend+0x1f8>)
 8012296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801229a:	601a      	str	r2, [r3, #0]
 801229c:	f3bf 8f4f 	dsb	sy
 80122a0:	f3bf 8f6f 	isb	sy
 80122a4:	e00a      	b.n	80122bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80122a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d007      	beq.n	80122bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80122ac:	4b39      	ldr	r3, [pc, #228]	; (8012394 <xQueueGenericSend+0x1f8>)
 80122ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122b2:	601a      	str	r2, [r3, #0]
 80122b4:	f3bf 8f4f 	dsb	sy
 80122b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80122bc:	f002 f992 	bl	80145e4 <vPortExitCritical>
				return pdPASS;
 80122c0:	2301      	movs	r3, #1
 80122c2:	e063      	b.n	801238c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d103      	bne.n	80122d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80122ca:	f002 f98b 	bl	80145e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80122ce:	2300      	movs	r3, #0
 80122d0:	e05c      	b.n	801238c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80122d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d106      	bne.n	80122e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80122d8:	f107 0314 	add.w	r3, r7, #20
 80122dc:	4618      	mov	r0, r3
 80122de:	f001 f957 	bl	8013590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80122e2:	2301      	movs	r3, #1
 80122e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80122e6:	f002 f97d 	bl	80145e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80122ea:	f000 fe11 	bl	8012f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80122ee:	f002 f949 	bl	8014584 <vPortEnterCritical>
 80122f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122f8:	b25b      	sxtb	r3, r3
 80122fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122fe:	d103      	bne.n	8012308 <xQueueGenericSend+0x16c>
 8012300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012302:	2200      	movs	r2, #0
 8012304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801230e:	b25b      	sxtb	r3, r3
 8012310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012314:	d103      	bne.n	801231e <xQueueGenericSend+0x182>
 8012316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012318:	2200      	movs	r2, #0
 801231a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801231e:	f002 f961 	bl	80145e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012322:	1d3a      	adds	r2, r7, #4
 8012324:	f107 0314 	add.w	r3, r7, #20
 8012328:	4611      	mov	r1, r2
 801232a:	4618      	mov	r0, r3
 801232c:	f001 f946 	bl	80135bc <xTaskCheckForTimeOut>
 8012330:	4603      	mov	r3, r0
 8012332:	2b00      	cmp	r3, #0
 8012334:	d124      	bne.n	8012380 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012338:	f000 faa2 	bl	8012880 <prvIsQueueFull>
 801233c:	4603      	mov	r3, r0
 801233e:	2b00      	cmp	r3, #0
 8012340:	d018      	beq.n	8012374 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012344:	3310      	adds	r3, #16
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	4611      	mov	r1, r2
 801234a:	4618      	mov	r0, r3
 801234c:	f000 ffd0 	bl	80132f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012352:	f000 fa2d 	bl	80127b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012356:	f000 fde9 	bl	8012f2c <xTaskResumeAll>
 801235a:	4603      	mov	r3, r0
 801235c:	2b00      	cmp	r3, #0
 801235e:	f47f af7c 	bne.w	801225a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012362:	4b0c      	ldr	r3, [pc, #48]	; (8012394 <xQueueGenericSend+0x1f8>)
 8012364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012368:	601a      	str	r2, [r3, #0]
 801236a:	f3bf 8f4f 	dsb	sy
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	e772      	b.n	801225a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012376:	f000 fa1b 	bl	80127b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801237a:	f000 fdd7 	bl	8012f2c <xTaskResumeAll>
 801237e:	e76c      	b.n	801225a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012382:	f000 fa15 	bl	80127b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012386:	f000 fdd1 	bl	8012f2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801238a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801238c:	4618      	mov	r0, r3
 801238e:	3738      	adds	r7, #56	; 0x38
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	e000ed04 	.word	0xe000ed04

08012398 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b090      	sub	sp, #64	; 0x40
 801239c:	af00      	add	r7, sp, #0
 801239e:	60f8      	str	r0, [r7, #12]
 80123a0:	60b9      	str	r1, [r7, #8]
 80123a2:	607a      	str	r2, [r7, #4]
 80123a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80123aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d10a      	bne.n	80123c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80123b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b4:	f383 8811 	msr	BASEPRI, r3
 80123b8:	f3bf 8f6f 	isb	sy
 80123bc:	f3bf 8f4f 	dsb	sy
 80123c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80123c2:	bf00      	nop
 80123c4:	e7fe      	b.n	80123c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d103      	bne.n	80123d4 <xQueueGenericSendFromISR+0x3c>
 80123cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d101      	bne.n	80123d8 <xQueueGenericSendFromISR+0x40>
 80123d4:	2301      	movs	r3, #1
 80123d6:	e000      	b.n	80123da <xQueueGenericSendFromISR+0x42>
 80123d8:	2300      	movs	r3, #0
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d10a      	bne.n	80123f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80123de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e2:	f383 8811 	msr	BASEPRI, r3
 80123e6:	f3bf 8f6f 	isb	sy
 80123ea:	f3bf 8f4f 	dsb	sy
 80123ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80123f0:	bf00      	nop
 80123f2:	e7fe      	b.n	80123f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	2b02      	cmp	r3, #2
 80123f8:	d103      	bne.n	8012402 <xQueueGenericSendFromISR+0x6a>
 80123fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123fe:	2b01      	cmp	r3, #1
 8012400:	d101      	bne.n	8012406 <xQueueGenericSendFromISR+0x6e>
 8012402:	2301      	movs	r3, #1
 8012404:	e000      	b.n	8012408 <xQueueGenericSendFromISR+0x70>
 8012406:	2300      	movs	r3, #0
 8012408:	2b00      	cmp	r3, #0
 801240a:	d10a      	bne.n	8012422 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012410:	f383 8811 	msr	BASEPRI, r3
 8012414:	f3bf 8f6f 	isb	sy
 8012418:	f3bf 8f4f 	dsb	sy
 801241c:	623b      	str	r3, [r7, #32]
}
 801241e:	bf00      	nop
 8012420:	e7fe      	b.n	8012420 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012422:	f002 f991 	bl	8014748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012426:	f3ef 8211 	mrs	r2, BASEPRI
 801242a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242e:	f383 8811 	msr	BASEPRI, r3
 8012432:	f3bf 8f6f 	isb	sy
 8012436:	f3bf 8f4f 	dsb	sy
 801243a:	61fa      	str	r2, [r7, #28]
 801243c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801243e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012440:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801244a:	429a      	cmp	r2, r3
 801244c:	d302      	bcc.n	8012454 <xQueueGenericSendFromISR+0xbc>
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	2b02      	cmp	r3, #2
 8012452:	d12f      	bne.n	80124b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801245a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012462:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012464:	683a      	ldr	r2, [r7, #0]
 8012466:	68b9      	ldr	r1, [r7, #8]
 8012468:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801246a:	f000 f911 	bl	8012690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801246e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012476:	d112      	bne.n	801249e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801247c:	2b00      	cmp	r3, #0
 801247e:	d016      	beq.n	80124ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012482:	3324      	adds	r3, #36	; 0x24
 8012484:	4618      	mov	r0, r3
 8012486:	f000 ffbf 	bl	8013408 <xTaskRemoveFromEventList>
 801248a:	4603      	mov	r3, r0
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00e      	beq.n	80124ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00b      	beq.n	80124ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2201      	movs	r2, #1
 801249a:	601a      	str	r2, [r3, #0]
 801249c:	e007      	b.n	80124ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801249e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80124a2:	3301      	adds	r3, #1
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	b25a      	sxtb	r2, r3
 80124a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80124ae:	2301      	movs	r3, #1
 80124b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80124b2:	e001      	b.n	80124b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80124b4:	2300      	movs	r3, #0
 80124b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80124b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80124c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80124c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3740      	adds	r7, #64	; 0x40
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
	...

080124d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b08c      	sub	sp, #48	; 0x30
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80124dc:	2300      	movs	r3, #0
 80124de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80124e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d10a      	bne.n	8012500 <xQueueReceive+0x30>
	__asm volatile
 80124ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ee:	f383 8811 	msr	BASEPRI, r3
 80124f2:	f3bf 8f6f 	isb	sy
 80124f6:	f3bf 8f4f 	dsb	sy
 80124fa:	623b      	str	r3, [r7, #32]
}
 80124fc:	bf00      	nop
 80124fe:	e7fe      	b.n	80124fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d103      	bne.n	801250e <xQueueReceive+0x3e>
 8012506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801250a:	2b00      	cmp	r3, #0
 801250c:	d101      	bne.n	8012512 <xQueueReceive+0x42>
 801250e:	2301      	movs	r3, #1
 8012510:	e000      	b.n	8012514 <xQueueReceive+0x44>
 8012512:	2300      	movs	r3, #0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d10a      	bne.n	801252e <xQueueReceive+0x5e>
	__asm volatile
 8012518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801251c:	f383 8811 	msr	BASEPRI, r3
 8012520:	f3bf 8f6f 	isb	sy
 8012524:	f3bf 8f4f 	dsb	sy
 8012528:	61fb      	str	r3, [r7, #28]
}
 801252a:	bf00      	nop
 801252c:	e7fe      	b.n	801252c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801252e:	f001 f98d 	bl	801384c <xTaskGetSchedulerState>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d102      	bne.n	801253e <xQueueReceive+0x6e>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d101      	bne.n	8012542 <xQueueReceive+0x72>
 801253e:	2301      	movs	r3, #1
 8012540:	e000      	b.n	8012544 <xQueueReceive+0x74>
 8012542:	2300      	movs	r3, #0
 8012544:	2b00      	cmp	r3, #0
 8012546:	d10a      	bne.n	801255e <xQueueReceive+0x8e>
	__asm volatile
 8012548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801254c:	f383 8811 	msr	BASEPRI, r3
 8012550:	f3bf 8f6f 	isb	sy
 8012554:	f3bf 8f4f 	dsb	sy
 8012558:	61bb      	str	r3, [r7, #24]
}
 801255a:	bf00      	nop
 801255c:	e7fe      	b.n	801255c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801255e:	f002 f811 	bl	8014584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012566:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256a:	2b00      	cmp	r3, #0
 801256c:	d01f      	beq.n	80125ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801256e:	68b9      	ldr	r1, [r7, #8]
 8012570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012572:	f000 f8f7 	bl	8012764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012578:	1e5a      	subs	r2, r3, #1
 801257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012580:	691b      	ldr	r3, [r3, #16]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00f      	beq.n	80125a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012588:	3310      	adds	r3, #16
 801258a:	4618      	mov	r0, r3
 801258c:	f000 ff3c 	bl	8013408 <xTaskRemoveFromEventList>
 8012590:	4603      	mov	r3, r0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d007      	beq.n	80125a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012596:	4b3d      	ldr	r3, [pc, #244]	; (801268c <xQueueReceive+0x1bc>)
 8012598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801259c:	601a      	str	r2, [r3, #0]
 801259e:	f3bf 8f4f 	dsb	sy
 80125a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80125a6:	f002 f81d 	bl	80145e4 <vPortExitCritical>
				return pdPASS;
 80125aa:	2301      	movs	r3, #1
 80125ac:	e069      	b.n	8012682 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d103      	bne.n	80125bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80125b4:	f002 f816 	bl	80145e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80125b8:	2300      	movs	r3, #0
 80125ba:	e062      	b.n	8012682 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80125bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d106      	bne.n	80125d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80125c2:	f107 0310 	add.w	r3, r7, #16
 80125c6:	4618      	mov	r0, r3
 80125c8:	f000 ffe2 	bl	8013590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80125cc:	2301      	movs	r3, #1
 80125ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80125d0:	f002 f808 	bl	80145e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80125d4:	f000 fc9c 	bl	8012f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80125d8:	f001 ffd4 	bl	8014584 <vPortEnterCritical>
 80125dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125e2:	b25b      	sxtb	r3, r3
 80125e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e8:	d103      	bne.n	80125f2 <xQueueReceive+0x122>
 80125ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ec:	2200      	movs	r2, #0
 80125ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80125f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125f8:	b25b      	sxtb	r3, r3
 80125fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125fe:	d103      	bne.n	8012608 <xQueueReceive+0x138>
 8012600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012602:	2200      	movs	r2, #0
 8012604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012608:	f001 ffec 	bl	80145e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801260c:	1d3a      	adds	r2, r7, #4
 801260e:	f107 0310 	add.w	r3, r7, #16
 8012612:	4611      	mov	r1, r2
 8012614:	4618      	mov	r0, r3
 8012616:	f000 ffd1 	bl	80135bc <xTaskCheckForTimeOut>
 801261a:	4603      	mov	r3, r0
 801261c:	2b00      	cmp	r3, #0
 801261e:	d123      	bne.n	8012668 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012622:	f000 f917 	bl	8012854 <prvIsQueueEmpty>
 8012626:	4603      	mov	r3, r0
 8012628:	2b00      	cmp	r3, #0
 801262a:	d017      	beq.n	801265c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262e:	3324      	adds	r3, #36	; 0x24
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	4611      	mov	r1, r2
 8012634:	4618      	mov	r0, r3
 8012636:	f000 fe5b 	bl	80132f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801263a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801263c:	f000 f8b8 	bl	80127b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012640:	f000 fc74 	bl	8012f2c <xTaskResumeAll>
 8012644:	4603      	mov	r3, r0
 8012646:	2b00      	cmp	r3, #0
 8012648:	d189      	bne.n	801255e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801264a:	4b10      	ldr	r3, [pc, #64]	; (801268c <xQueueReceive+0x1bc>)
 801264c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012650:	601a      	str	r2, [r3, #0]
 8012652:	f3bf 8f4f 	dsb	sy
 8012656:	f3bf 8f6f 	isb	sy
 801265a:	e780      	b.n	801255e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801265c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801265e:	f000 f8a7 	bl	80127b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012662:	f000 fc63 	bl	8012f2c <xTaskResumeAll>
 8012666:	e77a      	b.n	801255e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801266a:	f000 f8a1 	bl	80127b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801266e:	f000 fc5d 	bl	8012f2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012674:	f000 f8ee 	bl	8012854 <prvIsQueueEmpty>
 8012678:	4603      	mov	r3, r0
 801267a:	2b00      	cmp	r3, #0
 801267c:	f43f af6f 	beq.w	801255e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012680:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012682:	4618      	mov	r0, r3
 8012684:	3730      	adds	r7, #48	; 0x30
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	e000ed04 	.word	0xe000ed04

08012690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b086      	sub	sp, #24
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801269c:	2300      	movs	r3, #0
 801269e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d10d      	bne.n	80126ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d14d      	bne.n	8012752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	689b      	ldr	r3, [r3, #8]
 80126ba:	4618      	mov	r0, r3
 80126bc:	f001 f8e4 	bl	8013888 <xTaskPriorityDisinherit>
 80126c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2200      	movs	r2, #0
 80126c6:	609a      	str	r2, [r3, #8]
 80126c8:	e043      	b.n	8012752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d119      	bne.n	8012704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	6858      	ldr	r0, [r3, #4]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d8:	461a      	mov	r2, r3
 80126da:	68b9      	ldr	r1, [r7, #8]
 80126dc:	f002 ffd6 	bl	801568c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	685a      	ldr	r2, [r3, #4]
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126e8:	441a      	add	r2, r3
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	689b      	ldr	r3, [r3, #8]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d32b      	bcc.n	8012752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	605a      	str	r2, [r3, #4]
 8012702:	e026      	b.n	8012752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	68d8      	ldr	r0, [r3, #12]
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801270c:	461a      	mov	r2, r3
 801270e:	68b9      	ldr	r1, [r7, #8]
 8012710:	f002 ffbc 	bl	801568c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	68da      	ldr	r2, [r3, #12]
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801271c:	425b      	negs	r3, r3
 801271e:	441a      	add	r2, r3
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	68da      	ldr	r2, [r3, #12]
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	429a      	cmp	r2, r3
 801272e:	d207      	bcs.n	8012740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	689a      	ldr	r2, [r3, #8]
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012738:	425b      	negs	r3, r3
 801273a:	441a      	add	r2, r3
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2b02      	cmp	r3, #2
 8012744:	d105      	bne.n	8012752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d002      	beq.n	8012752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	3b01      	subs	r3, #1
 8012750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	1c5a      	adds	r2, r3, #1
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801275a:	697b      	ldr	r3, [r7, #20]
}
 801275c:	4618      	mov	r0, r3
 801275e:	3718      	adds	r7, #24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b082      	sub	sp, #8
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012772:	2b00      	cmp	r3, #0
 8012774:	d018      	beq.n	80127a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	68da      	ldr	r2, [r3, #12]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801277e:	441a      	add	r2, r3
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	68da      	ldr	r2, [r3, #12]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	689b      	ldr	r3, [r3, #8]
 801278c:	429a      	cmp	r2, r3
 801278e:	d303      	bcc.n	8012798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	68d9      	ldr	r1, [r3, #12]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127a0:	461a      	mov	r2, r3
 80127a2:	6838      	ldr	r0, [r7, #0]
 80127a4:	f002 ff72 	bl	801568c <memcpy>
	}
}
 80127a8:	bf00      	nop
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b084      	sub	sp, #16
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80127b8:	f001 fee4 	bl	8014584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127c4:	e011      	b.n	80127ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d012      	beq.n	80127f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	3324      	adds	r3, #36	; 0x24
 80127d2:	4618      	mov	r0, r3
 80127d4:	f000 fe18 	bl	8013408 <xTaskRemoveFromEventList>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d001      	beq.n	80127e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80127de:	f000 ff4f 	bl	8013680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80127e2:	7bfb      	ldrb	r3, [r7, #15]
 80127e4:	3b01      	subs	r3, #1
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	dce9      	bgt.n	80127c6 <prvUnlockQueue+0x16>
 80127f2:	e000      	b.n	80127f6 <prvUnlockQueue+0x46>
					break;
 80127f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	22ff      	movs	r2, #255	; 0xff
 80127fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80127fe:	f001 fef1 	bl	80145e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012802:	f001 febf 	bl	8014584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801280c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801280e:	e011      	b.n	8012834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d012      	beq.n	801283e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	3310      	adds	r3, #16
 801281c:	4618      	mov	r0, r3
 801281e:	f000 fdf3 	bl	8013408 <xTaskRemoveFromEventList>
 8012822:	4603      	mov	r3, r0
 8012824:	2b00      	cmp	r3, #0
 8012826:	d001      	beq.n	801282c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012828:	f000 ff2a 	bl	8013680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801282c:	7bbb      	ldrb	r3, [r7, #14]
 801282e:	3b01      	subs	r3, #1
 8012830:	b2db      	uxtb	r3, r3
 8012832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012838:	2b00      	cmp	r3, #0
 801283a:	dce9      	bgt.n	8012810 <prvUnlockQueue+0x60>
 801283c:	e000      	b.n	8012840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801283e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	22ff      	movs	r2, #255	; 0xff
 8012844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012848:	f001 fecc 	bl	80145e4 <vPortExitCritical>
}
 801284c:	bf00      	nop
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801285c:	f001 fe92 	bl	8014584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012864:	2b00      	cmp	r3, #0
 8012866:	d102      	bne.n	801286e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012868:	2301      	movs	r3, #1
 801286a:	60fb      	str	r3, [r7, #12]
 801286c:	e001      	b.n	8012872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801286e:	2300      	movs	r3, #0
 8012870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012872:	f001 feb7 	bl	80145e4 <vPortExitCritical>

	return xReturn;
 8012876:	68fb      	ldr	r3, [r7, #12]
}
 8012878:	4618      	mov	r0, r3
 801287a:	3710      	adds	r7, #16
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012888:	f001 fe7c 	bl	8014584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012894:	429a      	cmp	r2, r3
 8012896:	d102      	bne.n	801289e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012898:	2301      	movs	r3, #1
 801289a:	60fb      	str	r3, [r7, #12]
 801289c:	e001      	b.n	80128a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801289e:	2300      	movs	r3, #0
 80128a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80128a2:	f001 fe9f 	bl	80145e4 <vPortExitCritical>

	return xReturn;
 80128a6:	68fb      	ldr	r3, [r7, #12]
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3710      	adds	r7, #16
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80128b0:	b480      	push	{r7}
 80128b2:	b085      	sub	sp, #20
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128ba:	2300      	movs	r3, #0
 80128bc:	60fb      	str	r3, [r7, #12]
 80128be:	e014      	b.n	80128ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80128c0:	4a0f      	ldr	r2, [pc, #60]	; (8012900 <vQueueAddToRegistry+0x50>)
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d10b      	bne.n	80128e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80128cc:	490c      	ldr	r1, [pc, #48]	; (8012900 <vQueueAddToRegistry+0x50>)
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	683a      	ldr	r2, [r7, #0]
 80128d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80128d6:	4a0a      	ldr	r2, [pc, #40]	; (8012900 <vQueueAddToRegistry+0x50>)
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	00db      	lsls	r3, r3, #3
 80128dc:	4413      	add	r3, r2
 80128de:	687a      	ldr	r2, [r7, #4]
 80128e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80128e2:	e006      	b.n	80128f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	3301      	adds	r3, #1
 80128e8:	60fb      	str	r3, [r7, #12]
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2b07      	cmp	r3, #7
 80128ee:	d9e7      	bls.n	80128c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80128f0:	bf00      	nop
 80128f2:	bf00      	nop
 80128f4:	3714      	adds	r7, #20
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop
 8012900:	20002104 	.word	0x20002104

08012904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012904:	b580      	push	{r7, lr}
 8012906:	b086      	sub	sp, #24
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	60b9      	str	r1, [r7, #8]
 801290e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012914:	f001 fe36 	bl	8014584 <vPortEnterCritical>
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801291e:	b25b      	sxtb	r3, r3
 8012920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012924:	d103      	bne.n	801292e <vQueueWaitForMessageRestricted+0x2a>
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	2200      	movs	r2, #0
 801292a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012934:	b25b      	sxtb	r3, r3
 8012936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801293a:	d103      	bne.n	8012944 <vQueueWaitForMessageRestricted+0x40>
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	2200      	movs	r2, #0
 8012940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012944:	f001 fe4e 	bl	80145e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801294c:	2b00      	cmp	r3, #0
 801294e:	d106      	bne.n	801295e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	3324      	adds	r3, #36	; 0x24
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	68b9      	ldr	r1, [r7, #8]
 8012958:	4618      	mov	r0, r3
 801295a:	f000 fd29 	bl	80133b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801295e:	6978      	ldr	r0, [r7, #20]
 8012960:	f7ff ff26 	bl	80127b0 <prvUnlockQueue>
	}
 8012964:	bf00      	nop
 8012966:	3718      	adds	r7, #24
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}

0801296c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801296c:	b580      	push	{r7, lr}
 801296e:	b08e      	sub	sp, #56	; 0x38
 8012970:	af04      	add	r7, sp, #16
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	607a      	str	r2, [r7, #4]
 8012978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801297c:	2b00      	cmp	r3, #0
 801297e:	d10a      	bne.n	8012996 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012984:	f383 8811 	msr	BASEPRI, r3
 8012988:	f3bf 8f6f 	isb	sy
 801298c:	f3bf 8f4f 	dsb	sy
 8012990:	623b      	str	r3, [r7, #32]
}
 8012992:	bf00      	nop
 8012994:	e7fe      	b.n	8012994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012998:	2b00      	cmp	r3, #0
 801299a:	d10a      	bne.n	80129b2 <xTaskCreateStatic+0x46>
	__asm volatile
 801299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a0:	f383 8811 	msr	BASEPRI, r3
 80129a4:	f3bf 8f6f 	isb	sy
 80129a8:	f3bf 8f4f 	dsb	sy
 80129ac:	61fb      	str	r3, [r7, #28]
}
 80129ae:	bf00      	nop
 80129b0:	e7fe      	b.n	80129b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80129b2:	23a4      	movs	r3, #164	; 0xa4
 80129b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	2ba4      	cmp	r3, #164	; 0xa4
 80129ba:	d00a      	beq.n	80129d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80129bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c0:	f383 8811 	msr	BASEPRI, r3
 80129c4:	f3bf 8f6f 	isb	sy
 80129c8:	f3bf 8f4f 	dsb	sy
 80129cc:	61bb      	str	r3, [r7, #24]
}
 80129ce:	bf00      	nop
 80129d0:	e7fe      	b.n	80129d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80129d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80129d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d01e      	beq.n	8012a18 <xTaskCreateStatic+0xac>
 80129da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d01b      	beq.n	8012a18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80129e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	2202      	movs	r2, #2
 80129ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80129f2:	2300      	movs	r3, #0
 80129f4:	9303      	str	r3, [sp, #12]
 80129f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f8:	9302      	str	r3, [sp, #8]
 80129fa:	f107 0314 	add.w	r3, r7, #20
 80129fe:	9301      	str	r3, [sp, #4]
 8012a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a02:	9300      	str	r3, [sp, #0]
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	687a      	ldr	r2, [r7, #4]
 8012a08:	68b9      	ldr	r1, [r7, #8]
 8012a0a:	68f8      	ldr	r0, [r7, #12]
 8012a0c:	f000 f850 	bl	8012ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a12:	f000 f8ef 	bl	8012bf4 <prvAddNewTaskToReadyList>
 8012a16:	e001      	b.n	8012a1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012a1c:	697b      	ldr	r3, [r7, #20]
	}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3728      	adds	r7, #40	; 0x28
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b08c      	sub	sp, #48	; 0x30
 8012a2a:	af04      	add	r7, sp, #16
 8012a2c:	60f8      	str	r0, [r7, #12]
 8012a2e:	60b9      	str	r1, [r7, #8]
 8012a30:	603b      	str	r3, [r7, #0]
 8012a32:	4613      	mov	r3, r2
 8012a34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012a36:	88fb      	ldrh	r3, [r7, #6]
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f001 fec4 	bl	80147c8 <pvPortMalloc>
 8012a40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d00e      	beq.n	8012a66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012a48:	20a4      	movs	r0, #164	; 0xa4
 8012a4a:	f001 febd 	bl	80147c8 <pvPortMalloc>
 8012a4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d003      	beq.n	8012a5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012a56:	69fb      	ldr	r3, [r7, #28]
 8012a58:	697a      	ldr	r2, [r7, #20]
 8012a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8012a5c:	e005      	b.n	8012a6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012a5e:	6978      	ldr	r0, [r7, #20]
 8012a60:	f001 ff7e 	bl	8014960 <vPortFree>
 8012a64:	e001      	b.n	8012a6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012a66:	2300      	movs	r3, #0
 8012a68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012a6a:	69fb      	ldr	r3, [r7, #28]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d017      	beq.n	8012aa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	2200      	movs	r2, #0
 8012a74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012a78:	88fa      	ldrh	r2, [r7, #6]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	9303      	str	r3, [sp, #12]
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	9302      	str	r3, [sp, #8]
 8012a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a84:	9301      	str	r3, [sp, #4]
 8012a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a88:	9300      	str	r3, [sp, #0]
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	68b9      	ldr	r1, [r7, #8]
 8012a8e:	68f8      	ldr	r0, [r7, #12]
 8012a90:	f000 f80e 	bl	8012ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a94:	69f8      	ldr	r0, [r7, #28]
 8012a96:	f000 f8ad 	bl	8012bf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	61bb      	str	r3, [r7, #24]
 8012a9e:	e002      	b.n	8012aa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8012aa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012aa6:	69bb      	ldr	r3, [r7, #24]
	}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3720      	adds	r7, #32
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b088      	sub	sp, #32
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	60b9      	str	r1, [r7, #8]
 8012aba:	607a      	str	r2, [r7, #4]
 8012abc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012ac8:	3b01      	subs	r3, #1
 8012aca:	009b      	lsls	r3, r3, #2
 8012acc:	4413      	add	r3, r2
 8012ace:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	f023 0307 	bic.w	r3, r3, #7
 8012ad6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012ad8:	69bb      	ldr	r3, [r7, #24]
 8012ada:	f003 0307 	and.w	r3, r3, #7
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d00a      	beq.n	8012af8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8012ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae6:	f383 8811 	msr	BASEPRI, r3
 8012aea:	f3bf 8f6f 	isb	sy
 8012aee:	f3bf 8f4f 	dsb	sy
 8012af2:	617b      	str	r3, [r7, #20]
}
 8012af4:	bf00      	nop
 8012af6:	e7fe      	b.n	8012af6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d01f      	beq.n	8012b3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012afe:	2300      	movs	r3, #0
 8012b00:	61fb      	str	r3, [r7, #28]
 8012b02:	e012      	b.n	8012b2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012b04:	68ba      	ldr	r2, [r7, #8]
 8012b06:	69fb      	ldr	r3, [r7, #28]
 8012b08:	4413      	add	r3, r2
 8012b0a:	7819      	ldrb	r1, [r3, #0]
 8012b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b0e:	69fb      	ldr	r3, [r7, #28]
 8012b10:	4413      	add	r3, r2
 8012b12:	3334      	adds	r3, #52	; 0x34
 8012b14:	460a      	mov	r2, r1
 8012b16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012b18:	68ba      	ldr	r2, [r7, #8]
 8012b1a:	69fb      	ldr	r3, [r7, #28]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d006      	beq.n	8012b32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	3301      	adds	r3, #1
 8012b28:	61fb      	str	r3, [r7, #28]
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	2b0f      	cmp	r3, #15
 8012b2e:	d9e9      	bls.n	8012b04 <prvInitialiseNewTask+0x54>
 8012b30:	e000      	b.n	8012b34 <prvInitialiseNewTask+0x84>
			{
				break;
 8012b32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b36:	2200      	movs	r2, #0
 8012b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012b3c:	e003      	b.n	8012b46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b40:	2200      	movs	r2, #0
 8012b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b48:	2b06      	cmp	r3, #6
 8012b4a:	d901      	bls.n	8012b50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012b4c:	2306      	movs	r3, #6
 8012b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5e:	2200      	movs	r2, #0
 8012b60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b64:	3304      	adds	r3, #4
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7ff f94a 	bl	8011e00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6e:	3318      	adds	r3, #24
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7ff f945 	bl	8011e00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7e:	f1c3 0207 	rsb	r2, r3, #7
 8012b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8012b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8e:	2200      	movs	r2, #0
 8012b90:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b94:	2200      	movs	r2, #0
 8012b96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba4:	3350      	adds	r3, #80	; 0x50
 8012ba6:	224c      	movs	r2, #76	; 0x4c
 8012ba8:	2100      	movs	r1, #0
 8012baa:	4618      	mov	r0, r3
 8012bac:	f002 fcea 	bl	8015584 <memset>
 8012bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb2:	4a0d      	ldr	r2, [pc, #52]	; (8012be8 <prvInitialiseNewTask+0x138>)
 8012bb4:	655a      	str	r2, [r3, #84]	; 0x54
 8012bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb8:	4a0c      	ldr	r2, [pc, #48]	; (8012bec <prvInitialiseNewTask+0x13c>)
 8012bba:	659a      	str	r2, [r3, #88]	; 0x58
 8012bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bbe:	4a0c      	ldr	r2, [pc, #48]	; (8012bf0 <prvInitialiseNewTask+0x140>)
 8012bc0:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012bc2:	683a      	ldr	r2, [r7, #0]
 8012bc4:	68f9      	ldr	r1, [r7, #12]
 8012bc6:	69b8      	ldr	r0, [r7, #24]
 8012bc8:	f001 fbb0 	bl	801432c <pxPortInitialiseStack>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d002      	beq.n	8012bde <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012bde:	bf00      	nop
 8012be0:	3720      	adds	r7, #32
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
 8012be6:	bf00      	nop
 8012be8:	20007bcc 	.word	0x20007bcc
 8012bec:	20007c34 	.word	0x20007c34
 8012bf0:	20007c9c 	.word	0x20007c9c

08012bf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012bfc:	f001 fcc2 	bl	8014584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012c00:	4b2a      	ldr	r3, [pc, #168]	; (8012cac <prvAddNewTaskToReadyList+0xb8>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	3301      	adds	r3, #1
 8012c06:	4a29      	ldr	r2, [pc, #164]	; (8012cac <prvAddNewTaskToReadyList+0xb8>)
 8012c08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012c0a:	4b29      	ldr	r3, [pc, #164]	; (8012cb0 <prvAddNewTaskToReadyList+0xbc>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d109      	bne.n	8012c26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012c12:	4a27      	ldr	r2, [pc, #156]	; (8012cb0 <prvAddNewTaskToReadyList+0xbc>)
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012c18:	4b24      	ldr	r3, [pc, #144]	; (8012cac <prvAddNewTaskToReadyList+0xb8>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d110      	bne.n	8012c42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012c20:	f000 fd52 	bl	80136c8 <prvInitialiseTaskLists>
 8012c24:	e00d      	b.n	8012c42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012c26:	4b23      	ldr	r3, [pc, #140]	; (8012cb4 <prvAddNewTaskToReadyList+0xc0>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d109      	bne.n	8012c42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012c2e:	4b20      	ldr	r3, [pc, #128]	; (8012cb0 <prvAddNewTaskToReadyList+0xbc>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d802      	bhi.n	8012c42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012c3c:	4a1c      	ldr	r2, [pc, #112]	; (8012cb0 <prvAddNewTaskToReadyList+0xbc>)
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012c42:	4b1d      	ldr	r3, [pc, #116]	; (8012cb8 <prvAddNewTaskToReadyList+0xc4>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	3301      	adds	r3, #1
 8012c48:	4a1b      	ldr	r2, [pc, #108]	; (8012cb8 <prvAddNewTaskToReadyList+0xc4>)
 8012c4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c50:	2201      	movs	r2, #1
 8012c52:	409a      	lsls	r2, r3
 8012c54:	4b19      	ldr	r3, [pc, #100]	; (8012cbc <prvAddNewTaskToReadyList+0xc8>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4313      	orrs	r3, r2
 8012c5a:	4a18      	ldr	r2, [pc, #96]	; (8012cbc <prvAddNewTaskToReadyList+0xc8>)
 8012c5c:	6013      	str	r3, [r2, #0]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c62:	4613      	mov	r3, r2
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	4413      	add	r3, r2
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	4a15      	ldr	r2, [pc, #84]	; (8012cc0 <prvAddNewTaskToReadyList+0xcc>)
 8012c6c:	441a      	add	r2, r3
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	3304      	adds	r3, #4
 8012c72:	4619      	mov	r1, r3
 8012c74:	4610      	mov	r0, r2
 8012c76:	f7ff f8d0 	bl	8011e1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012c7a:	f001 fcb3 	bl	80145e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012c7e:	4b0d      	ldr	r3, [pc, #52]	; (8012cb4 <prvAddNewTaskToReadyList+0xc0>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d00e      	beq.n	8012ca4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012c86:	4b0a      	ldr	r3, [pc, #40]	; (8012cb0 <prvAddNewTaskToReadyList+0xbc>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d207      	bcs.n	8012ca4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012c94:	4b0b      	ldr	r3, [pc, #44]	; (8012cc4 <prvAddNewTaskToReadyList+0xd0>)
 8012c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c9a:	601a      	str	r2, [r3, #0]
 8012c9c:	f3bf 8f4f 	dsb	sy
 8012ca0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ca4:	bf00      	nop
 8012ca6:	3708      	adds	r7, #8
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	20002244 	.word	0x20002244
 8012cb0:	20002144 	.word	0x20002144
 8012cb4:	20002250 	.word	0x20002250
 8012cb8:	20002260 	.word	0x20002260
 8012cbc:	2000224c 	.word	0x2000224c
 8012cc0:	20002148 	.word	0x20002148
 8012cc4:	e000ed04 	.word	0xe000ed04

08012cc8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b08a      	sub	sp, #40	; 0x28
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d10a      	bne.n	8012cf2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8012cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce0:	f383 8811 	msr	BASEPRI, r3
 8012ce4:	f3bf 8f6f 	isb	sy
 8012ce8:	f3bf 8f4f 	dsb	sy
 8012cec:	617b      	str	r3, [r7, #20]
}
 8012cee:	bf00      	nop
 8012cf0:	e7fe      	b.n	8012cf0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d10a      	bne.n	8012d0e <vTaskDelayUntil+0x46>
	__asm volatile
 8012cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfc:	f383 8811 	msr	BASEPRI, r3
 8012d00:	f3bf 8f6f 	isb	sy
 8012d04:	f3bf 8f4f 	dsb	sy
 8012d08:	613b      	str	r3, [r7, #16]
}
 8012d0a:	bf00      	nop
 8012d0c:	e7fe      	b.n	8012d0c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8012d0e:	4b2a      	ldr	r3, [pc, #168]	; (8012db8 <vTaskDelayUntil+0xf0>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d00a      	beq.n	8012d2c <vTaskDelayUntil+0x64>
	__asm volatile
 8012d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d1a:	f383 8811 	msr	BASEPRI, r3
 8012d1e:	f3bf 8f6f 	isb	sy
 8012d22:	f3bf 8f4f 	dsb	sy
 8012d26:	60fb      	str	r3, [r7, #12]
}
 8012d28:	bf00      	nop
 8012d2a:	e7fe      	b.n	8012d2a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8012d2c:	f000 f8f0 	bl	8012f10 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8012d30:	4b22      	ldr	r3, [pc, #136]	; (8012dbc <vTaskDelayUntil+0xf4>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	683a      	ldr	r2, [r7, #0]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	6a3a      	ldr	r2, [r7, #32]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d20b      	bcs.n	8012d62 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	69fa      	ldr	r2, [r7, #28]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d211      	bcs.n	8012d78 <vTaskDelayUntil+0xb0>
 8012d54:	69fa      	ldr	r2, [r7, #28]
 8012d56:	6a3b      	ldr	r3, [r7, #32]
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	d90d      	bls.n	8012d78 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8012d60:	e00a      	b.n	8012d78 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	69fa      	ldr	r2, [r7, #28]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d303      	bcc.n	8012d74 <vTaskDelayUntil+0xac>
 8012d6c:	69fa      	ldr	r2, [r7, #28]
 8012d6e:	6a3b      	ldr	r3, [r7, #32]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d901      	bls.n	8012d78 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8012d74:	2301      	movs	r3, #1
 8012d76:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	69fa      	ldr	r2, [r7, #28]
 8012d7c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d006      	beq.n	8012d92 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012d84:	69fa      	ldr	r2, [r7, #28]
 8012d86:	6a3b      	ldr	r3, [r7, #32]
 8012d88:	1ad3      	subs	r3, r2, r3
 8012d8a:	2100      	movs	r1, #0
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f000 fef9 	bl	8013b84 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8012d92:	f000 f8cb 	bl	8012f2c <xTaskResumeAll>
 8012d96:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d107      	bne.n	8012dae <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8012d9e:	4b08      	ldr	r3, [pc, #32]	; (8012dc0 <vTaskDelayUntil+0xf8>)
 8012da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012da4:	601a      	str	r2, [r3, #0]
 8012da6:	f3bf 8f4f 	dsb	sy
 8012daa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012dae:	bf00      	nop
 8012db0:	3728      	adds	r7, #40	; 0x28
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
 8012db6:	bf00      	nop
 8012db8:	2000226c 	.word	0x2000226c
 8012dbc:	20002248 	.word	0x20002248
 8012dc0:	e000ed04 	.word	0xe000ed04

08012dc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b084      	sub	sp, #16
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d017      	beq.n	8012e06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012dd6:	4b13      	ldr	r3, [pc, #76]	; (8012e24 <vTaskDelay+0x60>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d00a      	beq.n	8012df4 <vTaskDelay+0x30>
	__asm volatile
 8012dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de2:	f383 8811 	msr	BASEPRI, r3
 8012de6:	f3bf 8f6f 	isb	sy
 8012dea:	f3bf 8f4f 	dsb	sy
 8012dee:	60bb      	str	r3, [r7, #8]
}
 8012df0:	bf00      	nop
 8012df2:	e7fe      	b.n	8012df2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012df4:	f000 f88c 	bl	8012f10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012df8:	2100      	movs	r1, #0
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 fec2 	bl	8013b84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012e00:	f000 f894 	bl	8012f2c <xTaskResumeAll>
 8012e04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d107      	bne.n	8012e1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012e0c:	4b06      	ldr	r3, [pc, #24]	; (8012e28 <vTaskDelay+0x64>)
 8012e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e12:	601a      	str	r2, [r3, #0]
 8012e14:	f3bf 8f4f 	dsb	sy
 8012e18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012e1c:	bf00      	nop
 8012e1e:	3710      	adds	r7, #16
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}
 8012e24:	2000226c 	.word	0x2000226c
 8012e28:	e000ed04 	.word	0xe000ed04

08012e2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b08a      	sub	sp, #40	; 0x28
 8012e30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012e32:	2300      	movs	r3, #0
 8012e34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012e36:	2300      	movs	r3, #0
 8012e38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012e3a:	463a      	mov	r2, r7
 8012e3c:	1d39      	adds	r1, r7, #4
 8012e3e:	f107 0308 	add.w	r3, r7, #8
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7ef f8d6 	bl	8001ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012e48:	6839      	ldr	r1, [r7, #0]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	68ba      	ldr	r2, [r7, #8]
 8012e4e:	9202      	str	r2, [sp, #8]
 8012e50:	9301      	str	r3, [sp, #4]
 8012e52:	2300      	movs	r3, #0
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	2300      	movs	r3, #0
 8012e58:	460a      	mov	r2, r1
 8012e5a:	4925      	ldr	r1, [pc, #148]	; (8012ef0 <vTaskStartScheduler+0xc4>)
 8012e5c:	4825      	ldr	r0, [pc, #148]	; (8012ef4 <vTaskStartScheduler+0xc8>)
 8012e5e:	f7ff fd85 	bl	801296c <xTaskCreateStatic>
 8012e62:	4603      	mov	r3, r0
 8012e64:	4a24      	ldr	r2, [pc, #144]	; (8012ef8 <vTaskStartScheduler+0xcc>)
 8012e66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012e68:	4b23      	ldr	r3, [pc, #140]	; (8012ef8 <vTaskStartScheduler+0xcc>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d002      	beq.n	8012e76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012e70:	2301      	movs	r3, #1
 8012e72:	617b      	str	r3, [r7, #20]
 8012e74:	e001      	b.n	8012e7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012e76:	2300      	movs	r3, #0
 8012e78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d102      	bne.n	8012e86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012e80:	f000 fee6 	bl	8013c50 <xTimerCreateTimerTask>
 8012e84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d11d      	bne.n	8012ec8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8012e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e90:	f383 8811 	msr	BASEPRI, r3
 8012e94:	f3bf 8f6f 	isb	sy
 8012e98:	f3bf 8f4f 	dsb	sy
 8012e9c:	613b      	str	r3, [r7, #16]
}
 8012e9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012ea0:	4b16      	ldr	r3, [pc, #88]	; (8012efc <vTaskStartScheduler+0xd0>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	3350      	adds	r3, #80	; 0x50
 8012ea6:	4a16      	ldr	r2, [pc, #88]	; (8012f00 <vTaskStartScheduler+0xd4>)
 8012ea8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012eaa:	4b16      	ldr	r3, [pc, #88]	; (8012f04 <vTaskStartScheduler+0xd8>)
 8012eac:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012eb2:	4b15      	ldr	r3, [pc, #84]	; (8012f08 <vTaskStartScheduler+0xdc>)
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012eb8:	4b14      	ldr	r3, [pc, #80]	; (8012f0c <vTaskStartScheduler+0xe0>)
 8012eba:	2200      	movs	r2, #0
 8012ebc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8012ebe:	f7ef f889 	bl	8001fd4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012ec2:	f001 fabd 	bl	8014440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012ec6:	e00e      	b.n	8012ee6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ece:	d10a      	bne.n	8012ee6 <vTaskStartScheduler+0xba>
	__asm volatile
 8012ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed4:	f383 8811 	msr	BASEPRI, r3
 8012ed8:	f3bf 8f6f 	isb	sy
 8012edc:	f3bf 8f4f 	dsb	sy
 8012ee0:	60fb      	str	r3, [r7, #12]
}
 8012ee2:	bf00      	nop
 8012ee4:	e7fe      	b.n	8012ee4 <vTaskStartScheduler+0xb8>
}
 8012ee6:	bf00      	nop
 8012ee8:	3718      	adds	r7, #24
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
 8012eee:	bf00      	nop
 8012ef0:	0801741c 	.word	0x0801741c
 8012ef4:	08013699 	.word	0x08013699
 8012ef8:	20002268 	.word	0x20002268
 8012efc:	20002144 	.word	0x20002144
 8012f00:	2000017c 	.word	0x2000017c
 8012f04:	20002264 	.word	0x20002264
 8012f08:	20002250 	.word	0x20002250
 8012f0c:	20002248 	.word	0x20002248

08012f10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012f10:	b480      	push	{r7}
 8012f12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012f14:	4b04      	ldr	r3, [pc, #16]	; (8012f28 <vTaskSuspendAll+0x18>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	3301      	adds	r3, #1
 8012f1a:	4a03      	ldr	r2, [pc, #12]	; (8012f28 <vTaskSuspendAll+0x18>)
 8012f1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012f1e:	bf00      	nop
 8012f20:	46bd      	mov	sp, r7
 8012f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f26:	4770      	bx	lr
 8012f28:	2000226c 	.word	0x2000226c

08012f2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b084      	sub	sp, #16
 8012f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012f36:	2300      	movs	r3, #0
 8012f38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012f3a:	4b41      	ldr	r3, [pc, #260]	; (8013040 <xTaskResumeAll+0x114>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d10a      	bne.n	8012f58 <xTaskResumeAll+0x2c>
	__asm volatile
 8012f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f46:	f383 8811 	msr	BASEPRI, r3
 8012f4a:	f3bf 8f6f 	isb	sy
 8012f4e:	f3bf 8f4f 	dsb	sy
 8012f52:	603b      	str	r3, [r7, #0]
}
 8012f54:	bf00      	nop
 8012f56:	e7fe      	b.n	8012f56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012f58:	f001 fb14 	bl	8014584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012f5c:	4b38      	ldr	r3, [pc, #224]	; (8013040 <xTaskResumeAll+0x114>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	3b01      	subs	r3, #1
 8012f62:	4a37      	ldr	r2, [pc, #220]	; (8013040 <xTaskResumeAll+0x114>)
 8012f64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f66:	4b36      	ldr	r3, [pc, #216]	; (8013040 <xTaskResumeAll+0x114>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d161      	bne.n	8013032 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012f6e:	4b35      	ldr	r3, [pc, #212]	; (8013044 <xTaskResumeAll+0x118>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d05d      	beq.n	8013032 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012f76:	e02e      	b.n	8012fd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f78:	4b33      	ldr	r3, [pc, #204]	; (8013048 <xTaskResumeAll+0x11c>)
 8012f7a:	68db      	ldr	r3, [r3, #12]
 8012f7c:	68db      	ldr	r3, [r3, #12]
 8012f7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	3318      	adds	r3, #24
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7fe ffa5 	bl	8011ed4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	3304      	adds	r3, #4
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe ffa0 	bl	8011ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f98:	2201      	movs	r2, #1
 8012f9a:	409a      	lsls	r2, r3
 8012f9c:	4b2b      	ldr	r3, [pc, #172]	; (801304c <xTaskResumeAll+0x120>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4313      	orrs	r3, r2
 8012fa2:	4a2a      	ldr	r2, [pc, #168]	; (801304c <xTaskResumeAll+0x120>)
 8012fa4:	6013      	str	r3, [r2, #0]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012faa:	4613      	mov	r3, r2
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	4413      	add	r3, r2
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	4a27      	ldr	r2, [pc, #156]	; (8013050 <xTaskResumeAll+0x124>)
 8012fb4:	441a      	add	r2, r3
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	3304      	adds	r3, #4
 8012fba:	4619      	mov	r1, r3
 8012fbc:	4610      	mov	r0, r2
 8012fbe:	f7fe ff2c 	bl	8011e1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fc6:	4b23      	ldr	r3, [pc, #140]	; (8013054 <xTaskResumeAll+0x128>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d302      	bcc.n	8012fd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012fd0:	4b21      	ldr	r3, [pc, #132]	; (8013058 <xTaskResumeAll+0x12c>)
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012fd6:	4b1c      	ldr	r3, [pc, #112]	; (8013048 <xTaskResumeAll+0x11c>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d1cc      	bne.n	8012f78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d001      	beq.n	8012fe8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012fe4:	f000 fc12 	bl	801380c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012fe8:	4b1c      	ldr	r3, [pc, #112]	; (801305c <xTaskResumeAll+0x130>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d010      	beq.n	8013016 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012ff4:	f000 f846 	bl	8013084 <xTaskIncrementTick>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d002      	beq.n	8013004 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012ffe:	4b16      	ldr	r3, [pc, #88]	; (8013058 <xTaskResumeAll+0x12c>)
 8013000:	2201      	movs	r2, #1
 8013002:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	3b01      	subs	r3, #1
 8013008:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d1f1      	bne.n	8012ff4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8013010:	4b12      	ldr	r3, [pc, #72]	; (801305c <xTaskResumeAll+0x130>)
 8013012:	2200      	movs	r2, #0
 8013014:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013016:	4b10      	ldr	r3, [pc, #64]	; (8013058 <xTaskResumeAll+0x12c>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d009      	beq.n	8013032 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801301e:	2301      	movs	r3, #1
 8013020:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013022:	4b0f      	ldr	r3, [pc, #60]	; (8013060 <xTaskResumeAll+0x134>)
 8013024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013028:	601a      	str	r2, [r3, #0]
 801302a:	f3bf 8f4f 	dsb	sy
 801302e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013032:	f001 fad7 	bl	80145e4 <vPortExitCritical>

	return xAlreadyYielded;
 8013036:	68bb      	ldr	r3, [r7, #8]
}
 8013038:	4618      	mov	r0, r3
 801303a:	3710      	adds	r7, #16
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	2000226c 	.word	0x2000226c
 8013044:	20002244 	.word	0x20002244
 8013048:	20002204 	.word	0x20002204
 801304c:	2000224c 	.word	0x2000224c
 8013050:	20002148 	.word	0x20002148
 8013054:	20002144 	.word	0x20002144
 8013058:	20002258 	.word	0x20002258
 801305c:	20002254 	.word	0x20002254
 8013060:	e000ed04 	.word	0xe000ed04

08013064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013064:	b480      	push	{r7}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801306a:	4b05      	ldr	r3, [pc, #20]	; (8013080 <xTaskGetTickCount+0x1c>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013070:	687b      	ldr	r3, [r7, #4]
}
 8013072:	4618      	mov	r0, r3
 8013074:	370c      	adds	r7, #12
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop
 8013080:	20002248 	.word	0x20002248

08013084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b086      	sub	sp, #24
 8013088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801308a:	2300      	movs	r3, #0
 801308c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801308e:	4b4e      	ldr	r3, [pc, #312]	; (80131c8 <xTaskIncrementTick+0x144>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	f040 808e 	bne.w	80131b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013098:	4b4c      	ldr	r3, [pc, #304]	; (80131cc <xTaskIncrementTick+0x148>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	3301      	adds	r3, #1
 801309e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80130a0:	4a4a      	ldr	r2, [pc, #296]	; (80131cc <xTaskIncrementTick+0x148>)
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d120      	bne.n	80130ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80130ac:	4b48      	ldr	r3, [pc, #288]	; (80131d0 <xTaskIncrementTick+0x14c>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d00a      	beq.n	80130cc <xTaskIncrementTick+0x48>
	__asm volatile
 80130b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ba:	f383 8811 	msr	BASEPRI, r3
 80130be:	f3bf 8f6f 	isb	sy
 80130c2:	f3bf 8f4f 	dsb	sy
 80130c6:	603b      	str	r3, [r7, #0]
}
 80130c8:	bf00      	nop
 80130ca:	e7fe      	b.n	80130ca <xTaskIncrementTick+0x46>
 80130cc:	4b40      	ldr	r3, [pc, #256]	; (80131d0 <xTaskIncrementTick+0x14c>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	60fb      	str	r3, [r7, #12]
 80130d2:	4b40      	ldr	r3, [pc, #256]	; (80131d4 <xTaskIncrementTick+0x150>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	4a3e      	ldr	r2, [pc, #248]	; (80131d0 <xTaskIncrementTick+0x14c>)
 80130d8:	6013      	str	r3, [r2, #0]
 80130da:	4a3e      	ldr	r2, [pc, #248]	; (80131d4 <xTaskIncrementTick+0x150>)
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	6013      	str	r3, [r2, #0]
 80130e0:	4b3d      	ldr	r3, [pc, #244]	; (80131d8 <xTaskIncrementTick+0x154>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	3301      	adds	r3, #1
 80130e6:	4a3c      	ldr	r2, [pc, #240]	; (80131d8 <xTaskIncrementTick+0x154>)
 80130e8:	6013      	str	r3, [r2, #0]
 80130ea:	f000 fb8f 	bl	801380c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80130ee:	4b3b      	ldr	r3, [pc, #236]	; (80131dc <xTaskIncrementTick+0x158>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	693a      	ldr	r2, [r7, #16]
 80130f4:	429a      	cmp	r2, r3
 80130f6:	d348      	bcc.n	801318a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130f8:	4b35      	ldr	r3, [pc, #212]	; (80131d0 <xTaskIncrementTick+0x14c>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d104      	bne.n	801310c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013102:	4b36      	ldr	r3, [pc, #216]	; (80131dc <xTaskIncrementTick+0x158>)
 8013104:	f04f 32ff 	mov.w	r2, #4294967295
 8013108:	601a      	str	r2, [r3, #0]
					break;
 801310a:	e03e      	b.n	801318a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801310c:	4b30      	ldr	r3, [pc, #192]	; (80131d0 <xTaskIncrementTick+0x14c>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	68db      	ldr	r3, [r3, #12]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801311c:	693a      	ldr	r2, [r7, #16]
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	429a      	cmp	r2, r3
 8013122:	d203      	bcs.n	801312c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013124:	4a2d      	ldr	r2, [pc, #180]	; (80131dc <xTaskIncrementTick+0x158>)
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801312a:	e02e      	b.n	801318a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	3304      	adds	r3, #4
 8013130:	4618      	mov	r0, r3
 8013132:	f7fe fecf 	bl	8011ed4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801313a:	2b00      	cmp	r3, #0
 801313c:	d004      	beq.n	8013148 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	3318      	adds	r3, #24
 8013142:	4618      	mov	r0, r3
 8013144:	f7fe fec6 	bl	8011ed4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801314c:	2201      	movs	r2, #1
 801314e:	409a      	lsls	r2, r3
 8013150:	4b23      	ldr	r3, [pc, #140]	; (80131e0 <xTaskIncrementTick+0x15c>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	4313      	orrs	r3, r2
 8013156:	4a22      	ldr	r2, [pc, #136]	; (80131e0 <xTaskIncrementTick+0x15c>)
 8013158:	6013      	str	r3, [r2, #0]
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801315e:	4613      	mov	r3, r2
 8013160:	009b      	lsls	r3, r3, #2
 8013162:	4413      	add	r3, r2
 8013164:	009b      	lsls	r3, r3, #2
 8013166:	4a1f      	ldr	r2, [pc, #124]	; (80131e4 <xTaskIncrementTick+0x160>)
 8013168:	441a      	add	r2, r3
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	3304      	adds	r3, #4
 801316e:	4619      	mov	r1, r3
 8013170:	4610      	mov	r0, r2
 8013172:	f7fe fe52 	bl	8011e1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801317a:	4b1b      	ldr	r3, [pc, #108]	; (80131e8 <xTaskIncrementTick+0x164>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013180:	429a      	cmp	r2, r3
 8013182:	d3b9      	bcc.n	80130f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013184:	2301      	movs	r3, #1
 8013186:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013188:	e7b6      	b.n	80130f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801318a:	4b17      	ldr	r3, [pc, #92]	; (80131e8 <xTaskIncrementTick+0x164>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013190:	4914      	ldr	r1, [pc, #80]	; (80131e4 <xTaskIncrementTick+0x160>)
 8013192:	4613      	mov	r3, r2
 8013194:	009b      	lsls	r3, r3, #2
 8013196:	4413      	add	r3, r2
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	440b      	add	r3, r1
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b01      	cmp	r3, #1
 80131a0:	d901      	bls.n	80131a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80131a2:	2301      	movs	r3, #1
 80131a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80131a6:	4b11      	ldr	r3, [pc, #68]	; (80131ec <xTaskIncrementTick+0x168>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d007      	beq.n	80131be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80131ae:	2301      	movs	r3, #1
 80131b0:	617b      	str	r3, [r7, #20]
 80131b2:	e004      	b.n	80131be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80131b4:	4b0e      	ldr	r3, [pc, #56]	; (80131f0 <xTaskIncrementTick+0x16c>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	3301      	adds	r3, #1
 80131ba:	4a0d      	ldr	r2, [pc, #52]	; (80131f0 <xTaskIncrementTick+0x16c>)
 80131bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80131be:	697b      	ldr	r3, [r7, #20]
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3718      	adds	r7, #24
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	2000226c 	.word	0x2000226c
 80131cc:	20002248 	.word	0x20002248
 80131d0:	200021fc 	.word	0x200021fc
 80131d4:	20002200 	.word	0x20002200
 80131d8:	2000225c 	.word	0x2000225c
 80131dc:	20002264 	.word	0x20002264
 80131e0:	2000224c 	.word	0x2000224c
 80131e4:	20002148 	.word	0x20002148
 80131e8:	20002144 	.word	0x20002144
 80131ec:	20002258 	.word	0x20002258
 80131f0:	20002254 	.word	0x20002254

080131f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b086      	sub	sp, #24
 80131f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80131fa:	4b35      	ldr	r3, [pc, #212]	; (80132d0 <vTaskSwitchContext+0xdc>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d003      	beq.n	801320a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013202:	4b34      	ldr	r3, [pc, #208]	; (80132d4 <vTaskSwitchContext+0xe0>)
 8013204:	2201      	movs	r2, #1
 8013206:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013208:	e05d      	b.n	80132c6 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 801320a:	4b32      	ldr	r3, [pc, #200]	; (80132d4 <vTaskSwitchContext+0xe0>)
 801320c:	2200      	movs	r2, #0
 801320e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013210:	f7ee fee7 	bl	8001fe2 <getRunTimeCounterValue>
 8013214:	4603      	mov	r3, r0
 8013216:	4a30      	ldr	r2, [pc, #192]	; (80132d8 <vTaskSwitchContext+0xe4>)
 8013218:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801321a:	4b2f      	ldr	r3, [pc, #188]	; (80132d8 <vTaskSwitchContext+0xe4>)
 801321c:	681a      	ldr	r2, [r3, #0]
 801321e:	4b2f      	ldr	r3, [pc, #188]	; (80132dc <vTaskSwitchContext+0xe8>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	429a      	cmp	r2, r3
 8013224:	d909      	bls.n	801323a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8013226:	4b2e      	ldr	r3, [pc, #184]	; (80132e0 <vTaskSwitchContext+0xec>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801322c:	4a2a      	ldr	r2, [pc, #168]	; (80132d8 <vTaskSwitchContext+0xe4>)
 801322e:	6810      	ldr	r0, [r2, #0]
 8013230:	4a2a      	ldr	r2, [pc, #168]	; (80132dc <vTaskSwitchContext+0xe8>)
 8013232:	6812      	ldr	r2, [r2, #0]
 8013234:	1a82      	subs	r2, r0, r2
 8013236:	440a      	add	r2, r1
 8013238:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 801323a:	4b27      	ldr	r3, [pc, #156]	; (80132d8 <vTaskSwitchContext+0xe4>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	4a27      	ldr	r2, [pc, #156]	; (80132dc <vTaskSwitchContext+0xe8>)
 8013240:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013242:	4b28      	ldr	r3, [pc, #160]	; (80132e4 <vTaskSwitchContext+0xf0>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	fab3 f383 	clz	r3, r3
 801324e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013250:	7afb      	ldrb	r3, [r7, #11]
 8013252:	f1c3 031f 	rsb	r3, r3, #31
 8013256:	617b      	str	r3, [r7, #20]
 8013258:	4923      	ldr	r1, [pc, #140]	; (80132e8 <vTaskSwitchContext+0xf4>)
 801325a:	697a      	ldr	r2, [r7, #20]
 801325c:	4613      	mov	r3, r2
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	4413      	add	r3, r2
 8013262:	009b      	lsls	r3, r3, #2
 8013264:	440b      	add	r3, r1
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d10a      	bne.n	8013282 <vTaskSwitchContext+0x8e>
	__asm volatile
 801326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013270:	f383 8811 	msr	BASEPRI, r3
 8013274:	f3bf 8f6f 	isb	sy
 8013278:	f3bf 8f4f 	dsb	sy
 801327c:	607b      	str	r3, [r7, #4]
}
 801327e:	bf00      	nop
 8013280:	e7fe      	b.n	8013280 <vTaskSwitchContext+0x8c>
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	4613      	mov	r3, r2
 8013286:	009b      	lsls	r3, r3, #2
 8013288:	4413      	add	r3, r2
 801328a:	009b      	lsls	r3, r3, #2
 801328c:	4a16      	ldr	r2, [pc, #88]	; (80132e8 <vTaskSwitchContext+0xf4>)
 801328e:	4413      	add	r3, r2
 8013290:	613b      	str	r3, [r7, #16]
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	685a      	ldr	r2, [r3, #4]
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	605a      	str	r2, [r3, #4]
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	685a      	ldr	r2, [r3, #4]
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	3308      	adds	r3, #8
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d104      	bne.n	80132b2 <vTaskSwitchContext+0xbe>
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	685b      	ldr	r3, [r3, #4]
 80132ac:	685a      	ldr	r2, [r3, #4]
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	605a      	str	r2, [r3, #4]
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	4a09      	ldr	r2, [pc, #36]	; (80132e0 <vTaskSwitchContext+0xec>)
 80132ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80132bc:	4b08      	ldr	r3, [pc, #32]	; (80132e0 <vTaskSwitchContext+0xec>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	3350      	adds	r3, #80	; 0x50
 80132c2:	4a0a      	ldr	r2, [pc, #40]	; (80132ec <vTaskSwitchContext+0xf8>)
 80132c4:	6013      	str	r3, [r2, #0]
}
 80132c6:	bf00      	nop
 80132c8:	3718      	adds	r7, #24
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	bf00      	nop
 80132d0:	2000226c 	.word	0x2000226c
 80132d4:	20002258 	.word	0x20002258
 80132d8:	20002274 	.word	0x20002274
 80132dc:	20002270 	.word	0x20002270
 80132e0:	20002144 	.word	0x20002144
 80132e4:	2000224c 	.word	0x2000224c
 80132e8:	20002148 	.word	0x20002148
 80132ec:	2000017c 	.word	0x2000017c

080132f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
 80132f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d10a      	bne.n	8013316 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013304:	f383 8811 	msr	BASEPRI, r3
 8013308:	f3bf 8f6f 	isb	sy
 801330c:	f3bf 8f4f 	dsb	sy
 8013310:	60fb      	str	r3, [r7, #12]
}
 8013312:	bf00      	nop
 8013314:	e7fe      	b.n	8013314 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013316:	4b07      	ldr	r3, [pc, #28]	; (8013334 <vTaskPlaceOnEventList+0x44>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	3318      	adds	r3, #24
 801331c:	4619      	mov	r1, r3
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f7fe fd9f 	bl	8011e62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013324:	2101      	movs	r1, #1
 8013326:	6838      	ldr	r0, [r7, #0]
 8013328:	f000 fc2c 	bl	8013b84 <prvAddCurrentTaskToDelayedList>
}
 801332c:	bf00      	nop
 801332e:	3710      	adds	r7, #16
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	20002144 	.word	0x20002144

08013338 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b086      	sub	sp, #24
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d10a      	bne.n	8013360 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334e:	f383 8811 	msr	BASEPRI, r3
 8013352:	f3bf 8f6f 	isb	sy
 8013356:	f3bf 8f4f 	dsb	sy
 801335a:	617b      	str	r3, [r7, #20]
}
 801335c:	bf00      	nop
 801335e:	e7fe      	b.n	801335e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8013360:	4b11      	ldr	r3, [pc, #68]	; (80133a8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d10a      	bne.n	801337e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8013368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801336c:	f383 8811 	msr	BASEPRI, r3
 8013370:	f3bf 8f6f 	isb	sy
 8013374:	f3bf 8f4f 	dsb	sy
 8013378:	613b      	str	r3, [r7, #16]
}
 801337a:	bf00      	nop
 801337c:	e7fe      	b.n	801337c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801337e:	4b0b      	ldr	r3, [pc, #44]	; (80133ac <vTaskPlaceOnUnorderedEventList+0x74>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	68ba      	ldr	r2, [r7, #8]
 8013384:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8013388:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801338a:	4b08      	ldr	r3, [pc, #32]	; (80133ac <vTaskPlaceOnUnorderedEventList+0x74>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	3318      	adds	r3, #24
 8013390:	4619      	mov	r1, r3
 8013392:	68f8      	ldr	r0, [r7, #12]
 8013394:	f7fe fd41 	bl	8011e1a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013398:	2101      	movs	r1, #1
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f000 fbf2 	bl	8013b84 <prvAddCurrentTaskToDelayedList>
}
 80133a0:	bf00      	nop
 80133a2:	3718      	adds	r7, #24
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}
 80133a8:	2000226c 	.word	0x2000226c
 80133ac:	20002144 	.word	0x20002144

080133b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b086      	sub	sp, #24
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d10a      	bne.n	80133d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80133c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c6:	f383 8811 	msr	BASEPRI, r3
 80133ca:	f3bf 8f6f 	isb	sy
 80133ce:	f3bf 8f4f 	dsb	sy
 80133d2:	617b      	str	r3, [r7, #20]
}
 80133d4:	bf00      	nop
 80133d6:	e7fe      	b.n	80133d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133d8:	4b0a      	ldr	r3, [pc, #40]	; (8013404 <vTaskPlaceOnEventListRestricted+0x54>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	3318      	adds	r3, #24
 80133de:	4619      	mov	r1, r3
 80133e0:	68f8      	ldr	r0, [r7, #12]
 80133e2:	f7fe fd1a 	bl	8011e1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d002      	beq.n	80133f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80133ec:	f04f 33ff 	mov.w	r3, #4294967295
 80133f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80133f2:	6879      	ldr	r1, [r7, #4]
 80133f4:	68b8      	ldr	r0, [r7, #8]
 80133f6:	f000 fbc5 	bl	8013b84 <prvAddCurrentTaskToDelayedList>
	}
 80133fa:	bf00      	nop
 80133fc:	3718      	adds	r7, #24
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
 8013402:	bf00      	nop
 8013404:	20002144 	.word	0x20002144

08013408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b086      	sub	sp, #24
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	68db      	ldr	r3, [r3, #12]
 8013416:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d10a      	bne.n	8013434 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013422:	f383 8811 	msr	BASEPRI, r3
 8013426:	f3bf 8f6f 	isb	sy
 801342a:	f3bf 8f4f 	dsb	sy
 801342e:	60fb      	str	r3, [r7, #12]
}
 8013430:	bf00      	nop
 8013432:	e7fe      	b.n	8013432 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013434:	693b      	ldr	r3, [r7, #16]
 8013436:	3318      	adds	r3, #24
 8013438:	4618      	mov	r0, r3
 801343a:	f7fe fd4b 	bl	8011ed4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801343e:	4b1d      	ldr	r3, [pc, #116]	; (80134b4 <xTaskRemoveFromEventList+0xac>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d11c      	bne.n	8013480 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	3304      	adds	r3, #4
 801344a:	4618      	mov	r0, r3
 801344c:	f7fe fd42 	bl	8011ed4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013454:	2201      	movs	r2, #1
 8013456:	409a      	lsls	r2, r3
 8013458:	4b17      	ldr	r3, [pc, #92]	; (80134b8 <xTaskRemoveFromEventList+0xb0>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	4313      	orrs	r3, r2
 801345e:	4a16      	ldr	r2, [pc, #88]	; (80134b8 <xTaskRemoveFromEventList+0xb0>)
 8013460:	6013      	str	r3, [r2, #0]
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013466:	4613      	mov	r3, r2
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	4413      	add	r3, r2
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	4a13      	ldr	r2, [pc, #76]	; (80134bc <xTaskRemoveFromEventList+0xb4>)
 8013470:	441a      	add	r2, r3
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	3304      	adds	r3, #4
 8013476:	4619      	mov	r1, r3
 8013478:	4610      	mov	r0, r2
 801347a:	f7fe fcce 	bl	8011e1a <vListInsertEnd>
 801347e:	e005      	b.n	801348c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	3318      	adds	r3, #24
 8013484:	4619      	mov	r1, r3
 8013486:	480e      	ldr	r0, [pc, #56]	; (80134c0 <xTaskRemoveFromEventList+0xb8>)
 8013488:	f7fe fcc7 	bl	8011e1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013490:	4b0c      	ldr	r3, [pc, #48]	; (80134c4 <xTaskRemoveFromEventList+0xbc>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013496:	429a      	cmp	r2, r3
 8013498:	d905      	bls.n	80134a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801349a:	2301      	movs	r3, #1
 801349c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801349e:	4b0a      	ldr	r3, [pc, #40]	; (80134c8 <xTaskRemoveFromEventList+0xc0>)
 80134a0:	2201      	movs	r2, #1
 80134a2:	601a      	str	r2, [r3, #0]
 80134a4:	e001      	b.n	80134aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80134a6:	2300      	movs	r3, #0
 80134a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80134aa:	697b      	ldr	r3, [r7, #20]
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3718      	adds	r7, #24
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}
 80134b4:	2000226c 	.word	0x2000226c
 80134b8:	2000224c 	.word	0x2000224c
 80134bc:	20002148 	.word	0x20002148
 80134c0:	20002204 	.word	0x20002204
 80134c4:	20002144 	.word	0x20002144
 80134c8:	20002258 	.word	0x20002258

080134cc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b086      	sub	sp, #24
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80134d6:	4b29      	ldr	r3, [pc, #164]	; (801357c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d10a      	bne.n	80134f4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80134de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e2:	f383 8811 	msr	BASEPRI, r3
 80134e6:	f3bf 8f6f 	isb	sy
 80134ea:	f3bf 8f4f 	dsb	sy
 80134ee:	613b      	str	r3, [r7, #16]
}
 80134f0:	bf00      	nop
 80134f2:	e7fe      	b.n	80134f2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	68db      	ldr	r3, [r3, #12]
 8013502:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d10a      	bne.n	8013520 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350e:	f383 8811 	msr	BASEPRI, r3
 8013512:	f3bf 8f6f 	isb	sy
 8013516:	f3bf 8f4f 	dsb	sy
 801351a:	60fb      	str	r3, [r7, #12]
}
 801351c:	bf00      	nop
 801351e:	e7fe      	b.n	801351e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f7fe fcd7 	bl	8011ed4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	3304      	adds	r3, #4
 801352a:	4618      	mov	r0, r3
 801352c:	f7fe fcd2 	bl	8011ed4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013534:	2201      	movs	r2, #1
 8013536:	409a      	lsls	r2, r3
 8013538:	4b11      	ldr	r3, [pc, #68]	; (8013580 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	4313      	orrs	r3, r2
 801353e:	4a10      	ldr	r2, [pc, #64]	; (8013580 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013540:	6013      	str	r3, [r2, #0]
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013546:	4613      	mov	r3, r2
 8013548:	009b      	lsls	r3, r3, #2
 801354a:	4413      	add	r3, r2
 801354c:	009b      	lsls	r3, r3, #2
 801354e:	4a0d      	ldr	r2, [pc, #52]	; (8013584 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8013550:	441a      	add	r2, r3
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	3304      	adds	r3, #4
 8013556:	4619      	mov	r1, r3
 8013558:	4610      	mov	r0, r2
 801355a:	f7fe fc5e 	bl	8011e1a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013562:	4b09      	ldr	r3, [pc, #36]	; (8013588 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013568:	429a      	cmp	r2, r3
 801356a:	d902      	bls.n	8013572 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801356c:	4b07      	ldr	r3, [pc, #28]	; (801358c <vTaskRemoveFromUnorderedEventList+0xc0>)
 801356e:	2201      	movs	r2, #1
 8013570:	601a      	str	r2, [r3, #0]
	}
}
 8013572:	bf00      	nop
 8013574:	3718      	adds	r7, #24
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	2000226c 	.word	0x2000226c
 8013580:	2000224c 	.word	0x2000224c
 8013584:	20002148 	.word	0x20002148
 8013588:	20002144 	.word	0x20002144
 801358c:	20002258 	.word	0x20002258

08013590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013590:	b480      	push	{r7}
 8013592:	b083      	sub	sp, #12
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013598:	4b06      	ldr	r3, [pc, #24]	; (80135b4 <vTaskInternalSetTimeOutState+0x24>)
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80135a0:	4b05      	ldr	r3, [pc, #20]	; (80135b8 <vTaskInternalSetTimeOutState+0x28>)
 80135a2:	681a      	ldr	r2, [r3, #0]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	605a      	str	r2, [r3, #4]
}
 80135a8:	bf00      	nop
 80135aa:	370c      	adds	r7, #12
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr
 80135b4:	2000225c 	.word	0x2000225c
 80135b8:	20002248 	.word	0x20002248

080135bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b088      	sub	sp, #32
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d10a      	bne.n	80135e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80135cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d0:	f383 8811 	msr	BASEPRI, r3
 80135d4:	f3bf 8f6f 	isb	sy
 80135d8:	f3bf 8f4f 	dsb	sy
 80135dc:	613b      	str	r3, [r7, #16]
}
 80135de:	bf00      	nop
 80135e0:	e7fe      	b.n	80135e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10a      	bne.n	80135fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80135e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ec:	f383 8811 	msr	BASEPRI, r3
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	60fb      	str	r3, [r7, #12]
}
 80135fa:	bf00      	nop
 80135fc:	e7fe      	b.n	80135fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80135fe:	f000 ffc1 	bl	8014584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013602:	4b1d      	ldr	r3, [pc, #116]	; (8013678 <xTaskCheckForTimeOut+0xbc>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	69ba      	ldr	r2, [r7, #24]
 801360e:	1ad3      	subs	r3, r2, r3
 8013610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801361a:	d102      	bne.n	8013622 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801361c:	2300      	movs	r3, #0
 801361e:	61fb      	str	r3, [r7, #28]
 8013620:	e023      	b.n	801366a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681a      	ldr	r2, [r3, #0]
 8013626:	4b15      	ldr	r3, [pc, #84]	; (801367c <xTaskCheckForTimeOut+0xc0>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	429a      	cmp	r2, r3
 801362c:	d007      	beq.n	801363e <xTaskCheckForTimeOut+0x82>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	69ba      	ldr	r2, [r7, #24]
 8013634:	429a      	cmp	r2, r3
 8013636:	d302      	bcc.n	801363e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013638:	2301      	movs	r3, #1
 801363a:	61fb      	str	r3, [r7, #28]
 801363c:	e015      	b.n	801366a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	697a      	ldr	r2, [r7, #20]
 8013644:	429a      	cmp	r2, r3
 8013646:	d20b      	bcs.n	8013660 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	1ad2      	subs	r2, r2, r3
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f7ff ff9b 	bl	8013590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801365a:	2300      	movs	r3, #0
 801365c:	61fb      	str	r3, [r7, #28]
 801365e:	e004      	b.n	801366a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	2200      	movs	r2, #0
 8013664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013666:	2301      	movs	r3, #1
 8013668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801366a:	f000 ffbb 	bl	80145e4 <vPortExitCritical>

	return xReturn;
 801366e:	69fb      	ldr	r3, [r7, #28]
}
 8013670:	4618      	mov	r0, r3
 8013672:	3720      	adds	r7, #32
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}
 8013678:	20002248 	.word	0x20002248
 801367c:	2000225c 	.word	0x2000225c

08013680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013680:	b480      	push	{r7}
 8013682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013684:	4b03      	ldr	r3, [pc, #12]	; (8013694 <vTaskMissedYield+0x14>)
 8013686:	2201      	movs	r2, #1
 8013688:	601a      	str	r2, [r3, #0]
}
 801368a:	bf00      	nop
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr
 8013694:	20002258 	.word	0x20002258

08013698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80136a0:	f000 f852 	bl	8013748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80136a4:	4b06      	ldr	r3, [pc, #24]	; (80136c0 <prvIdleTask+0x28>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2b01      	cmp	r3, #1
 80136aa:	d9f9      	bls.n	80136a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80136ac:	4b05      	ldr	r3, [pc, #20]	; (80136c4 <prvIdleTask+0x2c>)
 80136ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136b2:	601a      	str	r2, [r3, #0]
 80136b4:	f3bf 8f4f 	dsb	sy
 80136b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80136bc:	e7f0      	b.n	80136a0 <prvIdleTask+0x8>
 80136be:	bf00      	nop
 80136c0:	20002148 	.word	0x20002148
 80136c4:	e000ed04 	.word	0xe000ed04

080136c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80136ce:	2300      	movs	r3, #0
 80136d0:	607b      	str	r3, [r7, #4]
 80136d2:	e00c      	b.n	80136ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80136d4:	687a      	ldr	r2, [r7, #4]
 80136d6:	4613      	mov	r3, r2
 80136d8:	009b      	lsls	r3, r3, #2
 80136da:	4413      	add	r3, r2
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	4a12      	ldr	r2, [pc, #72]	; (8013728 <prvInitialiseTaskLists+0x60>)
 80136e0:	4413      	add	r3, r2
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fe fb6c 	bl	8011dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	3301      	adds	r3, #1
 80136ec:	607b      	str	r3, [r7, #4]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2b06      	cmp	r3, #6
 80136f2:	d9ef      	bls.n	80136d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80136f4:	480d      	ldr	r0, [pc, #52]	; (801372c <prvInitialiseTaskLists+0x64>)
 80136f6:	f7fe fb63 	bl	8011dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80136fa:	480d      	ldr	r0, [pc, #52]	; (8013730 <prvInitialiseTaskLists+0x68>)
 80136fc:	f7fe fb60 	bl	8011dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013700:	480c      	ldr	r0, [pc, #48]	; (8013734 <prvInitialiseTaskLists+0x6c>)
 8013702:	f7fe fb5d 	bl	8011dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013706:	480c      	ldr	r0, [pc, #48]	; (8013738 <prvInitialiseTaskLists+0x70>)
 8013708:	f7fe fb5a 	bl	8011dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801370c:	480b      	ldr	r0, [pc, #44]	; (801373c <prvInitialiseTaskLists+0x74>)
 801370e:	f7fe fb57 	bl	8011dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013712:	4b0b      	ldr	r3, [pc, #44]	; (8013740 <prvInitialiseTaskLists+0x78>)
 8013714:	4a05      	ldr	r2, [pc, #20]	; (801372c <prvInitialiseTaskLists+0x64>)
 8013716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013718:	4b0a      	ldr	r3, [pc, #40]	; (8013744 <prvInitialiseTaskLists+0x7c>)
 801371a:	4a05      	ldr	r2, [pc, #20]	; (8013730 <prvInitialiseTaskLists+0x68>)
 801371c:	601a      	str	r2, [r3, #0]
}
 801371e:	bf00      	nop
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	20002148 	.word	0x20002148
 801372c:	200021d4 	.word	0x200021d4
 8013730:	200021e8 	.word	0x200021e8
 8013734:	20002204 	.word	0x20002204
 8013738:	20002218 	.word	0x20002218
 801373c:	20002230 	.word	0x20002230
 8013740:	200021fc 	.word	0x200021fc
 8013744:	20002200 	.word	0x20002200

08013748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b082      	sub	sp, #8
 801374c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801374e:	e019      	b.n	8013784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013750:	f000 ff18 	bl	8014584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013754:	4b10      	ldr	r3, [pc, #64]	; (8013798 <prvCheckTasksWaitingTermination+0x50>)
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	68db      	ldr	r3, [r3, #12]
 801375a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	3304      	adds	r3, #4
 8013760:	4618      	mov	r0, r3
 8013762:	f7fe fbb7 	bl	8011ed4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013766:	4b0d      	ldr	r3, [pc, #52]	; (801379c <prvCheckTasksWaitingTermination+0x54>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	3b01      	subs	r3, #1
 801376c:	4a0b      	ldr	r2, [pc, #44]	; (801379c <prvCheckTasksWaitingTermination+0x54>)
 801376e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013770:	4b0b      	ldr	r3, [pc, #44]	; (80137a0 <prvCheckTasksWaitingTermination+0x58>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	3b01      	subs	r3, #1
 8013776:	4a0a      	ldr	r2, [pc, #40]	; (80137a0 <prvCheckTasksWaitingTermination+0x58>)
 8013778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801377a:	f000 ff33 	bl	80145e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801377e:	6878      	ldr	r0, [r7, #4]
 8013780:	f000 f810 	bl	80137a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013784:	4b06      	ldr	r3, [pc, #24]	; (80137a0 <prvCheckTasksWaitingTermination+0x58>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d1e1      	bne.n	8013750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801378c:	bf00      	nop
 801378e:	bf00      	nop
 8013790:	3708      	adds	r7, #8
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
 8013796:	bf00      	nop
 8013798:	20002218 	.word	0x20002218
 801379c:	20002244 	.word	0x20002244
 80137a0:	2000222c 	.word	0x2000222c

080137a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	3350      	adds	r3, #80	; 0x50
 80137b0:	4618      	mov	r0, r3
 80137b2:	f001 feef 	bl	8015594 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d108      	bne.n	80137d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137c4:	4618      	mov	r0, r3
 80137c6:	f001 f8cb 	bl	8014960 <vPortFree>
				vPortFree( pxTCB );
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f001 f8c8 	bl	8014960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80137d0:	e018      	b.n	8013804 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80137d8:	2b01      	cmp	r3, #1
 80137da:	d103      	bne.n	80137e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f001 f8bf 	bl	8014960 <vPortFree>
	}
 80137e2:	e00f      	b.n	8013804 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80137ea:	2b02      	cmp	r3, #2
 80137ec:	d00a      	beq.n	8013804 <prvDeleteTCB+0x60>
	__asm volatile
 80137ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f2:	f383 8811 	msr	BASEPRI, r3
 80137f6:	f3bf 8f6f 	isb	sy
 80137fa:	f3bf 8f4f 	dsb	sy
 80137fe:	60fb      	str	r3, [r7, #12]
}
 8013800:	bf00      	nop
 8013802:	e7fe      	b.n	8013802 <prvDeleteTCB+0x5e>
	}
 8013804:	bf00      	nop
 8013806:	3710      	adds	r7, #16
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801380c:	b480      	push	{r7}
 801380e:	b083      	sub	sp, #12
 8013810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013812:	4b0c      	ldr	r3, [pc, #48]	; (8013844 <prvResetNextTaskUnblockTime+0x38>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d104      	bne.n	8013826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801381c:	4b0a      	ldr	r3, [pc, #40]	; (8013848 <prvResetNextTaskUnblockTime+0x3c>)
 801381e:	f04f 32ff 	mov.w	r2, #4294967295
 8013822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013824:	e008      	b.n	8013838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013826:	4b07      	ldr	r3, [pc, #28]	; (8013844 <prvResetNextTaskUnblockTime+0x38>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	68db      	ldr	r3, [r3, #12]
 801382e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	4a04      	ldr	r2, [pc, #16]	; (8013848 <prvResetNextTaskUnblockTime+0x3c>)
 8013836:	6013      	str	r3, [r2, #0]
}
 8013838:	bf00      	nop
 801383a:	370c      	adds	r7, #12
 801383c:	46bd      	mov	sp, r7
 801383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013842:	4770      	bx	lr
 8013844:	200021fc 	.word	0x200021fc
 8013848:	20002264 	.word	0x20002264

0801384c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801384c:	b480      	push	{r7}
 801384e:	b083      	sub	sp, #12
 8013850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013852:	4b0b      	ldr	r3, [pc, #44]	; (8013880 <xTaskGetSchedulerState+0x34>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d102      	bne.n	8013860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801385a:	2301      	movs	r3, #1
 801385c:	607b      	str	r3, [r7, #4]
 801385e:	e008      	b.n	8013872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013860:	4b08      	ldr	r3, [pc, #32]	; (8013884 <xTaskGetSchedulerState+0x38>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d102      	bne.n	801386e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013868:	2302      	movs	r3, #2
 801386a:	607b      	str	r3, [r7, #4]
 801386c:	e001      	b.n	8013872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801386e:	2300      	movs	r3, #0
 8013870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013872:	687b      	ldr	r3, [r7, #4]
	}
 8013874:	4618      	mov	r0, r3
 8013876:	370c      	adds	r7, #12
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr
 8013880:	20002250 	.word	0x20002250
 8013884:	2000226c 	.word	0x2000226c

08013888 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013888:	b580      	push	{r7, lr}
 801388a:	b086      	sub	sp, #24
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013894:	2300      	movs	r3, #0
 8013896:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d06e      	beq.n	801397c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801389e:	4b3a      	ldr	r3, [pc, #232]	; (8013988 <xTaskPriorityDisinherit+0x100>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	693a      	ldr	r2, [r7, #16]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d00a      	beq.n	80138be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80138a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ac:	f383 8811 	msr	BASEPRI, r3
 80138b0:	f3bf 8f6f 	isb	sy
 80138b4:	f3bf 8f4f 	dsb	sy
 80138b8:	60fb      	str	r3, [r7, #12]
}
 80138ba:	bf00      	nop
 80138bc:	e7fe      	b.n	80138bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d10a      	bne.n	80138dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80138c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ca:	f383 8811 	msr	BASEPRI, r3
 80138ce:	f3bf 8f6f 	isb	sy
 80138d2:	f3bf 8f4f 	dsb	sy
 80138d6:	60bb      	str	r3, [r7, #8]
}
 80138d8:	bf00      	nop
 80138da:	e7fe      	b.n	80138da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138e0:	1e5a      	subs	r2, r3, #1
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ea:	693b      	ldr	r3, [r7, #16]
 80138ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d044      	beq.n	801397c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d140      	bne.n	801397c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	3304      	adds	r3, #4
 80138fe:	4618      	mov	r0, r3
 8013900:	f7fe fae8 	bl	8011ed4 <uxListRemove>
 8013904:	4603      	mov	r3, r0
 8013906:	2b00      	cmp	r3, #0
 8013908:	d115      	bne.n	8013936 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801390e:	491f      	ldr	r1, [pc, #124]	; (801398c <xTaskPriorityDisinherit+0x104>)
 8013910:	4613      	mov	r3, r2
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	4413      	add	r3, r2
 8013916:	009b      	lsls	r3, r3, #2
 8013918:	440b      	add	r3, r1
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d10a      	bne.n	8013936 <xTaskPriorityDisinherit+0xae>
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013924:	2201      	movs	r2, #1
 8013926:	fa02 f303 	lsl.w	r3, r2, r3
 801392a:	43da      	mvns	r2, r3
 801392c:	4b18      	ldr	r3, [pc, #96]	; (8013990 <xTaskPriorityDisinherit+0x108>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	4013      	ands	r3, r2
 8013932:	4a17      	ldr	r2, [pc, #92]	; (8013990 <xTaskPriorityDisinherit+0x108>)
 8013934:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013942:	f1c3 0207 	rsb	r2, r3, #7
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394e:	2201      	movs	r2, #1
 8013950:	409a      	lsls	r2, r3
 8013952:	4b0f      	ldr	r3, [pc, #60]	; (8013990 <xTaskPriorityDisinherit+0x108>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	4313      	orrs	r3, r2
 8013958:	4a0d      	ldr	r2, [pc, #52]	; (8013990 <xTaskPriorityDisinherit+0x108>)
 801395a:	6013      	str	r3, [r2, #0]
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013960:	4613      	mov	r3, r2
 8013962:	009b      	lsls	r3, r3, #2
 8013964:	4413      	add	r3, r2
 8013966:	009b      	lsls	r3, r3, #2
 8013968:	4a08      	ldr	r2, [pc, #32]	; (801398c <xTaskPriorityDisinherit+0x104>)
 801396a:	441a      	add	r2, r3
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	3304      	adds	r3, #4
 8013970:	4619      	mov	r1, r3
 8013972:	4610      	mov	r0, r2
 8013974:	f7fe fa51 	bl	8011e1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013978:	2301      	movs	r3, #1
 801397a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801397c:	697b      	ldr	r3, [r7, #20]
	}
 801397e:	4618      	mov	r0, r3
 8013980:	3718      	adds	r7, #24
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	20002144 	.word	0x20002144
 801398c:	20002148 	.word	0x20002148
 8013990:	2000224c 	.word	0x2000224c

08013994 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8013994:	b480      	push	{r7}
 8013996:	b083      	sub	sp, #12
 8013998:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801399a:	4b09      	ldr	r3, [pc, #36]	; (80139c0 <uxTaskResetEventItemValue+0x2c>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	699b      	ldr	r3, [r3, #24]
 80139a0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139a2:	4b07      	ldr	r3, [pc, #28]	; (80139c0 <uxTaskResetEventItemValue+0x2c>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139a8:	4b05      	ldr	r3, [pc, #20]	; (80139c0 <uxTaskResetEventItemValue+0x2c>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	f1c2 0207 	rsb	r2, r2, #7
 80139b0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80139b2:	687b      	ldr	r3, [r7, #4]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	370c      	adds	r7, #12
 80139b8:	46bd      	mov	sp, r7
 80139ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139be:	4770      	bx	lr
 80139c0:	20002144 	.word	0x20002144

080139c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b084      	sub	sp, #16
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80139ce:	f000 fdd9 	bl	8014584 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80139d2:	4b20      	ldr	r3, [pc, #128]	; (8013a54 <ulTaskNotifyTake+0x90>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d113      	bne.n	8013a06 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80139de:	4b1d      	ldr	r3, [pc, #116]	; (8013a54 <ulTaskNotifyTake+0x90>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	2201      	movs	r2, #1
 80139e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

				if( xTicksToWait > ( TickType_t ) 0 )
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d00b      	beq.n	8013a06 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80139ee:	2101      	movs	r1, #1
 80139f0:	6838      	ldr	r0, [r7, #0]
 80139f2:	f000 f8c7 	bl	8013b84 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80139f6:	4b18      	ldr	r3, [pc, #96]	; (8013a58 <ulTaskNotifyTake+0x94>)
 80139f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139fc:	601a      	str	r2, [r3, #0]
 80139fe:	f3bf 8f4f 	dsb	sy
 8013a02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013a06:	f000 fded 	bl	80145e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013a0a:	f000 fdbb 	bl	8014584 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8013a0e:	4b11      	ldr	r3, [pc, #68]	; (8013a54 <ulTaskNotifyTake+0x90>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013a16:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00e      	beq.n	8013a3c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d005      	beq.n	8013a30 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8013a24:	4b0b      	ldr	r3, [pc, #44]	; (8013a54 <ulTaskNotifyTake+0x90>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	2200      	movs	r2, #0
 8013a2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8013a2e:	e005      	b.n	8013a3c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8013a30:	4b08      	ldr	r3, [pc, #32]	; (8013a54 <ulTaskNotifyTake+0x90>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	68fa      	ldr	r2, [r7, #12]
 8013a36:	3a01      	subs	r2, #1
 8013a38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a3c:	4b05      	ldr	r3, [pc, #20]	; (8013a54 <ulTaskNotifyTake+0x90>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2200      	movs	r2, #0
 8013a42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
		}
		taskEXIT_CRITICAL();
 8013a46:	f000 fdcd 	bl	80145e4 <vPortExitCritical>

		return ulReturn;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
	}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3710      	adds	r7, #16
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	20002144 	.word	0x20002144
 8013a58:	e000ed04 	.word	0xe000ed04

08013a5c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b08a      	sub	sp, #40	; 0x28
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d10a      	bne.n	8013a82 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8013a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a70:	f383 8811 	msr	BASEPRI, r3
 8013a74:	f3bf 8f6f 	isb	sy
 8013a78:	f3bf 8f4f 	dsb	sy
 8013a7c:	61bb      	str	r3, [r7, #24]
}
 8013a7e:	bf00      	nop
 8013a80:	e7fe      	b.n	8013a80 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a82:	f000 fe61 	bl	8014748 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8013a8a:	f3ef 8211 	mrs	r2, BASEPRI
 8013a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a92:	f383 8811 	msr	BASEPRI, r3
 8013a96:	f3bf 8f6f 	isb	sy
 8013a9a:	f3bf 8f4f 	dsb	sy
 8013a9e:	617a      	str	r2, [r7, #20]
 8013aa0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013aa2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013aa4:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8013aac:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab0:	2202      	movs	r2, #2
 8013ab2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8013ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013abc:	1c5a      	adds	r2, r3, #1
 8013abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013ac4:	7ffb      	ldrb	r3, [r7, #31]
 8013ac6:	2b01      	cmp	r3, #1
 8013ac8:	d145      	bne.n	8013b56 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d00a      	beq.n	8013ae8 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8013ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad6:	f383 8811 	msr	BASEPRI, r3
 8013ada:	f3bf 8f6f 	isb	sy
 8013ade:	f3bf 8f4f 	dsb	sy
 8013ae2:	60fb      	str	r3, [r7, #12]
}
 8013ae4:	bf00      	nop
 8013ae6:	e7fe      	b.n	8013ae6 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ae8:	4b20      	ldr	r3, [pc, #128]	; (8013b6c <vTaskNotifyGiveFromISR+0x110>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d11c      	bne.n	8013b2a <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af2:	3304      	adds	r3, #4
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fe f9ed 	bl	8011ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013afe:	2201      	movs	r2, #1
 8013b00:	409a      	lsls	r2, r3
 8013b02:	4b1b      	ldr	r3, [pc, #108]	; (8013b70 <vTaskNotifyGiveFromISR+0x114>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	4313      	orrs	r3, r2
 8013b08:	4a19      	ldr	r2, [pc, #100]	; (8013b70 <vTaskNotifyGiveFromISR+0x114>)
 8013b0a:	6013      	str	r3, [r2, #0]
 8013b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b10:	4613      	mov	r3, r2
 8013b12:	009b      	lsls	r3, r3, #2
 8013b14:	4413      	add	r3, r2
 8013b16:	009b      	lsls	r3, r3, #2
 8013b18:	4a16      	ldr	r2, [pc, #88]	; (8013b74 <vTaskNotifyGiveFromISR+0x118>)
 8013b1a:	441a      	add	r2, r3
 8013b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1e:	3304      	adds	r3, #4
 8013b20:	4619      	mov	r1, r3
 8013b22:	4610      	mov	r0, r2
 8013b24:	f7fe f979 	bl	8011e1a <vListInsertEnd>
 8013b28:	e005      	b.n	8013b36 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2c:	3318      	adds	r3, #24
 8013b2e:	4619      	mov	r1, r3
 8013b30:	4811      	ldr	r0, [pc, #68]	; (8013b78 <vTaskNotifyGiveFromISR+0x11c>)
 8013b32:	f7fe f972 	bl	8011e1a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b3a:	4b10      	ldr	r3, [pc, #64]	; (8013b7c <vTaskNotifyGiveFromISR+0x120>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d908      	bls.n	8013b56 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d002      	beq.n	8013b50 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8013b50:	4b0b      	ldr	r3, [pc, #44]	; (8013b80 <vTaskNotifyGiveFromISR+0x124>)
 8013b52:	2201      	movs	r2, #1
 8013b54:	601a      	str	r2, [r3, #0]
 8013b56:	6a3b      	ldr	r3, [r7, #32]
 8013b58:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	f383 8811 	msr	BASEPRI, r3
}
 8013b60:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8013b62:	bf00      	nop
 8013b64:	3728      	adds	r7, #40	; 0x28
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}
 8013b6a:	bf00      	nop
 8013b6c:	2000226c 	.word	0x2000226c
 8013b70:	2000224c 	.word	0x2000224c
 8013b74:	20002148 	.word	0x20002148
 8013b78:	20002204 	.word	0x20002204
 8013b7c:	20002144 	.word	0x20002144
 8013b80:	20002258 	.word	0x20002258

08013b84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b084      	sub	sp, #16
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013b8e:	4b29      	ldr	r3, [pc, #164]	; (8013c34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b94:	4b28      	ldr	r3, [pc, #160]	; (8013c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	3304      	adds	r3, #4
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fe f99a 	bl	8011ed4 <uxListRemove>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d10b      	bne.n	8013bbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013ba6:	4b24      	ldr	r3, [pc, #144]	; (8013c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bac:	2201      	movs	r2, #1
 8013bae:	fa02 f303 	lsl.w	r3, r2, r3
 8013bb2:	43da      	mvns	r2, r3
 8013bb4:	4b21      	ldr	r3, [pc, #132]	; (8013c3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	4013      	ands	r3, r2
 8013bba:	4a20      	ldr	r2, [pc, #128]	; (8013c3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8013bbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc4:	d10a      	bne.n	8013bdc <prvAddCurrentTaskToDelayedList+0x58>
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d007      	beq.n	8013bdc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bcc:	4b1a      	ldr	r3, [pc, #104]	; (8013c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	3304      	adds	r3, #4
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	481a      	ldr	r0, [pc, #104]	; (8013c40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013bd6:	f7fe f920 	bl	8011e1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013bda:	e026      	b.n	8013c2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013bdc:	68fa      	ldr	r2, [r7, #12]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	4413      	add	r3, r2
 8013be2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013be4:	4b14      	ldr	r3, [pc, #80]	; (8013c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	68ba      	ldr	r2, [r7, #8]
 8013bea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013bec:	68ba      	ldr	r2, [r7, #8]
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d209      	bcs.n	8013c08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bf4:	4b13      	ldr	r3, [pc, #76]	; (8013c44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013bf6:	681a      	ldr	r2, [r3, #0]
 8013bf8:	4b0f      	ldr	r3, [pc, #60]	; (8013c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	3304      	adds	r3, #4
 8013bfe:	4619      	mov	r1, r3
 8013c00:	4610      	mov	r0, r2
 8013c02:	f7fe f92e 	bl	8011e62 <vListInsert>
}
 8013c06:	e010      	b.n	8013c2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c08:	4b0f      	ldr	r3, [pc, #60]	; (8013c48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013c0a:	681a      	ldr	r2, [r3, #0]
 8013c0c:	4b0a      	ldr	r3, [pc, #40]	; (8013c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	3304      	adds	r3, #4
 8013c12:	4619      	mov	r1, r3
 8013c14:	4610      	mov	r0, r2
 8013c16:	f7fe f924 	bl	8011e62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013c1a:	4b0c      	ldr	r3, [pc, #48]	; (8013c4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	68ba      	ldr	r2, [r7, #8]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d202      	bcs.n	8013c2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013c24:	4a09      	ldr	r2, [pc, #36]	; (8013c4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	6013      	str	r3, [r2, #0]
}
 8013c2a:	bf00      	nop
 8013c2c:	3710      	adds	r7, #16
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	bf00      	nop
 8013c34:	20002248 	.word	0x20002248
 8013c38:	20002144 	.word	0x20002144
 8013c3c:	2000224c 	.word	0x2000224c
 8013c40:	20002230 	.word	0x20002230
 8013c44:	20002200 	.word	0x20002200
 8013c48:	200021fc 	.word	0x200021fc
 8013c4c:	20002264 	.word	0x20002264

08013c50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b08a      	sub	sp, #40	; 0x28
 8013c54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013c56:	2300      	movs	r3, #0
 8013c58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013c5a:	f000 fb07 	bl	801426c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013c5e:	4b1c      	ldr	r3, [pc, #112]	; (8013cd0 <xTimerCreateTimerTask+0x80>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d021      	beq.n	8013caa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013c66:	2300      	movs	r3, #0
 8013c68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013c6e:	1d3a      	adds	r2, r7, #4
 8013c70:	f107 0108 	add.w	r1, r7, #8
 8013c74:	f107 030c 	add.w	r3, r7, #12
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7ee f9d5 	bl	8002028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013c7e:	6879      	ldr	r1, [r7, #4]
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	68fa      	ldr	r2, [r7, #12]
 8013c84:	9202      	str	r2, [sp, #8]
 8013c86:	9301      	str	r3, [sp, #4]
 8013c88:	2302      	movs	r3, #2
 8013c8a:	9300      	str	r3, [sp, #0]
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	460a      	mov	r2, r1
 8013c90:	4910      	ldr	r1, [pc, #64]	; (8013cd4 <xTimerCreateTimerTask+0x84>)
 8013c92:	4811      	ldr	r0, [pc, #68]	; (8013cd8 <xTimerCreateTimerTask+0x88>)
 8013c94:	f7fe fe6a 	bl	801296c <xTaskCreateStatic>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	4a10      	ldr	r2, [pc, #64]	; (8013cdc <xTimerCreateTimerTask+0x8c>)
 8013c9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013c9e:	4b0f      	ldr	r3, [pc, #60]	; (8013cdc <xTimerCreateTimerTask+0x8c>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d001      	beq.n	8013caa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d10a      	bne.n	8013cc6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb4:	f383 8811 	msr	BASEPRI, r3
 8013cb8:	f3bf 8f6f 	isb	sy
 8013cbc:	f3bf 8f4f 	dsb	sy
 8013cc0:	613b      	str	r3, [r7, #16]
}
 8013cc2:	bf00      	nop
 8013cc4:	e7fe      	b.n	8013cc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013cc6:	697b      	ldr	r3, [r7, #20]
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3718      	adds	r7, #24
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}
 8013cd0:	200022a8 	.word	0x200022a8
 8013cd4:	08017424 	.word	0x08017424
 8013cd8:	08013e15 	.word	0x08013e15
 8013cdc:	200022ac 	.word	0x200022ac

08013ce0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b08a      	sub	sp, #40	; 0x28
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	60f8      	str	r0, [r7, #12]
 8013ce8:	60b9      	str	r1, [r7, #8]
 8013cea:	607a      	str	r2, [r7, #4]
 8013cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d10a      	bne.n	8013d0e <xTimerGenericCommand+0x2e>
	__asm volatile
 8013cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cfc:	f383 8811 	msr	BASEPRI, r3
 8013d00:	f3bf 8f6f 	isb	sy
 8013d04:	f3bf 8f4f 	dsb	sy
 8013d08:	623b      	str	r3, [r7, #32]
}
 8013d0a:	bf00      	nop
 8013d0c:	e7fe      	b.n	8013d0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013d0e:	4b1a      	ldr	r3, [pc, #104]	; (8013d78 <xTimerGenericCommand+0x98>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d02a      	beq.n	8013d6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	2b05      	cmp	r3, #5
 8013d26:	dc18      	bgt.n	8013d5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013d28:	f7ff fd90 	bl	801384c <xTaskGetSchedulerState>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	2b02      	cmp	r3, #2
 8013d30:	d109      	bne.n	8013d46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013d32:	4b11      	ldr	r3, [pc, #68]	; (8013d78 <xTimerGenericCommand+0x98>)
 8013d34:	6818      	ldr	r0, [r3, #0]
 8013d36:	f107 0110 	add.w	r1, r7, #16
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d3e:	f7fe fa2d 	bl	801219c <xQueueGenericSend>
 8013d42:	6278      	str	r0, [r7, #36]	; 0x24
 8013d44:	e012      	b.n	8013d6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013d46:	4b0c      	ldr	r3, [pc, #48]	; (8013d78 <xTimerGenericCommand+0x98>)
 8013d48:	6818      	ldr	r0, [r3, #0]
 8013d4a:	f107 0110 	add.w	r1, r7, #16
 8013d4e:	2300      	movs	r3, #0
 8013d50:	2200      	movs	r2, #0
 8013d52:	f7fe fa23 	bl	801219c <xQueueGenericSend>
 8013d56:	6278      	str	r0, [r7, #36]	; 0x24
 8013d58:	e008      	b.n	8013d6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013d5a:	4b07      	ldr	r3, [pc, #28]	; (8013d78 <xTimerGenericCommand+0x98>)
 8013d5c:	6818      	ldr	r0, [r3, #0]
 8013d5e:	f107 0110 	add.w	r1, r7, #16
 8013d62:	2300      	movs	r3, #0
 8013d64:	683a      	ldr	r2, [r7, #0]
 8013d66:	f7fe fb17 	bl	8012398 <xQueueGenericSendFromISR>
 8013d6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3728      	adds	r7, #40	; 0x28
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	200022a8 	.word	0x200022a8

08013d7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b088      	sub	sp, #32
 8013d80:	af02      	add	r7, sp, #8
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d86:	4b22      	ldr	r3, [pc, #136]	; (8013e10 <prvProcessExpiredTimer+0x94>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	3304      	adds	r3, #4
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7fe f89d 	bl	8011ed4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013d9a:	697b      	ldr	r3, [r7, #20]
 8013d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013da0:	f003 0304 	and.w	r3, r3, #4
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d022      	beq.n	8013dee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	699a      	ldr	r2, [r3, #24]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	18d1      	adds	r1, r2, r3
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	683a      	ldr	r2, [r7, #0]
 8013db4:	6978      	ldr	r0, [r7, #20]
 8013db6:	f000 f8d1 	bl	8013f5c <prvInsertTimerInActiveList>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d01f      	beq.n	8013e00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	687a      	ldr	r2, [r7, #4]
 8013dc8:	2100      	movs	r1, #0
 8013dca:	6978      	ldr	r0, [r7, #20]
 8013dcc:	f7ff ff88 	bl	8013ce0 <xTimerGenericCommand>
 8013dd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d113      	bne.n	8013e00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ddc:	f383 8811 	msr	BASEPRI, r3
 8013de0:	f3bf 8f6f 	isb	sy
 8013de4:	f3bf 8f4f 	dsb	sy
 8013de8:	60fb      	str	r3, [r7, #12]
}
 8013dea:	bf00      	nop
 8013dec:	e7fe      	b.n	8013dec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013df4:	f023 0301 	bic.w	r3, r3, #1
 8013df8:	b2da      	uxtb	r2, r3
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	6a1b      	ldr	r3, [r3, #32]
 8013e04:	6978      	ldr	r0, [r7, #20]
 8013e06:	4798      	blx	r3
}
 8013e08:	bf00      	nop
 8013e0a:	3718      	adds	r7, #24
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	200022a0 	.word	0x200022a0

08013e14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013e1c:	f107 0308 	add.w	r3, r7, #8
 8013e20:	4618      	mov	r0, r3
 8013e22:	f000 f857 	bl	8013ed4 <prvGetNextExpireTime>
 8013e26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	68f8      	ldr	r0, [r7, #12]
 8013e2e:	f000 f803 	bl	8013e38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013e32:	f000 f8d5 	bl	8013fe0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013e36:	e7f1      	b.n	8013e1c <prvTimerTask+0x8>

08013e38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013e42:	f7ff f865 	bl	8012f10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013e46:	f107 0308 	add.w	r3, r7, #8
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f000 f866 	bl	8013f1c <prvSampleTimeNow>
 8013e50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d130      	bne.n	8013eba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d10a      	bne.n	8013e74 <prvProcessTimerOrBlockTask+0x3c>
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d806      	bhi.n	8013e74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013e66:	f7ff f861 	bl	8012f2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013e6a:	68f9      	ldr	r1, [r7, #12]
 8013e6c:	6878      	ldr	r0, [r7, #4]
 8013e6e:	f7ff ff85 	bl	8013d7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013e72:	e024      	b.n	8013ebe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d008      	beq.n	8013e8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013e7a:	4b13      	ldr	r3, [pc, #76]	; (8013ec8 <prvProcessTimerOrBlockTask+0x90>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d101      	bne.n	8013e88 <prvProcessTimerOrBlockTask+0x50>
 8013e84:	2301      	movs	r3, #1
 8013e86:	e000      	b.n	8013e8a <prvProcessTimerOrBlockTask+0x52>
 8013e88:	2300      	movs	r3, #0
 8013e8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013e8c:	4b0f      	ldr	r3, [pc, #60]	; (8013ecc <prvProcessTimerOrBlockTask+0x94>)
 8013e8e:	6818      	ldr	r0, [r3, #0]
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	1ad3      	subs	r3, r2, r3
 8013e96:	683a      	ldr	r2, [r7, #0]
 8013e98:	4619      	mov	r1, r3
 8013e9a:	f7fe fd33 	bl	8012904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013e9e:	f7ff f845 	bl	8012f2c <xTaskResumeAll>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d10a      	bne.n	8013ebe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013ea8:	4b09      	ldr	r3, [pc, #36]	; (8013ed0 <prvProcessTimerOrBlockTask+0x98>)
 8013eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013eae:	601a      	str	r2, [r3, #0]
 8013eb0:	f3bf 8f4f 	dsb	sy
 8013eb4:	f3bf 8f6f 	isb	sy
}
 8013eb8:	e001      	b.n	8013ebe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013eba:	f7ff f837 	bl	8012f2c <xTaskResumeAll>
}
 8013ebe:	bf00      	nop
 8013ec0:	3710      	adds	r7, #16
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	200022a4 	.word	0x200022a4
 8013ecc:	200022a8 	.word	0x200022a8
 8013ed0:	e000ed04 	.word	0xe000ed04

08013ed4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b085      	sub	sp, #20
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013edc:	4b0e      	ldr	r3, [pc, #56]	; (8013f18 <prvGetNextExpireTime+0x44>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d101      	bne.n	8013eea <prvGetNextExpireTime+0x16>
 8013ee6:	2201      	movs	r2, #1
 8013ee8:	e000      	b.n	8013eec <prvGetNextExpireTime+0x18>
 8013eea:	2200      	movs	r2, #0
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d105      	bne.n	8013f04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ef8:	4b07      	ldr	r3, [pc, #28]	; (8013f18 <prvGetNextExpireTime+0x44>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	68db      	ldr	r3, [r3, #12]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	60fb      	str	r3, [r7, #12]
 8013f02:	e001      	b.n	8013f08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013f04:	2300      	movs	r3, #0
 8013f06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013f08:	68fb      	ldr	r3, [r7, #12]
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3714      	adds	r7, #20
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f14:	4770      	bx	lr
 8013f16:	bf00      	nop
 8013f18:	200022a0 	.word	0x200022a0

08013f1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013f24:	f7ff f89e 	bl	8013064 <xTaskGetTickCount>
 8013f28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013f2a:	4b0b      	ldr	r3, [pc, #44]	; (8013f58 <prvSampleTimeNow+0x3c>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	68fa      	ldr	r2, [r7, #12]
 8013f30:	429a      	cmp	r2, r3
 8013f32:	d205      	bcs.n	8013f40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013f34:	f000 f936 	bl	80141a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	601a      	str	r2, [r3, #0]
 8013f3e:	e002      	b.n	8013f46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2200      	movs	r2, #0
 8013f44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013f46:	4a04      	ldr	r2, [pc, #16]	; (8013f58 <prvSampleTimeNow+0x3c>)
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
}
 8013f4e:	4618      	mov	r0, r3
 8013f50:	3710      	adds	r7, #16
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}
 8013f56:	bf00      	nop
 8013f58:	200022b0 	.word	0x200022b0

08013f5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b086      	sub	sp, #24
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
 8013f68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	68ba      	ldr	r2, [r7, #8]
 8013f72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	68fa      	ldr	r2, [r7, #12]
 8013f78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013f7a:	68ba      	ldr	r2, [r7, #8]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d812      	bhi.n	8013fa8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f82:	687a      	ldr	r2, [r7, #4]
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	1ad2      	subs	r2, r2, r3
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	699b      	ldr	r3, [r3, #24]
 8013f8c:	429a      	cmp	r2, r3
 8013f8e:	d302      	bcc.n	8013f96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013f90:	2301      	movs	r3, #1
 8013f92:	617b      	str	r3, [r7, #20]
 8013f94:	e01b      	b.n	8013fce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013f96:	4b10      	ldr	r3, [pc, #64]	; (8013fd8 <prvInsertTimerInActiveList+0x7c>)
 8013f98:	681a      	ldr	r2, [r3, #0]
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	3304      	adds	r3, #4
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	4610      	mov	r0, r2
 8013fa2:	f7fd ff5e 	bl	8011e62 <vListInsert>
 8013fa6:	e012      	b.n	8013fce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013fa8:	687a      	ldr	r2, [r7, #4]
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d206      	bcs.n	8013fbe <prvInsertTimerInActiveList+0x62>
 8013fb0:	68ba      	ldr	r2, [r7, #8]
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d302      	bcc.n	8013fbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013fb8:	2301      	movs	r3, #1
 8013fba:	617b      	str	r3, [r7, #20]
 8013fbc:	e007      	b.n	8013fce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013fbe:	4b07      	ldr	r3, [pc, #28]	; (8013fdc <prvInsertTimerInActiveList+0x80>)
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	3304      	adds	r3, #4
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	4610      	mov	r0, r2
 8013fca:	f7fd ff4a 	bl	8011e62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013fce:	697b      	ldr	r3, [r7, #20]
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3718      	adds	r7, #24
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	200022a4 	.word	0x200022a4
 8013fdc:	200022a0 	.word	0x200022a0

08013fe0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b08e      	sub	sp, #56	; 0x38
 8013fe4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013fe6:	e0ca      	b.n	801417e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	da18      	bge.n	8014020 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013fee:	1d3b      	adds	r3, r7, #4
 8013ff0:	3304      	adds	r3, #4
 8013ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d10a      	bne.n	8014010 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffe:	f383 8811 	msr	BASEPRI, r3
 8014002:	f3bf 8f6f 	isb	sy
 8014006:	f3bf 8f4f 	dsb	sy
 801400a:	61fb      	str	r3, [r7, #28]
}
 801400c:	bf00      	nop
 801400e:	e7fe      	b.n	801400e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014016:	6850      	ldr	r0, [r2, #4]
 8014018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801401a:	6892      	ldr	r2, [r2, #8]
 801401c:	4611      	mov	r1, r2
 801401e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2b00      	cmp	r3, #0
 8014024:	f2c0 80ab 	blt.w	801417e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402e:	695b      	ldr	r3, [r3, #20]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d004      	beq.n	801403e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014036:	3304      	adds	r3, #4
 8014038:	4618      	mov	r0, r3
 801403a:	f7fd ff4b 	bl	8011ed4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801403e:	463b      	mov	r3, r7
 8014040:	4618      	mov	r0, r3
 8014042:	f7ff ff6b 	bl	8013f1c <prvSampleTimeNow>
 8014046:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2b09      	cmp	r3, #9
 801404c:	f200 8096 	bhi.w	801417c <prvProcessReceivedCommands+0x19c>
 8014050:	a201      	add	r2, pc, #4	; (adr r2, 8014058 <prvProcessReceivedCommands+0x78>)
 8014052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014056:	bf00      	nop
 8014058:	08014081 	.word	0x08014081
 801405c:	08014081 	.word	0x08014081
 8014060:	08014081 	.word	0x08014081
 8014064:	080140f5 	.word	0x080140f5
 8014068:	08014109 	.word	0x08014109
 801406c:	08014153 	.word	0x08014153
 8014070:	08014081 	.word	0x08014081
 8014074:	08014081 	.word	0x08014081
 8014078:	080140f5 	.word	0x080140f5
 801407c:	08014109 	.word	0x08014109
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014086:	f043 0301 	orr.w	r3, r3, #1
 801408a:	b2da      	uxtb	r2, r3
 801408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801408e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014092:	68ba      	ldr	r2, [r7, #8]
 8014094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014096:	699b      	ldr	r3, [r3, #24]
 8014098:	18d1      	adds	r1, r2, r3
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801409e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140a0:	f7ff ff5c 	bl	8013f5c <prvInsertTimerInActiveList>
 80140a4:	4603      	mov	r3, r0
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d069      	beq.n	801417e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80140aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ac:	6a1b      	ldr	r3, [r3, #32]
 80140ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80140b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80140b8:	f003 0304 	and.w	r3, r3, #4
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d05e      	beq.n	801417e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80140c0:	68ba      	ldr	r2, [r7, #8]
 80140c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c4:	699b      	ldr	r3, [r3, #24]
 80140c6:	441a      	add	r2, r3
 80140c8:	2300      	movs	r3, #0
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	2300      	movs	r3, #0
 80140ce:	2100      	movs	r1, #0
 80140d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140d2:	f7ff fe05 	bl	8013ce0 <xTimerGenericCommand>
 80140d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80140d8:	6a3b      	ldr	r3, [r7, #32]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d14f      	bne.n	801417e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80140de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e2:	f383 8811 	msr	BASEPRI, r3
 80140e6:	f3bf 8f6f 	isb	sy
 80140ea:	f3bf 8f4f 	dsb	sy
 80140ee:	61bb      	str	r3, [r7, #24]
}
 80140f0:	bf00      	nop
 80140f2:	e7fe      	b.n	80140f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80140f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80140fa:	f023 0301 	bic.w	r3, r3, #1
 80140fe:	b2da      	uxtb	r2, r3
 8014100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8014106:	e03a      	b.n	801417e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801410a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801410e:	f043 0301 	orr.w	r3, r3, #1
 8014112:	b2da      	uxtb	r2, r3
 8014114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801411a:	68ba      	ldr	r2, [r7, #8]
 801411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801411e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014122:	699b      	ldr	r3, [r3, #24]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d10a      	bne.n	801413e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801412c:	f383 8811 	msr	BASEPRI, r3
 8014130:	f3bf 8f6f 	isb	sy
 8014134:	f3bf 8f4f 	dsb	sy
 8014138:	617b      	str	r3, [r7, #20]
}
 801413a:	bf00      	nop
 801413c:	e7fe      	b.n	801413c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014140:	699a      	ldr	r2, [r3, #24]
 8014142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014144:	18d1      	adds	r1, r2, r3
 8014146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801414a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801414c:	f7ff ff06 	bl	8013f5c <prvInsertTimerInActiveList>
					break;
 8014150:	e015      	b.n	801417e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014158:	f003 0302 	and.w	r3, r3, #2
 801415c:	2b00      	cmp	r3, #0
 801415e:	d103      	bne.n	8014168 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014162:	f000 fbfd 	bl	8014960 <vPortFree>
 8014166:	e00a      	b.n	801417e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801416e:	f023 0301 	bic.w	r3, r3, #1
 8014172:	b2da      	uxtb	r2, r3
 8014174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801417a:	e000      	b.n	801417e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801417c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801417e:	4b08      	ldr	r3, [pc, #32]	; (80141a0 <prvProcessReceivedCommands+0x1c0>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	1d39      	adds	r1, r7, #4
 8014184:	2200      	movs	r2, #0
 8014186:	4618      	mov	r0, r3
 8014188:	f7fe f9a2 	bl	80124d0 <xQueueReceive>
 801418c:	4603      	mov	r3, r0
 801418e:	2b00      	cmp	r3, #0
 8014190:	f47f af2a 	bne.w	8013fe8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8014194:	bf00      	nop
 8014196:	bf00      	nop
 8014198:	3730      	adds	r7, #48	; 0x30
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	200022a8 	.word	0x200022a8

080141a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b088      	sub	sp, #32
 80141a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80141aa:	e048      	b.n	801423e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80141ac:	4b2d      	ldr	r3, [pc, #180]	; (8014264 <prvSwitchTimerLists+0xc0>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141b6:	4b2b      	ldr	r3, [pc, #172]	; (8014264 <prvSwitchTimerLists+0xc0>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	68db      	ldr	r3, [r3, #12]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	3304      	adds	r3, #4
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7fd fe85 	bl	8011ed4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6a1b      	ldr	r3, [r3, #32]
 80141ce:	68f8      	ldr	r0, [r7, #12]
 80141d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80141d8:	f003 0304 	and.w	r3, r3, #4
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d02e      	beq.n	801423e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	699b      	ldr	r3, [r3, #24]
 80141e4:	693a      	ldr	r2, [r7, #16]
 80141e6:	4413      	add	r3, r2
 80141e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80141ea:	68ba      	ldr	r2, [r7, #8]
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d90e      	bls.n	8014210 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	68ba      	ldr	r2, [r7, #8]
 80141f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80141fe:	4b19      	ldr	r3, [pc, #100]	; (8014264 <prvSwitchTimerLists+0xc0>)
 8014200:	681a      	ldr	r2, [r3, #0]
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	3304      	adds	r3, #4
 8014206:	4619      	mov	r1, r3
 8014208:	4610      	mov	r0, r2
 801420a:	f7fd fe2a 	bl	8011e62 <vListInsert>
 801420e:	e016      	b.n	801423e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014210:	2300      	movs	r3, #0
 8014212:	9300      	str	r3, [sp, #0]
 8014214:	2300      	movs	r3, #0
 8014216:	693a      	ldr	r2, [r7, #16]
 8014218:	2100      	movs	r1, #0
 801421a:	68f8      	ldr	r0, [r7, #12]
 801421c:	f7ff fd60 	bl	8013ce0 <xTimerGenericCommand>
 8014220:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d10a      	bne.n	801423e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801422c:	f383 8811 	msr	BASEPRI, r3
 8014230:	f3bf 8f6f 	isb	sy
 8014234:	f3bf 8f4f 	dsb	sy
 8014238:	603b      	str	r3, [r7, #0]
}
 801423a:	bf00      	nop
 801423c:	e7fe      	b.n	801423c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801423e:	4b09      	ldr	r3, [pc, #36]	; (8014264 <prvSwitchTimerLists+0xc0>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d1b1      	bne.n	80141ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014248:	4b06      	ldr	r3, [pc, #24]	; (8014264 <prvSwitchTimerLists+0xc0>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801424e:	4b06      	ldr	r3, [pc, #24]	; (8014268 <prvSwitchTimerLists+0xc4>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	4a04      	ldr	r2, [pc, #16]	; (8014264 <prvSwitchTimerLists+0xc0>)
 8014254:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014256:	4a04      	ldr	r2, [pc, #16]	; (8014268 <prvSwitchTimerLists+0xc4>)
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	6013      	str	r3, [r2, #0]
}
 801425c:	bf00      	nop
 801425e:	3718      	adds	r7, #24
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}
 8014264:	200022a0 	.word	0x200022a0
 8014268:	200022a4 	.word	0x200022a4

0801426c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014272:	f000 f987 	bl	8014584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014276:	4b15      	ldr	r3, [pc, #84]	; (80142cc <prvCheckForValidListAndQueue+0x60>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d120      	bne.n	80142c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801427e:	4814      	ldr	r0, [pc, #80]	; (80142d0 <prvCheckForValidListAndQueue+0x64>)
 8014280:	f7fd fd9e 	bl	8011dc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014284:	4813      	ldr	r0, [pc, #76]	; (80142d4 <prvCheckForValidListAndQueue+0x68>)
 8014286:	f7fd fd9b 	bl	8011dc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801428a:	4b13      	ldr	r3, [pc, #76]	; (80142d8 <prvCheckForValidListAndQueue+0x6c>)
 801428c:	4a10      	ldr	r2, [pc, #64]	; (80142d0 <prvCheckForValidListAndQueue+0x64>)
 801428e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014290:	4b12      	ldr	r3, [pc, #72]	; (80142dc <prvCheckForValidListAndQueue+0x70>)
 8014292:	4a10      	ldr	r2, [pc, #64]	; (80142d4 <prvCheckForValidListAndQueue+0x68>)
 8014294:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014296:	2300      	movs	r3, #0
 8014298:	9300      	str	r3, [sp, #0]
 801429a:	4b11      	ldr	r3, [pc, #68]	; (80142e0 <prvCheckForValidListAndQueue+0x74>)
 801429c:	4a11      	ldr	r2, [pc, #68]	; (80142e4 <prvCheckForValidListAndQueue+0x78>)
 801429e:	2110      	movs	r1, #16
 80142a0:	200a      	movs	r0, #10
 80142a2:	f7fd fea9 	bl	8011ff8 <xQueueGenericCreateStatic>
 80142a6:	4603      	mov	r3, r0
 80142a8:	4a08      	ldr	r2, [pc, #32]	; (80142cc <prvCheckForValidListAndQueue+0x60>)
 80142aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80142ac:	4b07      	ldr	r3, [pc, #28]	; (80142cc <prvCheckForValidListAndQueue+0x60>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d005      	beq.n	80142c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80142b4:	4b05      	ldr	r3, [pc, #20]	; (80142cc <prvCheckForValidListAndQueue+0x60>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	490b      	ldr	r1, [pc, #44]	; (80142e8 <prvCheckForValidListAndQueue+0x7c>)
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7fe faf8 	bl	80128b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80142c0:	f000 f990 	bl	80145e4 <vPortExitCritical>
}
 80142c4:	bf00      	nop
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	200022a8 	.word	0x200022a8
 80142d0:	20002278 	.word	0x20002278
 80142d4:	2000228c 	.word	0x2000228c
 80142d8:	200022a0 	.word	0x200022a0
 80142dc:	200022a4 	.word	0x200022a4
 80142e0:	20002354 	.word	0x20002354
 80142e4:	200022b4 	.word	0x200022b4
 80142e8:	0801742c 	.word	0x0801742c

080142ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b08a      	sub	sp, #40	; 0x28
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	60b9      	str	r1, [r7, #8]
 80142f6:	607a      	str	r2, [r7, #4]
 80142f8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80142fa:	f06f 0301 	mvn.w	r3, #1
 80142fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801430c:	4b06      	ldr	r3, [pc, #24]	; (8014328 <xTimerPendFunctionCallFromISR+0x3c>)
 801430e:	6818      	ldr	r0, [r3, #0]
 8014310:	f107 0114 	add.w	r1, r7, #20
 8014314:	2300      	movs	r3, #0
 8014316:	683a      	ldr	r2, [r7, #0]
 8014318:	f7fe f83e 	bl	8012398 <xQueueGenericSendFromISR>
 801431c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014320:	4618      	mov	r0, r3
 8014322:	3728      	adds	r7, #40	; 0x28
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}
 8014328:	200022a8 	.word	0x200022a8

0801432c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801432c:	b480      	push	{r7}
 801432e:	b085      	sub	sp, #20
 8014330:	af00      	add	r7, sp, #0
 8014332:	60f8      	str	r0, [r7, #12]
 8014334:	60b9      	str	r1, [r7, #8]
 8014336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	3b04      	subs	r3, #4
 801433c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	3b04      	subs	r3, #4
 801434a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	f023 0201 	bic.w	r2, r3, #1
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	3b04      	subs	r3, #4
 801435a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801435c:	4a0c      	ldr	r2, [pc, #48]	; (8014390 <pxPortInitialiseStack+0x64>)
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	3b14      	subs	r3, #20
 8014366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014368:	687a      	ldr	r2, [r7, #4]
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	3b04      	subs	r3, #4
 8014372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	f06f 0202 	mvn.w	r2, #2
 801437a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	3b20      	subs	r3, #32
 8014380:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014382:	68fb      	ldr	r3, [r7, #12]
}
 8014384:	4618      	mov	r0, r3
 8014386:	3714      	adds	r7, #20
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr
 8014390:	08014395 	.word	0x08014395

08014394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014394:	b480      	push	{r7}
 8014396:	b085      	sub	sp, #20
 8014398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801439a:	2300      	movs	r3, #0
 801439c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801439e:	4b12      	ldr	r3, [pc, #72]	; (80143e8 <prvTaskExitError+0x54>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143a6:	d00a      	beq.n	80143be <prvTaskExitError+0x2a>
	__asm volatile
 80143a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ac:	f383 8811 	msr	BASEPRI, r3
 80143b0:	f3bf 8f6f 	isb	sy
 80143b4:	f3bf 8f4f 	dsb	sy
 80143b8:	60fb      	str	r3, [r7, #12]
}
 80143ba:	bf00      	nop
 80143bc:	e7fe      	b.n	80143bc <prvTaskExitError+0x28>
	__asm volatile
 80143be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c2:	f383 8811 	msr	BASEPRI, r3
 80143c6:	f3bf 8f6f 	isb	sy
 80143ca:	f3bf 8f4f 	dsb	sy
 80143ce:	60bb      	str	r3, [r7, #8]
}
 80143d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80143d2:	bf00      	nop
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d0fc      	beq.n	80143d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80143da:	bf00      	nop
 80143dc:	bf00      	nop
 80143de:	3714      	adds	r7, #20
 80143e0:	46bd      	mov	sp, r7
 80143e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e6:	4770      	bx	lr
 80143e8:	200000c8 	.word	0x200000c8
 80143ec:	00000000 	.word	0x00000000

080143f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80143f0:	4b07      	ldr	r3, [pc, #28]	; (8014410 <pxCurrentTCBConst2>)
 80143f2:	6819      	ldr	r1, [r3, #0]
 80143f4:	6808      	ldr	r0, [r1, #0]
 80143f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143fa:	f380 8809 	msr	PSP, r0
 80143fe:	f3bf 8f6f 	isb	sy
 8014402:	f04f 0000 	mov.w	r0, #0
 8014406:	f380 8811 	msr	BASEPRI, r0
 801440a:	4770      	bx	lr
 801440c:	f3af 8000 	nop.w

08014410 <pxCurrentTCBConst2>:
 8014410:	20002144 	.word	0x20002144
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014414:	bf00      	nop
 8014416:	bf00      	nop

08014418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014418:	4808      	ldr	r0, [pc, #32]	; (801443c <prvPortStartFirstTask+0x24>)
 801441a:	6800      	ldr	r0, [r0, #0]
 801441c:	6800      	ldr	r0, [r0, #0]
 801441e:	f380 8808 	msr	MSP, r0
 8014422:	f04f 0000 	mov.w	r0, #0
 8014426:	f380 8814 	msr	CONTROL, r0
 801442a:	b662      	cpsie	i
 801442c:	b661      	cpsie	f
 801442e:	f3bf 8f4f 	dsb	sy
 8014432:	f3bf 8f6f 	isb	sy
 8014436:	df00      	svc	0
 8014438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801443a:	bf00      	nop
 801443c:	e000ed08 	.word	0xe000ed08

08014440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b086      	sub	sp, #24
 8014444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014446:	4b46      	ldr	r3, [pc, #280]	; (8014560 <xPortStartScheduler+0x120>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	4a46      	ldr	r2, [pc, #280]	; (8014564 <xPortStartScheduler+0x124>)
 801444c:	4293      	cmp	r3, r2
 801444e:	d10a      	bne.n	8014466 <xPortStartScheduler+0x26>
	__asm volatile
 8014450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014454:	f383 8811 	msr	BASEPRI, r3
 8014458:	f3bf 8f6f 	isb	sy
 801445c:	f3bf 8f4f 	dsb	sy
 8014460:	613b      	str	r3, [r7, #16]
}
 8014462:	bf00      	nop
 8014464:	e7fe      	b.n	8014464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014466:	4b3e      	ldr	r3, [pc, #248]	; (8014560 <xPortStartScheduler+0x120>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	4a3f      	ldr	r2, [pc, #252]	; (8014568 <xPortStartScheduler+0x128>)
 801446c:	4293      	cmp	r3, r2
 801446e:	d10a      	bne.n	8014486 <xPortStartScheduler+0x46>
	__asm volatile
 8014470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014474:	f383 8811 	msr	BASEPRI, r3
 8014478:	f3bf 8f6f 	isb	sy
 801447c:	f3bf 8f4f 	dsb	sy
 8014480:	60fb      	str	r3, [r7, #12]
}
 8014482:	bf00      	nop
 8014484:	e7fe      	b.n	8014484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014486:	4b39      	ldr	r3, [pc, #228]	; (801456c <xPortStartScheduler+0x12c>)
 8014488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	b2db      	uxtb	r3, r3
 8014490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	22ff      	movs	r2, #255	; 0xff
 8014496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	b2db      	uxtb	r3, r3
 801449e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80144a0:	78fb      	ldrb	r3, [r7, #3]
 80144a2:	b2db      	uxtb	r3, r3
 80144a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80144a8:	b2da      	uxtb	r2, r3
 80144aa:	4b31      	ldr	r3, [pc, #196]	; (8014570 <xPortStartScheduler+0x130>)
 80144ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80144ae:	4b31      	ldr	r3, [pc, #196]	; (8014574 <xPortStartScheduler+0x134>)
 80144b0:	2207      	movs	r2, #7
 80144b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80144b4:	e009      	b.n	80144ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80144b6:	4b2f      	ldr	r3, [pc, #188]	; (8014574 <xPortStartScheduler+0x134>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	3b01      	subs	r3, #1
 80144bc:	4a2d      	ldr	r2, [pc, #180]	; (8014574 <xPortStartScheduler+0x134>)
 80144be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80144c0:	78fb      	ldrb	r3, [r7, #3]
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	005b      	lsls	r3, r3, #1
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80144ca:	78fb      	ldrb	r3, [r7, #3]
 80144cc:	b2db      	uxtb	r3, r3
 80144ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144d2:	2b80      	cmp	r3, #128	; 0x80
 80144d4:	d0ef      	beq.n	80144b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80144d6:	4b27      	ldr	r3, [pc, #156]	; (8014574 <xPortStartScheduler+0x134>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	f1c3 0307 	rsb	r3, r3, #7
 80144de:	2b04      	cmp	r3, #4
 80144e0:	d00a      	beq.n	80144f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80144e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e6:	f383 8811 	msr	BASEPRI, r3
 80144ea:	f3bf 8f6f 	isb	sy
 80144ee:	f3bf 8f4f 	dsb	sy
 80144f2:	60bb      	str	r3, [r7, #8]
}
 80144f4:	bf00      	nop
 80144f6:	e7fe      	b.n	80144f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80144f8:	4b1e      	ldr	r3, [pc, #120]	; (8014574 <xPortStartScheduler+0x134>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	021b      	lsls	r3, r3, #8
 80144fe:	4a1d      	ldr	r2, [pc, #116]	; (8014574 <xPortStartScheduler+0x134>)
 8014500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014502:	4b1c      	ldr	r3, [pc, #112]	; (8014574 <xPortStartScheduler+0x134>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801450a:	4a1a      	ldr	r2, [pc, #104]	; (8014574 <xPortStartScheduler+0x134>)
 801450c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	b2da      	uxtb	r2, r3
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014516:	4b18      	ldr	r3, [pc, #96]	; (8014578 <xPortStartScheduler+0x138>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4a17      	ldr	r2, [pc, #92]	; (8014578 <xPortStartScheduler+0x138>)
 801451c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014522:	4b15      	ldr	r3, [pc, #84]	; (8014578 <xPortStartScheduler+0x138>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	4a14      	ldr	r2, [pc, #80]	; (8014578 <xPortStartScheduler+0x138>)
 8014528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801452c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801452e:	f000 f8dd 	bl	80146ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014532:	4b12      	ldr	r3, [pc, #72]	; (801457c <xPortStartScheduler+0x13c>)
 8014534:	2200      	movs	r2, #0
 8014536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014538:	f000 f8fc 	bl	8014734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801453c:	4b10      	ldr	r3, [pc, #64]	; (8014580 <xPortStartScheduler+0x140>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	4a0f      	ldr	r2, [pc, #60]	; (8014580 <xPortStartScheduler+0x140>)
 8014542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014548:	f7ff ff66 	bl	8014418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801454c:	f7fe fe52 	bl	80131f4 <vTaskSwitchContext>
	prvTaskExitError();
 8014550:	f7ff ff20 	bl	8014394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014554:	2300      	movs	r3, #0
}
 8014556:	4618      	mov	r0, r3
 8014558:	3718      	adds	r7, #24
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	e000ed00 	.word	0xe000ed00
 8014564:	410fc271 	.word	0x410fc271
 8014568:	410fc270 	.word	0x410fc270
 801456c:	e000e400 	.word	0xe000e400
 8014570:	2000239c 	.word	0x2000239c
 8014574:	200023a0 	.word	0x200023a0
 8014578:	e000ed20 	.word	0xe000ed20
 801457c:	200000c8 	.word	0x200000c8
 8014580:	e000ef34 	.word	0xe000ef34

08014584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014584:	b480      	push	{r7}
 8014586:	b083      	sub	sp, #12
 8014588:	af00      	add	r7, sp, #0
	__asm volatile
 801458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801458e:	f383 8811 	msr	BASEPRI, r3
 8014592:	f3bf 8f6f 	isb	sy
 8014596:	f3bf 8f4f 	dsb	sy
 801459a:	607b      	str	r3, [r7, #4]
}
 801459c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801459e:	4b0f      	ldr	r3, [pc, #60]	; (80145dc <vPortEnterCritical+0x58>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	3301      	adds	r3, #1
 80145a4:	4a0d      	ldr	r2, [pc, #52]	; (80145dc <vPortEnterCritical+0x58>)
 80145a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80145a8:	4b0c      	ldr	r3, [pc, #48]	; (80145dc <vPortEnterCritical+0x58>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	2b01      	cmp	r3, #1
 80145ae:	d10f      	bne.n	80145d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80145b0:	4b0b      	ldr	r3, [pc, #44]	; (80145e0 <vPortEnterCritical+0x5c>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	b2db      	uxtb	r3, r3
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d00a      	beq.n	80145d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80145ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145be:	f383 8811 	msr	BASEPRI, r3
 80145c2:	f3bf 8f6f 	isb	sy
 80145c6:	f3bf 8f4f 	dsb	sy
 80145ca:	603b      	str	r3, [r7, #0]
}
 80145cc:	bf00      	nop
 80145ce:	e7fe      	b.n	80145ce <vPortEnterCritical+0x4a>
	}
}
 80145d0:	bf00      	nop
 80145d2:	370c      	adds	r7, #12
 80145d4:	46bd      	mov	sp, r7
 80145d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145da:	4770      	bx	lr
 80145dc:	200000c8 	.word	0x200000c8
 80145e0:	e000ed04 	.word	0xe000ed04

080145e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80145e4:	b480      	push	{r7}
 80145e6:	b083      	sub	sp, #12
 80145e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80145ea:	4b12      	ldr	r3, [pc, #72]	; (8014634 <vPortExitCritical+0x50>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d10a      	bne.n	8014608 <vPortExitCritical+0x24>
	__asm volatile
 80145f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f6:	f383 8811 	msr	BASEPRI, r3
 80145fa:	f3bf 8f6f 	isb	sy
 80145fe:	f3bf 8f4f 	dsb	sy
 8014602:	607b      	str	r3, [r7, #4]
}
 8014604:	bf00      	nop
 8014606:	e7fe      	b.n	8014606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014608:	4b0a      	ldr	r3, [pc, #40]	; (8014634 <vPortExitCritical+0x50>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	3b01      	subs	r3, #1
 801460e:	4a09      	ldr	r2, [pc, #36]	; (8014634 <vPortExitCritical+0x50>)
 8014610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014612:	4b08      	ldr	r3, [pc, #32]	; (8014634 <vPortExitCritical+0x50>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d105      	bne.n	8014626 <vPortExitCritical+0x42>
 801461a:	2300      	movs	r3, #0
 801461c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	f383 8811 	msr	BASEPRI, r3
}
 8014624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014626:	bf00      	nop
 8014628:	370c      	adds	r7, #12
 801462a:	46bd      	mov	sp, r7
 801462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014630:	4770      	bx	lr
 8014632:	bf00      	nop
 8014634:	200000c8 	.word	0x200000c8
	...

08014640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014640:	f3ef 8009 	mrs	r0, PSP
 8014644:	f3bf 8f6f 	isb	sy
 8014648:	4b15      	ldr	r3, [pc, #84]	; (80146a0 <pxCurrentTCBConst>)
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	f01e 0f10 	tst.w	lr, #16
 8014650:	bf08      	it	eq
 8014652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801465a:	6010      	str	r0, [r2, #0]
 801465c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014664:	f380 8811 	msr	BASEPRI, r0
 8014668:	f3bf 8f4f 	dsb	sy
 801466c:	f3bf 8f6f 	isb	sy
 8014670:	f7fe fdc0 	bl	80131f4 <vTaskSwitchContext>
 8014674:	f04f 0000 	mov.w	r0, #0
 8014678:	f380 8811 	msr	BASEPRI, r0
 801467c:	bc09      	pop	{r0, r3}
 801467e:	6819      	ldr	r1, [r3, #0]
 8014680:	6808      	ldr	r0, [r1, #0]
 8014682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014686:	f01e 0f10 	tst.w	lr, #16
 801468a:	bf08      	it	eq
 801468c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014690:	f380 8809 	msr	PSP, r0
 8014694:	f3bf 8f6f 	isb	sy
 8014698:	4770      	bx	lr
 801469a:	bf00      	nop
 801469c:	f3af 8000 	nop.w

080146a0 <pxCurrentTCBConst>:
 80146a0:	20002144 	.word	0x20002144
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80146a4:	bf00      	nop
 80146a6:	bf00      	nop

080146a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
	__asm volatile
 80146ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b2:	f383 8811 	msr	BASEPRI, r3
 80146b6:	f3bf 8f6f 	isb	sy
 80146ba:	f3bf 8f4f 	dsb	sy
 80146be:	607b      	str	r3, [r7, #4]
}
 80146c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80146c2:	f7fe fcdf 	bl	8013084 <xTaskIncrementTick>
 80146c6:	4603      	mov	r3, r0
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d003      	beq.n	80146d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80146cc:	4b06      	ldr	r3, [pc, #24]	; (80146e8 <SysTick_Handler+0x40>)
 80146ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146d2:	601a      	str	r2, [r3, #0]
 80146d4:	2300      	movs	r3, #0
 80146d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	f383 8811 	msr	BASEPRI, r3
}
 80146de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80146e0:	bf00      	nop
 80146e2:	3708      	adds	r7, #8
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	e000ed04 	.word	0xe000ed04

080146ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80146ec:	b480      	push	{r7}
 80146ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80146f0:	4b0b      	ldr	r3, [pc, #44]	; (8014720 <vPortSetupTimerInterrupt+0x34>)
 80146f2:	2200      	movs	r2, #0
 80146f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80146f6:	4b0b      	ldr	r3, [pc, #44]	; (8014724 <vPortSetupTimerInterrupt+0x38>)
 80146f8:	2200      	movs	r2, #0
 80146fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80146fc:	4b0a      	ldr	r3, [pc, #40]	; (8014728 <vPortSetupTimerInterrupt+0x3c>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	4a0a      	ldr	r2, [pc, #40]	; (801472c <vPortSetupTimerInterrupt+0x40>)
 8014702:	fba2 2303 	umull	r2, r3, r2, r3
 8014706:	099b      	lsrs	r3, r3, #6
 8014708:	4a09      	ldr	r2, [pc, #36]	; (8014730 <vPortSetupTimerInterrupt+0x44>)
 801470a:	3b01      	subs	r3, #1
 801470c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801470e:	4b04      	ldr	r3, [pc, #16]	; (8014720 <vPortSetupTimerInterrupt+0x34>)
 8014710:	2207      	movs	r2, #7
 8014712:	601a      	str	r2, [r3, #0]
}
 8014714:	bf00      	nop
 8014716:	46bd      	mov	sp, r7
 8014718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471c:	4770      	bx	lr
 801471e:	bf00      	nop
 8014720:	e000e010 	.word	0xe000e010
 8014724:	e000e018 	.word	0xe000e018
 8014728:	20000000 	.word	0x20000000
 801472c:	10624dd3 	.word	0x10624dd3
 8014730:	e000e014 	.word	0xe000e014

08014734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014744 <vPortEnableVFP+0x10>
 8014738:	6801      	ldr	r1, [r0, #0]
 801473a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801473e:	6001      	str	r1, [r0, #0]
 8014740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014742:	bf00      	nop
 8014744:	e000ed88 	.word	0xe000ed88

08014748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014748:	b480      	push	{r7}
 801474a:	b085      	sub	sp, #20
 801474c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801474e:	f3ef 8305 	mrs	r3, IPSR
 8014752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	2b0f      	cmp	r3, #15
 8014758:	d914      	bls.n	8014784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801475a:	4a17      	ldr	r2, [pc, #92]	; (80147b8 <vPortValidateInterruptPriority+0x70>)
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	4413      	add	r3, r2
 8014760:	781b      	ldrb	r3, [r3, #0]
 8014762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014764:	4b15      	ldr	r3, [pc, #84]	; (80147bc <vPortValidateInterruptPriority+0x74>)
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	7afa      	ldrb	r2, [r7, #11]
 801476a:	429a      	cmp	r2, r3
 801476c:	d20a      	bcs.n	8014784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014772:	f383 8811 	msr	BASEPRI, r3
 8014776:	f3bf 8f6f 	isb	sy
 801477a:	f3bf 8f4f 	dsb	sy
 801477e:	607b      	str	r3, [r7, #4]
}
 8014780:	bf00      	nop
 8014782:	e7fe      	b.n	8014782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014784:	4b0e      	ldr	r3, [pc, #56]	; (80147c0 <vPortValidateInterruptPriority+0x78>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801478c:	4b0d      	ldr	r3, [pc, #52]	; (80147c4 <vPortValidateInterruptPriority+0x7c>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	429a      	cmp	r2, r3
 8014792:	d90a      	bls.n	80147aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014798:	f383 8811 	msr	BASEPRI, r3
 801479c:	f3bf 8f6f 	isb	sy
 80147a0:	f3bf 8f4f 	dsb	sy
 80147a4:	603b      	str	r3, [r7, #0]
}
 80147a6:	bf00      	nop
 80147a8:	e7fe      	b.n	80147a8 <vPortValidateInterruptPriority+0x60>
	}
 80147aa:	bf00      	nop
 80147ac:	3714      	adds	r7, #20
 80147ae:	46bd      	mov	sp, r7
 80147b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b4:	4770      	bx	lr
 80147b6:	bf00      	nop
 80147b8:	e000e3f0 	.word	0xe000e3f0
 80147bc:	2000239c 	.word	0x2000239c
 80147c0:	e000ed0c 	.word	0xe000ed0c
 80147c4:	200023a0 	.word	0x200023a0

080147c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b08a      	sub	sp, #40	; 0x28
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80147d0:	2300      	movs	r3, #0
 80147d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80147d4:	f7fe fb9c 	bl	8012f10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80147d8:	4b5b      	ldr	r3, [pc, #364]	; (8014948 <pvPortMalloc+0x180>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d101      	bne.n	80147e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80147e0:	f000 f920 	bl	8014a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80147e4:	4b59      	ldr	r3, [pc, #356]	; (801494c <pvPortMalloc+0x184>)
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	4013      	ands	r3, r2
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	f040 8093 	bne.w	8014918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d01d      	beq.n	8014834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80147f8:	2208      	movs	r2, #8
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	4413      	add	r3, r2
 80147fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f003 0307 	and.w	r3, r3, #7
 8014806:	2b00      	cmp	r3, #0
 8014808:	d014      	beq.n	8014834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f023 0307 	bic.w	r3, r3, #7
 8014810:	3308      	adds	r3, #8
 8014812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f003 0307 	and.w	r3, r3, #7
 801481a:	2b00      	cmp	r3, #0
 801481c:	d00a      	beq.n	8014834 <pvPortMalloc+0x6c>
	__asm volatile
 801481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014822:	f383 8811 	msr	BASEPRI, r3
 8014826:	f3bf 8f6f 	isb	sy
 801482a:	f3bf 8f4f 	dsb	sy
 801482e:	617b      	str	r3, [r7, #20]
}
 8014830:	bf00      	nop
 8014832:	e7fe      	b.n	8014832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d06e      	beq.n	8014918 <pvPortMalloc+0x150>
 801483a:	4b45      	ldr	r3, [pc, #276]	; (8014950 <pvPortMalloc+0x188>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	687a      	ldr	r2, [r7, #4]
 8014840:	429a      	cmp	r2, r3
 8014842:	d869      	bhi.n	8014918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014844:	4b43      	ldr	r3, [pc, #268]	; (8014954 <pvPortMalloc+0x18c>)
 8014846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014848:	4b42      	ldr	r3, [pc, #264]	; (8014954 <pvPortMalloc+0x18c>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801484e:	e004      	b.n	801485a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485c:	685b      	ldr	r3, [r3, #4]
 801485e:	687a      	ldr	r2, [r7, #4]
 8014860:	429a      	cmp	r2, r3
 8014862:	d903      	bls.n	801486c <pvPortMalloc+0xa4>
 8014864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d1f1      	bne.n	8014850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801486c:	4b36      	ldr	r3, [pc, #216]	; (8014948 <pvPortMalloc+0x180>)
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014872:	429a      	cmp	r2, r3
 8014874:	d050      	beq.n	8014918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014876:	6a3b      	ldr	r3, [r7, #32]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2208      	movs	r2, #8
 801487c:	4413      	add	r3, r2
 801487e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014882:	681a      	ldr	r2, [r3, #0]
 8014884:	6a3b      	ldr	r3, [r7, #32]
 8014886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488a:	685a      	ldr	r2, [r3, #4]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	1ad2      	subs	r2, r2, r3
 8014890:	2308      	movs	r3, #8
 8014892:	005b      	lsls	r3, r3, #1
 8014894:	429a      	cmp	r2, r3
 8014896:	d91f      	bls.n	80148d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	4413      	add	r3, r2
 801489e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80148a0:	69bb      	ldr	r3, [r7, #24]
 80148a2:	f003 0307 	and.w	r3, r3, #7
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d00a      	beq.n	80148c0 <pvPortMalloc+0xf8>
	__asm volatile
 80148aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ae:	f383 8811 	msr	BASEPRI, r3
 80148b2:	f3bf 8f6f 	isb	sy
 80148b6:	f3bf 8f4f 	dsb	sy
 80148ba:	613b      	str	r3, [r7, #16]
}
 80148bc:	bf00      	nop
 80148be:	e7fe      	b.n	80148be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80148c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c2:	685a      	ldr	r2, [r3, #4]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	1ad2      	subs	r2, r2, r3
 80148c8:	69bb      	ldr	r3, [r7, #24]
 80148ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80148cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ce:	687a      	ldr	r2, [r7, #4]
 80148d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80148d2:	69b8      	ldr	r0, [r7, #24]
 80148d4:	f000 f908 	bl	8014ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80148d8:	4b1d      	ldr	r3, [pc, #116]	; (8014950 <pvPortMalloc+0x188>)
 80148da:	681a      	ldr	r2, [r3, #0]
 80148dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	1ad3      	subs	r3, r2, r3
 80148e2:	4a1b      	ldr	r2, [pc, #108]	; (8014950 <pvPortMalloc+0x188>)
 80148e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80148e6:	4b1a      	ldr	r3, [pc, #104]	; (8014950 <pvPortMalloc+0x188>)
 80148e8:	681a      	ldr	r2, [r3, #0]
 80148ea:	4b1b      	ldr	r3, [pc, #108]	; (8014958 <pvPortMalloc+0x190>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d203      	bcs.n	80148fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80148f2:	4b17      	ldr	r3, [pc, #92]	; (8014950 <pvPortMalloc+0x188>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	4a18      	ldr	r2, [pc, #96]	; (8014958 <pvPortMalloc+0x190>)
 80148f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80148fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fc:	685a      	ldr	r2, [r3, #4]
 80148fe:	4b13      	ldr	r3, [pc, #76]	; (801494c <pvPortMalloc+0x184>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	431a      	orrs	r2, r3
 8014904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801490a:	2200      	movs	r2, #0
 801490c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801490e:	4b13      	ldr	r3, [pc, #76]	; (801495c <pvPortMalloc+0x194>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	3301      	adds	r3, #1
 8014914:	4a11      	ldr	r2, [pc, #68]	; (801495c <pvPortMalloc+0x194>)
 8014916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014918:	f7fe fb08 	bl	8012f2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801491c:	69fb      	ldr	r3, [r7, #28]
 801491e:	f003 0307 	and.w	r3, r3, #7
 8014922:	2b00      	cmp	r3, #0
 8014924:	d00a      	beq.n	801493c <pvPortMalloc+0x174>
	__asm volatile
 8014926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801492a:	f383 8811 	msr	BASEPRI, r3
 801492e:	f3bf 8f6f 	isb	sy
 8014932:	f3bf 8f4f 	dsb	sy
 8014936:	60fb      	str	r3, [r7, #12]
}
 8014938:	bf00      	nop
 801493a:	e7fe      	b.n	801493a <pvPortMalloc+0x172>
	return pvReturn;
 801493c:	69fb      	ldr	r3, [r7, #28]
}
 801493e:	4618      	mov	r0, r3
 8014940:	3728      	adds	r7, #40	; 0x28
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
 8014946:	bf00      	nop
 8014948:	20005fac 	.word	0x20005fac
 801494c:	20005fc0 	.word	0x20005fc0
 8014950:	20005fb0 	.word	0x20005fb0
 8014954:	20005fa4 	.word	0x20005fa4
 8014958:	20005fb4 	.word	0x20005fb4
 801495c:	20005fb8 	.word	0x20005fb8

08014960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b086      	sub	sp, #24
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d04d      	beq.n	8014a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014972:	2308      	movs	r3, #8
 8014974:	425b      	negs	r3, r3
 8014976:	697a      	ldr	r2, [r7, #20]
 8014978:	4413      	add	r3, r2
 801497a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	685a      	ldr	r2, [r3, #4]
 8014984:	4b24      	ldr	r3, [pc, #144]	; (8014a18 <vPortFree+0xb8>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4013      	ands	r3, r2
 801498a:	2b00      	cmp	r3, #0
 801498c:	d10a      	bne.n	80149a4 <vPortFree+0x44>
	__asm volatile
 801498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014992:	f383 8811 	msr	BASEPRI, r3
 8014996:	f3bf 8f6f 	isb	sy
 801499a:	f3bf 8f4f 	dsb	sy
 801499e:	60fb      	str	r3, [r7, #12]
}
 80149a0:	bf00      	nop
 80149a2:	e7fe      	b.n	80149a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d00a      	beq.n	80149c2 <vPortFree+0x62>
	__asm volatile
 80149ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b0:	f383 8811 	msr	BASEPRI, r3
 80149b4:	f3bf 8f6f 	isb	sy
 80149b8:	f3bf 8f4f 	dsb	sy
 80149bc:	60bb      	str	r3, [r7, #8]
}
 80149be:	bf00      	nop
 80149c0:	e7fe      	b.n	80149c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	685a      	ldr	r2, [r3, #4]
 80149c6:	4b14      	ldr	r3, [pc, #80]	; (8014a18 <vPortFree+0xb8>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	4013      	ands	r3, r2
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d01e      	beq.n	8014a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80149d0:	693b      	ldr	r3, [r7, #16]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d11a      	bne.n	8014a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	685a      	ldr	r2, [r3, #4]
 80149dc:	4b0e      	ldr	r3, [pc, #56]	; (8014a18 <vPortFree+0xb8>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	43db      	mvns	r3, r3
 80149e2:	401a      	ands	r2, r3
 80149e4:	693b      	ldr	r3, [r7, #16]
 80149e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80149e8:	f7fe fa92 	bl	8012f10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80149ec:	693b      	ldr	r3, [r7, #16]
 80149ee:	685a      	ldr	r2, [r3, #4]
 80149f0:	4b0a      	ldr	r3, [pc, #40]	; (8014a1c <vPortFree+0xbc>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	4413      	add	r3, r2
 80149f6:	4a09      	ldr	r2, [pc, #36]	; (8014a1c <vPortFree+0xbc>)
 80149f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80149fa:	6938      	ldr	r0, [r7, #16]
 80149fc:	f000 f874 	bl	8014ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014a00:	4b07      	ldr	r3, [pc, #28]	; (8014a20 <vPortFree+0xc0>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	3301      	adds	r3, #1
 8014a06:	4a06      	ldr	r2, [pc, #24]	; (8014a20 <vPortFree+0xc0>)
 8014a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014a0a:	f7fe fa8f 	bl	8012f2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014a0e:	bf00      	nop
 8014a10:	3718      	adds	r7, #24
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}
 8014a16:	bf00      	nop
 8014a18:	20005fc0 	.word	0x20005fc0
 8014a1c:	20005fb0 	.word	0x20005fb0
 8014a20:	20005fbc 	.word	0x20005fbc

08014a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014a24:	b480      	push	{r7}
 8014a26:	b085      	sub	sp, #20
 8014a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014a2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014a30:	4b27      	ldr	r3, [pc, #156]	; (8014ad0 <prvHeapInit+0xac>)
 8014a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	f003 0307 	and.w	r3, r3, #7
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d00c      	beq.n	8014a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	3307      	adds	r3, #7
 8014a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	f023 0307 	bic.w	r3, r3, #7
 8014a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014a4c:	68ba      	ldr	r2, [r7, #8]
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	4a1f      	ldr	r2, [pc, #124]	; (8014ad0 <prvHeapInit+0xac>)
 8014a54:	4413      	add	r3, r2
 8014a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014a5c:	4a1d      	ldr	r2, [pc, #116]	; (8014ad4 <prvHeapInit+0xb0>)
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014a62:	4b1c      	ldr	r3, [pc, #112]	; (8014ad4 <prvHeapInit+0xb0>)
 8014a64:	2200      	movs	r2, #0
 8014a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	68ba      	ldr	r2, [r7, #8]
 8014a6c:	4413      	add	r3, r2
 8014a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014a70:	2208      	movs	r2, #8
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	1a9b      	subs	r3, r3, r2
 8014a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	f023 0307 	bic.w	r3, r3, #7
 8014a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	4a15      	ldr	r2, [pc, #84]	; (8014ad8 <prvHeapInit+0xb4>)
 8014a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014a86:	4b14      	ldr	r3, [pc, #80]	; (8014ad8 <prvHeapInit+0xb4>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014a8e:	4b12      	ldr	r3, [pc, #72]	; (8014ad8 <prvHeapInit+0xb4>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2200      	movs	r2, #0
 8014a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	68fa      	ldr	r2, [r7, #12]
 8014a9e:	1ad2      	subs	r2, r2, r3
 8014aa0:	683b      	ldr	r3, [r7, #0]
 8014aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014aa4:	4b0c      	ldr	r3, [pc, #48]	; (8014ad8 <prvHeapInit+0xb4>)
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	685b      	ldr	r3, [r3, #4]
 8014ab0:	4a0a      	ldr	r2, [pc, #40]	; (8014adc <prvHeapInit+0xb8>)
 8014ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	685b      	ldr	r3, [r3, #4]
 8014ab8:	4a09      	ldr	r2, [pc, #36]	; (8014ae0 <prvHeapInit+0xbc>)
 8014aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014abc:	4b09      	ldr	r3, [pc, #36]	; (8014ae4 <prvHeapInit+0xc0>)
 8014abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014ac2:	601a      	str	r2, [r3, #0]
}
 8014ac4:	bf00      	nop
 8014ac6:	3714      	adds	r7, #20
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ace:	4770      	bx	lr
 8014ad0:	200023a4 	.word	0x200023a4
 8014ad4:	20005fa4 	.word	0x20005fa4
 8014ad8:	20005fac 	.word	0x20005fac
 8014adc:	20005fb4 	.word	0x20005fb4
 8014ae0:	20005fb0 	.word	0x20005fb0
 8014ae4:	20005fc0 	.word	0x20005fc0

08014ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b085      	sub	sp, #20
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014af0:	4b28      	ldr	r3, [pc, #160]	; (8014b94 <prvInsertBlockIntoFreeList+0xac>)
 8014af2:	60fb      	str	r3, [r7, #12]
 8014af4:	e002      	b.n	8014afc <prvInsertBlockIntoFreeList+0x14>
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	60fb      	str	r3, [r7, #12]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	687a      	ldr	r2, [r7, #4]
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d8f7      	bhi.n	8014af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	68ba      	ldr	r2, [r7, #8]
 8014b10:	4413      	add	r3, r2
 8014b12:	687a      	ldr	r2, [r7, #4]
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d108      	bne.n	8014b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	685a      	ldr	r2, [r3, #4]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	685b      	ldr	r3, [r3, #4]
 8014b20:	441a      	add	r2, r3
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	68ba      	ldr	r2, [r7, #8]
 8014b34:	441a      	add	r2, r3
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d118      	bne.n	8014b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	681a      	ldr	r2, [r3, #0]
 8014b42:	4b15      	ldr	r3, [pc, #84]	; (8014b98 <prvInsertBlockIntoFreeList+0xb0>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d00d      	beq.n	8014b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	685a      	ldr	r2, [r3, #4]
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	685b      	ldr	r3, [r3, #4]
 8014b54:	441a      	add	r2, r3
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	601a      	str	r2, [r3, #0]
 8014b64:	e008      	b.n	8014b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014b66:	4b0c      	ldr	r3, [pc, #48]	; (8014b98 <prvInsertBlockIntoFreeList+0xb0>)
 8014b68:	681a      	ldr	r2, [r3, #0]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	601a      	str	r2, [r3, #0]
 8014b6e:	e003      	b.n	8014b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	681a      	ldr	r2, [r3, #0]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014b78:	68fa      	ldr	r2, [r7, #12]
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d002      	beq.n	8014b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014b86:	bf00      	nop
 8014b88:	3714      	adds	r7, #20
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b90:	4770      	bx	lr
 8014b92:	bf00      	nop
 8014b94:	20005fa4 	.word	0x20005fa4
 8014b98:	20005fac 	.word	0x20005fac

08014b9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	4912      	ldr	r1, [pc, #72]	; (8014bec <MX_USB_DEVICE_Init+0x50>)
 8014ba4:	4812      	ldr	r0, [pc, #72]	; (8014bf0 <MX_USB_DEVICE_Init+0x54>)
 8014ba6:	f7fb fb65 	bl	8010274 <USBD_Init>
 8014baa:	4603      	mov	r3, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d001      	beq.n	8014bb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014bb0:	f7ed fd00 	bl	80025b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014bb4:	490f      	ldr	r1, [pc, #60]	; (8014bf4 <MX_USB_DEVICE_Init+0x58>)
 8014bb6:	480e      	ldr	r0, [pc, #56]	; (8014bf0 <MX_USB_DEVICE_Init+0x54>)
 8014bb8:	f7fb fb8c 	bl	80102d4 <USBD_RegisterClass>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d001      	beq.n	8014bc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014bc2:	f7ed fcf7 	bl	80025b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014bc6:	490c      	ldr	r1, [pc, #48]	; (8014bf8 <MX_USB_DEVICE_Init+0x5c>)
 8014bc8:	4809      	ldr	r0, [pc, #36]	; (8014bf0 <MX_USB_DEVICE_Init+0x54>)
 8014bca:	f7fb fac3 	bl	8010154 <USBD_CDC_RegisterInterface>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d001      	beq.n	8014bd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014bd4:	f7ed fcee 	bl	80025b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014bd8:	4805      	ldr	r0, [pc, #20]	; (8014bf0 <MX_USB_DEVICE_Init+0x54>)
 8014bda:	f7fb fbb1 	bl	8010340 <USBD_Start>
 8014bde:	4603      	mov	r3, r0
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d001      	beq.n	8014be8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014be4:	f7ed fce6 	bl	80025b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014be8:	bf00      	nop
 8014bea:	bd80      	pop	{r7, pc}
 8014bec:	200000e0 	.word	0x200000e0
 8014bf0:	20005fc4 	.word	0x20005fc4
 8014bf4:	20000048 	.word	0x20000048
 8014bf8:	200000cc 	.word	0x200000cc

08014bfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014c00:	2200      	movs	r2, #0
 8014c02:	4905      	ldr	r1, [pc, #20]	; (8014c18 <CDC_Init_FS+0x1c>)
 8014c04:	4805      	ldr	r0, [pc, #20]	; (8014c1c <CDC_Init_FS+0x20>)
 8014c06:	f7fb fabf 	bl	8010188 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014c0a:	4905      	ldr	r1, [pc, #20]	; (8014c20 <CDC_Init_FS+0x24>)
 8014c0c:	4803      	ldr	r0, [pc, #12]	; (8014c1c <CDC_Init_FS+0x20>)
 8014c0e:	f7fb fadd 	bl	80101cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014c12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	20006aa0 	.word	0x20006aa0
 8014c1c:	20005fc4 	.word	0x20005fc4
 8014c20:	200062a0 	.word	0x200062a0

08014c24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014c24:	b480      	push	{r7}
 8014c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b083      	sub	sp, #12
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	6039      	str	r1, [r7, #0]
 8014c3e:	71fb      	strb	r3, [r7, #7]
 8014c40:	4613      	mov	r3, r2
 8014c42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014c44:	79fb      	ldrb	r3, [r7, #7]
 8014c46:	2b23      	cmp	r3, #35	; 0x23
 8014c48:	d84a      	bhi.n	8014ce0 <CDC_Control_FS+0xac>
 8014c4a:	a201      	add	r2, pc, #4	; (adr r2, 8014c50 <CDC_Control_FS+0x1c>)
 8014c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c50:	08014ce1 	.word	0x08014ce1
 8014c54:	08014ce1 	.word	0x08014ce1
 8014c58:	08014ce1 	.word	0x08014ce1
 8014c5c:	08014ce1 	.word	0x08014ce1
 8014c60:	08014ce1 	.word	0x08014ce1
 8014c64:	08014ce1 	.word	0x08014ce1
 8014c68:	08014ce1 	.word	0x08014ce1
 8014c6c:	08014ce1 	.word	0x08014ce1
 8014c70:	08014ce1 	.word	0x08014ce1
 8014c74:	08014ce1 	.word	0x08014ce1
 8014c78:	08014ce1 	.word	0x08014ce1
 8014c7c:	08014ce1 	.word	0x08014ce1
 8014c80:	08014ce1 	.word	0x08014ce1
 8014c84:	08014ce1 	.word	0x08014ce1
 8014c88:	08014ce1 	.word	0x08014ce1
 8014c8c:	08014ce1 	.word	0x08014ce1
 8014c90:	08014ce1 	.word	0x08014ce1
 8014c94:	08014ce1 	.word	0x08014ce1
 8014c98:	08014ce1 	.word	0x08014ce1
 8014c9c:	08014ce1 	.word	0x08014ce1
 8014ca0:	08014ce1 	.word	0x08014ce1
 8014ca4:	08014ce1 	.word	0x08014ce1
 8014ca8:	08014ce1 	.word	0x08014ce1
 8014cac:	08014ce1 	.word	0x08014ce1
 8014cb0:	08014ce1 	.word	0x08014ce1
 8014cb4:	08014ce1 	.word	0x08014ce1
 8014cb8:	08014ce1 	.word	0x08014ce1
 8014cbc:	08014ce1 	.word	0x08014ce1
 8014cc0:	08014ce1 	.word	0x08014ce1
 8014cc4:	08014ce1 	.word	0x08014ce1
 8014cc8:	08014ce1 	.word	0x08014ce1
 8014ccc:	08014ce1 	.word	0x08014ce1
 8014cd0:	08014ce1 	.word	0x08014ce1
 8014cd4:	08014ce1 	.word	0x08014ce1
 8014cd8:	08014ce1 	.word	0x08014ce1
 8014cdc:	08014ce1 	.word	0x08014ce1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014ce0:	bf00      	nop
  }

  return (USBD_OK);
 8014ce2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	370c      	adds	r7, #12
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr

08014cf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014cfa:	6879      	ldr	r1, [r7, #4]
 8014cfc:	4805      	ldr	r0, [pc, #20]	; (8014d14 <CDC_Receive_FS+0x24>)
 8014cfe:	f7fb fa65 	bl	80101cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014d02:	4804      	ldr	r0, [pc, #16]	; (8014d14 <CDC_Receive_FS+0x24>)
 8014d04:	f7fb fa80 	bl	8010208 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014d08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	3708      	adds	r7, #8
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd80      	pop	{r7, pc}
 8014d12:	bf00      	nop
 8014d14:	20005fc4 	.word	0x20005fc4

08014d18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b087      	sub	sp, #28
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	60f8      	str	r0, [r7, #12]
 8014d20:	60b9      	str	r1, [r7, #8]
 8014d22:	4613      	mov	r3, r2
 8014d24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014d26:	2300      	movs	r3, #0
 8014d28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	371c      	adds	r7, #28
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr
	...

08014d3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	4603      	mov	r3, r0
 8014d44:	6039      	str	r1, [r7, #0]
 8014d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	2212      	movs	r2, #18
 8014d4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014d4e:	4b03      	ldr	r3, [pc, #12]	; (8014d5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	370c      	adds	r7, #12
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr
 8014d5c:	200000fc 	.word	0x200000fc

08014d60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b083      	sub	sp, #12
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	4603      	mov	r3, r0
 8014d68:	6039      	str	r1, [r7, #0]
 8014d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	2204      	movs	r2, #4
 8014d70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014d72:	4b03      	ldr	r3, [pc, #12]	; (8014d80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014d74:	4618      	mov	r0, r3
 8014d76:	370c      	adds	r7, #12
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7e:	4770      	bx	lr
 8014d80:	20000110 	.word	0x20000110

08014d84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	6039      	str	r1, [r7, #0]
 8014d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014d90:	79fb      	ldrb	r3, [r7, #7]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d105      	bne.n	8014da2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014d96:	683a      	ldr	r2, [r7, #0]
 8014d98:	4907      	ldr	r1, [pc, #28]	; (8014db8 <USBD_FS_ProductStrDescriptor+0x34>)
 8014d9a:	4808      	ldr	r0, [pc, #32]	; (8014dbc <USBD_FS_ProductStrDescriptor+0x38>)
 8014d9c:	f7fc fc7c 	bl	8011698 <USBD_GetString>
 8014da0:	e004      	b.n	8014dac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014da2:	683a      	ldr	r2, [r7, #0]
 8014da4:	4904      	ldr	r1, [pc, #16]	; (8014db8 <USBD_FS_ProductStrDescriptor+0x34>)
 8014da6:	4805      	ldr	r0, [pc, #20]	; (8014dbc <USBD_FS_ProductStrDescriptor+0x38>)
 8014da8:	f7fc fc76 	bl	8011698 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014dac:	4b02      	ldr	r3, [pc, #8]	; (8014db8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3708      	adds	r7, #8
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	200072a0 	.word	0x200072a0
 8014dbc:	08017434 	.word	0x08017434

08014dc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b082      	sub	sp, #8
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	6039      	str	r1, [r7, #0]
 8014dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014dcc:	683a      	ldr	r2, [r7, #0]
 8014dce:	4904      	ldr	r1, [pc, #16]	; (8014de0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014dd0:	4804      	ldr	r0, [pc, #16]	; (8014de4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014dd2:	f7fc fc61 	bl	8011698 <USBD_GetString>
  return USBD_StrDesc;
 8014dd6:	4b02      	ldr	r3, [pc, #8]	; (8014de0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3708      	adds	r7, #8
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}
 8014de0:	200072a0 	.word	0x200072a0
 8014de4:	0801744c 	.word	0x0801744c

08014de8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b082      	sub	sp, #8
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	4603      	mov	r3, r0
 8014df0:	6039      	str	r1, [r7, #0]
 8014df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	221a      	movs	r2, #26
 8014df8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014dfa:	f000 f843 	bl	8014e84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014dfe:	4b02      	ldr	r3, [pc, #8]	; (8014e08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3708      	adds	r7, #8
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	20000114 	.word	0x20000114

08014e0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	4603      	mov	r3, r0
 8014e14:	6039      	str	r1, [r7, #0]
 8014e16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014e18:	79fb      	ldrb	r3, [r7, #7]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d105      	bne.n	8014e2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014e1e:	683a      	ldr	r2, [r7, #0]
 8014e20:	4907      	ldr	r1, [pc, #28]	; (8014e40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014e22:	4808      	ldr	r0, [pc, #32]	; (8014e44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014e24:	f7fc fc38 	bl	8011698 <USBD_GetString>
 8014e28:	e004      	b.n	8014e34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	4904      	ldr	r1, [pc, #16]	; (8014e40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014e2e:	4805      	ldr	r0, [pc, #20]	; (8014e44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014e30:	f7fc fc32 	bl	8011698 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e34:	4b02      	ldr	r3, [pc, #8]	; (8014e40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3708      	adds	r7, #8
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	200072a0 	.word	0x200072a0
 8014e44:	08017460 	.word	0x08017460

08014e48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	4603      	mov	r3, r0
 8014e50:	6039      	str	r1, [r7, #0]
 8014e52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014e54:	79fb      	ldrb	r3, [r7, #7]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d105      	bne.n	8014e66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014e5a:	683a      	ldr	r2, [r7, #0]
 8014e5c:	4907      	ldr	r1, [pc, #28]	; (8014e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014e5e:	4808      	ldr	r0, [pc, #32]	; (8014e80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014e60:	f7fc fc1a 	bl	8011698 <USBD_GetString>
 8014e64:	e004      	b.n	8014e70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014e66:	683a      	ldr	r2, [r7, #0]
 8014e68:	4904      	ldr	r1, [pc, #16]	; (8014e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014e6a:	4805      	ldr	r0, [pc, #20]	; (8014e80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014e6c:	f7fc fc14 	bl	8011698 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e70:	4b02      	ldr	r3, [pc, #8]	; (8014e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3708      	adds	r7, #8
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	200072a0 	.word	0x200072a0
 8014e80:	0801746c 	.word	0x0801746c

08014e84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014e8a:	4b0f      	ldr	r3, [pc, #60]	; (8014ec8 <Get_SerialNum+0x44>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014e90:	4b0e      	ldr	r3, [pc, #56]	; (8014ecc <Get_SerialNum+0x48>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014e96:	4b0e      	ldr	r3, [pc, #56]	; (8014ed0 <Get_SerialNum+0x4c>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014e9c:	68fa      	ldr	r2, [r7, #12]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d009      	beq.n	8014ebe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014eaa:	2208      	movs	r2, #8
 8014eac:	4909      	ldr	r1, [pc, #36]	; (8014ed4 <Get_SerialNum+0x50>)
 8014eae:	68f8      	ldr	r0, [r7, #12]
 8014eb0:	f000 f814 	bl	8014edc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014eb4:	2204      	movs	r2, #4
 8014eb6:	4908      	ldr	r1, [pc, #32]	; (8014ed8 <Get_SerialNum+0x54>)
 8014eb8:	68b8      	ldr	r0, [r7, #8]
 8014eba:	f000 f80f 	bl	8014edc <IntToUnicode>
  }
}
 8014ebe:	bf00      	nop
 8014ec0:	3710      	adds	r7, #16
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	bf00      	nop
 8014ec8:	1fff7a10 	.word	0x1fff7a10
 8014ecc:	1fff7a14 	.word	0x1fff7a14
 8014ed0:	1fff7a18 	.word	0x1fff7a18
 8014ed4:	20000116 	.word	0x20000116
 8014ed8:	20000126 	.word	0x20000126

08014edc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014edc:	b480      	push	{r7}
 8014ede:	b087      	sub	sp, #28
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	60f8      	str	r0, [r7, #12]
 8014ee4:	60b9      	str	r1, [r7, #8]
 8014ee6:	4613      	mov	r3, r2
 8014ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014eea:	2300      	movs	r3, #0
 8014eec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014eee:	2300      	movs	r3, #0
 8014ef0:	75fb      	strb	r3, [r7, #23]
 8014ef2:	e027      	b.n	8014f44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	0f1b      	lsrs	r3, r3, #28
 8014ef8:	2b09      	cmp	r3, #9
 8014efa:	d80b      	bhi.n	8014f14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	0f1b      	lsrs	r3, r3, #28
 8014f00:	b2da      	uxtb	r2, r3
 8014f02:	7dfb      	ldrb	r3, [r7, #23]
 8014f04:	005b      	lsls	r3, r3, #1
 8014f06:	4619      	mov	r1, r3
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	440b      	add	r3, r1
 8014f0c:	3230      	adds	r2, #48	; 0x30
 8014f0e:	b2d2      	uxtb	r2, r2
 8014f10:	701a      	strb	r2, [r3, #0]
 8014f12:	e00a      	b.n	8014f2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	0f1b      	lsrs	r3, r3, #28
 8014f18:	b2da      	uxtb	r2, r3
 8014f1a:	7dfb      	ldrb	r3, [r7, #23]
 8014f1c:	005b      	lsls	r3, r3, #1
 8014f1e:	4619      	mov	r1, r3
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	440b      	add	r3, r1
 8014f24:	3237      	adds	r2, #55	; 0x37
 8014f26:	b2d2      	uxtb	r2, r2
 8014f28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	011b      	lsls	r3, r3, #4
 8014f2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014f30:	7dfb      	ldrb	r3, [r7, #23]
 8014f32:	005b      	lsls	r3, r3, #1
 8014f34:	3301      	adds	r3, #1
 8014f36:	68ba      	ldr	r2, [r7, #8]
 8014f38:	4413      	add	r3, r2
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014f3e:	7dfb      	ldrb	r3, [r7, #23]
 8014f40:	3301      	adds	r3, #1
 8014f42:	75fb      	strb	r3, [r7, #23]
 8014f44:	7dfa      	ldrb	r2, [r7, #23]
 8014f46:	79fb      	ldrb	r3, [r7, #7]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d3d3      	bcc.n	8014ef4 <IntToUnicode+0x18>
  }
}
 8014f4c:	bf00      	nop
 8014f4e:	bf00      	nop
 8014f50:	371c      	adds	r7, #28
 8014f52:	46bd      	mov	sp, r7
 8014f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f58:	4770      	bx	lr
	...

08014f5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b08a      	sub	sp, #40	; 0x28
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f64:	f107 0314 	add.w	r3, r7, #20
 8014f68:	2200      	movs	r2, #0
 8014f6a:	601a      	str	r2, [r3, #0]
 8014f6c:	605a      	str	r2, [r3, #4]
 8014f6e:	609a      	str	r2, [r3, #8]
 8014f70:	60da      	str	r2, [r3, #12]
 8014f72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014f7c:	d13a      	bne.n	8014ff4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f7e:	2300      	movs	r3, #0
 8014f80:	613b      	str	r3, [r7, #16]
 8014f82:	4b1e      	ldr	r3, [pc, #120]	; (8014ffc <HAL_PCD_MspInit+0xa0>)
 8014f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f86:	4a1d      	ldr	r2, [pc, #116]	; (8014ffc <HAL_PCD_MspInit+0xa0>)
 8014f88:	f043 0301 	orr.w	r3, r3, #1
 8014f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8014f8e:	4b1b      	ldr	r3, [pc, #108]	; (8014ffc <HAL_PCD_MspInit+0xa0>)
 8014f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f92:	f003 0301 	and.w	r3, r3, #1
 8014f96:	613b      	str	r3, [r7, #16]
 8014f98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8014f9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014fa0:	2302      	movs	r3, #2
 8014fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014fa8:	2303      	movs	r3, #3
 8014faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014fac:	230a      	movs	r3, #10
 8014fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014fb0:	f107 0314 	add.w	r3, r7, #20
 8014fb4:	4619      	mov	r1, r3
 8014fb6:	4812      	ldr	r0, [pc, #72]	; (8015000 <HAL_PCD_MspInit+0xa4>)
 8014fb8:	f7f4 f906 	bl	80091c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014fbc:	4b0f      	ldr	r3, [pc, #60]	; (8014ffc <HAL_PCD_MspInit+0xa0>)
 8014fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fc0:	4a0e      	ldr	r2, [pc, #56]	; (8014ffc <HAL_PCD_MspInit+0xa0>)
 8014fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fc6:	6353      	str	r3, [r2, #52]	; 0x34
 8014fc8:	2300      	movs	r3, #0
 8014fca:	60fb      	str	r3, [r7, #12]
 8014fcc:	4b0b      	ldr	r3, [pc, #44]	; (8014ffc <HAL_PCD_MspInit+0xa0>)
 8014fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fd0:	4a0a      	ldr	r2, [pc, #40]	; (8014ffc <HAL_PCD_MspInit+0xa0>)
 8014fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8014fd8:	4b08      	ldr	r3, [pc, #32]	; (8014ffc <HAL_PCD_MspInit+0xa0>)
 8014fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014fe0:	60fb      	str	r3, [r7, #12]
 8014fe2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	2105      	movs	r1, #5
 8014fe8:	2043      	movs	r0, #67	; 0x43
 8014fea:	f7f3 fcc1 	bl	8008970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014fee:	2043      	movs	r0, #67	; 0x43
 8014ff0:	f7f3 fcda 	bl	80089a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014ff4:	bf00      	nop
 8014ff6:	3728      	adds	r7, #40	; 0x28
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}
 8014ffc:	40023800 	.word	0x40023800
 8015000:	40020000 	.word	0x40020000

08015004 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015018:	4619      	mov	r1, r3
 801501a:	4610      	mov	r0, r2
 801501c:	f7fb f9dd 	bl	80103da <USBD_LL_SetupStage>
}
 8015020:	bf00      	nop
 8015022:	3708      	adds	r7, #8
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}

08015028 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b082      	sub	sp, #8
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	460b      	mov	r3, r1
 8015032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801503a:	78fa      	ldrb	r2, [r7, #3]
 801503c:	6879      	ldr	r1, [r7, #4]
 801503e:	4613      	mov	r3, r2
 8015040:	00db      	lsls	r3, r3, #3
 8015042:	4413      	add	r3, r2
 8015044:	009b      	lsls	r3, r3, #2
 8015046:	440b      	add	r3, r1
 8015048:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801504c:	681a      	ldr	r2, [r3, #0]
 801504e:	78fb      	ldrb	r3, [r7, #3]
 8015050:	4619      	mov	r1, r3
 8015052:	f7fb fa17 	bl	8010484 <USBD_LL_DataOutStage>
}
 8015056:	bf00      	nop
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}

0801505e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801505e:	b580      	push	{r7, lr}
 8015060:	b082      	sub	sp, #8
 8015062:	af00      	add	r7, sp, #0
 8015064:	6078      	str	r0, [r7, #4]
 8015066:	460b      	mov	r3, r1
 8015068:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015070:	78fa      	ldrb	r2, [r7, #3]
 8015072:	6879      	ldr	r1, [r7, #4]
 8015074:	4613      	mov	r3, r2
 8015076:	00db      	lsls	r3, r3, #3
 8015078:	4413      	add	r3, r2
 801507a:	009b      	lsls	r3, r3, #2
 801507c:	440b      	add	r3, r1
 801507e:	334c      	adds	r3, #76	; 0x4c
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	78fb      	ldrb	r3, [r7, #3]
 8015084:	4619      	mov	r1, r3
 8015086:	f7fb fab0 	bl	80105ea <USBD_LL_DataInStage>
}
 801508a:	bf00      	nop
 801508c:	3708      	adds	r7, #8
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}

08015092 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015092:	b580      	push	{r7, lr}
 8015094:	b082      	sub	sp, #8
 8015096:	af00      	add	r7, sp, #0
 8015098:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7fb fbe4 	bl	801086e <USBD_LL_SOF>
}
 80150a6:	bf00      	nop
 80150a8:	3708      	adds	r7, #8
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}

080150ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150ae:	b580      	push	{r7, lr}
 80150b0:	b084      	sub	sp, #16
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80150b6:	2301      	movs	r3, #1
 80150b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d102      	bne.n	80150c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80150c2:	2300      	movs	r3, #0
 80150c4:	73fb      	strb	r3, [r7, #15]
 80150c6:	e008      	b.n	80150da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	68db      	ldr	r3, [r3, #12]
 80150cc:	2b02      	cmp	r3, #2
 80150ce:	d102      	bne.n	80150d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80150d0:	2301      	movs	r3, #1
 80150d2:	73fb      	strb	r3, [r7, #15]
 80150d4:	e001      	b.n	80150da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80150d6:	f7ed fa6d 	bl	80025b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150e0:	7bfa      	ldrb	r2, [r7, #15]
 80150e2:	4611      	mov	r1, r2
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7fb fb84 	bl	80107f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7fb fb2c 	bl	801074e <USBD_LL_Reset>
}
 80150f6:	bf00      	nop
 80150f8:	3710      	adds	r7, #16
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
	...

08015100 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801510e:	4618      	mov	r0, r3
 8015110:	f7fb fb7f 	bl	8010812 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	6812      	ldr	r2, [r2, #0]
 8015122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015126:	f043 0301 	orr.w	r3, r3, #1
 801512a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	6a1b      	ldr	r3, [r3, #32]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d005      	beq.n	8015140 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015134:	4b04      	ldr	r3, [pc, #16]	; (8015148 <HAL_PCD_SuspendCallback+0x48>)
 8015136:	691b      	ldr	r3, [r3, #16]
 8015138:	4a03      	ldr	r2, [pc, #12]	; (8015148 <HAL_PCD_SuspendCallback+0x48>)
 801513a:	f043 0306 	orr.w	r3, r3, #6
 801513e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015140:	bf00      	nop
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}
 8015148:	e000ed00 	.word	0xe000ed00

0801514c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b082      	sub	sp, #8
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801515a:	4618      	mov	r0, r3
 801515c:	f7fb fb6f 	bl	801083e <USBD_LL_Resume>
}
 8015160:	bf00      	nop
 8015162:	3708      	adds	r7, #8
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}

08015168 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
 8015170:	460b      	mov	r3, r1
 8015172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801517a:	78fa      	ldrb	r2, [r7, #3]
 801517c:	4611      	mov	r1, r2
 801517e:	4618      	mov	r0, r3
 8015180:	f7fb fbc7 	bl	8010912 <USBD_LL_IsoOUTIncomplete>
}
 8015184:	bf00      	nop
 8015186:	3708      	adds	r7, #8
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}

0801518c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	460b      	mov	r3, r1
 8015196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801519e:	78fa      	ldrb	r2, [r7, #3]
 80151a0:	4611      	mov	r1, r2
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7fb fb83 	bl	80108ae <USBD_LL_IsoINIncomplete>
}
 80151a8:	bf00      	nop
 80151aa:	3708      	adds	r7, #8
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}

080151b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80151be:	4618      	mov	r0, r3
 80151c0:	f7fb fbd9 	bl	8010976 <USBD_LL_DevConnected>
}
 80151c4:	bf00      	nop
 80151c6:	3708      	adds	r7, #8
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80151da:	4618      	mov	r0, r3
 80151dc:	f7fb fbd6 	bl	801098c <USBD_LL_DevDisconnected>
}
 80151e0:	bf00      	nop
 80151e2:	3708      	adds	r7, #8
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b082      	sub	sp, #8
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d13c      	bne.n	8015272 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80151f8:	4a20      	ldr	r2, [pc, #128]	; (801527c <USBD_LL_Init+0x94>)
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	4a1e      	ldr	r2, [pc, #120]	; (801527c <USBD_LL_Init+0x94>)
 8015204:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015208:	4b1c      	ldr	r3, [pc, #112]	; (801527c <USBD_LL_Init+0x94>)
 801520a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801520e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015210:	4b1a      	ldr	r3, [pc, #104]	; (801527c <USBD_LL_Init+0x94>)
 8015212:	2204      	movs	r2, #4
 8015214:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015216:	4b19      	ldr	r3, [pc, #100]	; (801527c <USBD_LL_Init+0x94>)
 8015218:	2202      	movs	r2, #2
 801521a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801521c:	4b17      	ldr	r3, [pc, #92]	; (801527c <USBD_LL_Init+0x94>)
 801521e:	2200      	movs	r2, #0
 8015220:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015222:	4b16      	ldr	r3, [pc, #88]	; (801527c <USBD_LL_Init+0x94>)
 8015224:	2202      	movs	r2, #2
 8015226:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015228:	4b14      	ldr	r3, [pc, #80]	; (801527c <USBD_LL_Init+0x94>)
 801522a:	2200      	movs	r2, #0
 801522c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801522e:	4b13      	ldr	r3, [pc, #76]	; (801527c <USBD_LL_Init+0x94>)
 8015230:	2200      	movs	r2, #0
 8015232:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015234:	4b11      	ldr	r3, [pc, #68]	; (801527c <USBD_LL_Init+0x94>)
 8015236:	2200      	movs	r2, #0
 8015238:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801523a:	4b10      	ldr	r3, [pc, #64]	; (801527c <USBD_LL_Init+0x94>)
 801523c:	2200      	movs	r2, #0
 801523e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015240:	4b0e      	ldr	r3, [pc, #56]	; (801527c <USBD_LL_Init+0x94>)
 8015242:	2200      	movs	r2, #0
 8015244:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015246:	480d      	ldr	r0, [pc, #52]	; (801527c <USBD_LL_Init+0x94>)
 8015248:	f7f4 f99c 	bl	8009584 <HAL_PCD_Init>
 801524c:	4603      	mov	r3, r0
 801524e:	2b00      	cmp	r3, #0
 8015250:	d001      	beq.n	8015256 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015252:	f7ed f9af 	bl	80025b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015256:	2180      	movs	r1, #128	; 0x80
 8015258:	4808      	ldr	r0, [pc, #32]	; (801527c <USBD_LL_Init+0x94>)
 801525a:	f7f5 fbf4 	bl	800aa46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801525e:	2240      	movs	r2, #64	; 0x40
 8015260:	2100      	movs	r1, #0
 8015262:	4806      	ldr	r0, [pc, #24]	; (801527c <USBD_LL_Init+0x94>)
 8015264:	f7f5 fba8 	bl	800a9b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015268:	2280      	movs	r2, #128	; 0x80
 801526a:	2101      	movs	r1, #1
 801526c:	4803      	ldr	r0, [pc, #12]	; (801527c <USBD_LL_Init+0x94>)
 801526e:	f7f5 fba3 	bl	800a9b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015272:	2300      	movs	r3, #0
}
 8015274:	4618      	mov	r0, r3
 8015276:	3708      	adds	r7, #8
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}
 801527c:	200074a0 	.word	0x200074a0

08015280 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015288:	2300      	movs	r3, #0
 801528a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801528c:	2300      	movs	r3, #0
 801528e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015296:	4618      	mov	r0, r3
 8015298:	f7f4 fa91 	bl	80097be <HAL_PCD_Start>
 801529c:	4603      	mov	r3, r0
 801529e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152a0:	7bfb      	ldrb	r3, [r7, #15]
 80152a2:	4618      	mov	r0, r3
 80152a4:	f000 f942 	bl	801552c <USBD_Get_USB_Status>
 80152a8:	4603      	mov	r3, r0
 80152aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3710      	adds	r7, #16
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}

080152b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80152b6:	b580      	push	{r7, lr}
 80152b8:	b084      	sub	sp, #16
 80152ba:	af00      	add	r7, sp, #0
 80152bc:	6078      	str	r0, [r7, #4]
 80152be:	4608      	mov	r0, r1
 80152c0:	4611      	mov	r1, r2
 80152c2:	461a      	mov	r2, r3
 80152c4:	4603      	mov	r3, r0
 80152c6:	70fb      	strb	r3, [r7, #3]
 80152c8:	460b      	mov	r3, r1
 80152ca:	70bb      	strb	r3, [r7, #2]
 80152cc:	4613      	mov	r3, r2
 80152ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152d0:	2300      	movs	r3, #0
 80152d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152d4:	2300      	movs	r3, #0
 80152d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80152de:	78bb      	ldrb	r3, [r7, #2]
 80152e0:	883a      	ldrh	r2, [r7, #0]
 80152e2:	78f9      	ldrb	r1, [r7, #3]
 80152e4:	f7f4 ff62 	bl	800a1ac <HAL_PCD_EP_Open>
 80152e8:	4603      	mov	r3, r0
 80152ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152ec:	7bfb      	ldrb	r3, [r7, #15]
 80152ee:	4618      	mov	r0, r3
 80152f0:	f000 f91c 	bl	801552c <USBD_Get_USB_Status>
 80152f4:	4603      	mov	r3, r0
 80152f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3710      	adds	r7, #16
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b084      	sub	sp, #16
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
 801530a:	460b      	mov	r3, r1
 801530c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801530e:	2300      	movs	r3, #0
 8015310:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015312:	2300      	movs	r3, #0
 8015314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801531c:	78fa      	ldrb	r2, [r7, #3]
 801531e:	4611      	mov	r1, r2
 8015320:	4618      	mov	r0, r3
 8015322:	f7f4 ffab 	bl	800a27c <HAL_PCD_EP_Close>
 8015326:	4603      	mov	r3, r0
 8015328:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801532a:	7bfb      	ldrb	r3, [r7, #15]
 801532c:	4618      	mov	r0, r3
 801532e:	f000 f8fd 	bl	801552c <USBD_Get_USB_Status>
 8015332:	4603      	mov	r3, r0
 8015334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015336:	7bbb      	ldrb	r3, [r7, #14]
}
 8015338:	4618      	mov	r0, r3
 801533a:	3710      	adds	r7, #16
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}

08015340 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	460b      	mov	r3, r1
 801534a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801534c:	2300      	movs	r3, #0
 801534e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015350:	2300      	movs	r3, #0
 8015352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801535a:	78fa      	ldrb	r2, [r7, #3]
 801535c:	4611      	mov	r1, r2
 801535e:	4618      	mov	r0, r3
 8015360:	f7f5 f883 	bl	800a46a <HAL_PCD_EP_SetStall>
 8015364:	4603      	mov	r3, r0
 8015366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015368:	7bfb      	ldrb	r3, [r7, #15]
 801536a:	4618      	mov	r0, r3
 801536c:	f000 f8de 	bl	801552c <USBD_Get_USB_Status>
 8015370:	4603      	mov	r3, r0
 8015372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015374:	7bbb      	ldrb	r3, [r7, #14]
}
 8015376:	4618      	mov	r0, r3
 8015378:	3710      	adds	r7, #16
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}

0801537e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801537e:	b580      	push	{r7, lr}
 8015380:	b084      	sub	sp, #16
 8015382:	af00      	add	r7, sp, #0
 8015384:	6078      	str	r0, [r7, #4]
 8015386:	460b      	mov	r3, r1
 8015388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801538a:	2300      	movs	r3, #0
 801538c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801538e:	2300      	movs	r3, #0
 8015390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015398:	78fa      	ldrb	r2, [r7, #3]
 801539a:	4611      	mov	r1, r2
 801539c:	4618      	mov	r0, r3
 801539e:	f7f5 f8c8 	bl	800a532 <HAL_PCD_EP_ClrStall>
 80153a2:	4603      	mov	r3, r0
 80153a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153a6:	7bfb      	ldrb	r3, [r7, #15]
 80153a8:	4618      	mov	r0, r3
 80153aa:	f000 f8bf 	bl	801552c <USBD_Get_USB_Status>
 80153ae:	4603      	mov	r3, r0
 80153b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80153b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	3710      	adds	r7, #16
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}

080153bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153bc:	b480      	push	{r7}
 80153be:	b085      	sub	sp, #20
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	460b      	mov	r3, r1
 80153c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80153ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80153d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	da0b      	bge.n	80153f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80153d8:	78fb      	ldrb	r3, [r7, #3]
 80153da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80153de:	68f9      	ldr	r1, [r7, #12]
 80153e0:	4613      	mov	r3, r2
 80153e2:	00db      	lsls	r3, r3, #3
 80153e4:	4413      	add	r3, r2
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	440b      	add	r3, r1
 80153ea:	333e      	adds	r3, #62	; 0x3e
 80153ec:	781b      	ldrb	r3, [r3, #0]
 80153ee:	e00b      	b.n	8015408 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80153f0:	78fb      	ldrb	r3, [r7, #3]
 80153f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80153f6:	68f9      	ldr	r1, [r7, #12]
 80153f8:	4613      	mov	r3, r2
 80153fa:	00db      	lsls	r3, r3, #3
 80153fc:	4413      	add	r3, r2
 80153fe:	009b      	lsls	r3, r3, #2
 8015400:	440b      	add	r3, r1
 8015402:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015406:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015408:	4618      	mov	r0, r3
 801540a:	3714      	adds	r7, #20
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr

08015414 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b084      	sub	sp, #16
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	460b      	mov	r3, r1
 801541e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015420:	2300      	movs	r3, #0
 8015422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015424:	2300      	movs	r3, #0
 8015426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801542e:	78fa      	ldrb	r2, [r7, #3]
 8015430:	4611      	mov	r1, r2
 8015432:	4618      	mov	r0, r3
 8015434:	f7f4 fe95 	bl	800a162 <HAL_PCD_SetAddress>
 8015438:	4603      	mov	r3, r0
 801543a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801543c:	7bfb      	ldrb	r3, [r7, #15]
 801543e:	4618      	mov	r0, r3
 8015440:	f000 f874 	bl	801552c <USBD_Get_USB_Status>
 8015444:	4603      	mov	r3, r0
 8015446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015448:	7bbb      	ldrb	r3, [r7, #14]
}
 801544a:	4618      	mov	r0, r3
 801544c:	3710      	adds	r7, #16
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}

08015452 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015452:	b580      	push	{r7, lr}
 8015454:	b086      	sub	sp, #24
 8015456:	af00      	add	r7, sp, #0
 8015458:	60f8      	str	r0, [r7, #12]
 801545a:	607a      	str	r2, [r7, #4]
 801545c:	603b      	str	r3, [r7, #0]
 801545e:	460b      	mov	r3, r1
 8015460:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015462:	2300      	movs	r3, #0
 8015464:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015466:	2300      	movs	r3, #0
 8015468:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015470:	7af9      	ldrb	r1, [r7, #11]
 8015472:	683b      	ldr	r3, [r7, #0]
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	f7f4 ffae 	bl	800a3d6 <HAL_PCD_EP_Transmit>
 801547a:	4603      	mov	r3, r0
 801547c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801547e:	7dfb      	ldrb	r3, [r7, #23]
 8015480:	4618      	mov	r0, r3
 8015482:	f000 f853 	bl	801552c <USBD_Get_USB_Status>
 8015486:	4603      	mov	r3, r0
 8015488:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801548a:	7dbb      	ldrb	r3, [r7, #22]
}
 801548c:	4618      	mov	r0, r3
 801548e:	3718      	adds	r7, #24
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b086      	sub	sp, #24
 8015498:	af00      	add	r7, sp, #0
 801549a:	60f8      	str	r0, [r7, #12]
 801549c:	607a      	str	r2, [r7, #4]
 801549e:	603b      	str	r3, [r7, #0]
 80154a0:	460b      	mov	r3, r1
 80154a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154a4:	2300      	movs	r3, #0
 80154a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154a8:	2300      	movs	r3, #0
 80154aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80154b2:	7af9      	ldrb	r1, [r7, #11]
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	687a      	ldr	r2, [r7, #4]
 80154b8:	f7f4 ff2a 	bl	800a310 <HAL_PCD_EP_Receive>
 80154bc:	4603      	mov	r3, r0
 80154be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154c0:	7dfb      	ldrb	r3, [r7, #23]
 80154c2:	4618      	mov	r0, r3
 80154c4:	f000 f832 	bl	801552c <USBD_Get_USB_Status>
 80154c8:	4603      	mov	r3, r0
 80154ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80154cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3718      	adds	r7, #24
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154d6:	b580      	push	{r7, lr}
 80154d8:	b082      	sub	sp, #8
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
 80154de:	460b      	mov	r3, r1
 80154e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80154e8:	78fa      	ldrb	r2, [r7, #3]
 80154ea:	4611      	mov	r1, r2
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7f4 ff5a 	bl	800a3a6 <HAL_PCD_EP_GetRxCount>
 80154f2:	4603      	mov	r3, r0
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3708      	adds	r7, #8
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80154fc:	b480      	push	{r7}
 80154fe:	b083      	sub	sp, #12
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015504:	4b03      	ldr	r3, [pc, #12]	; (8015514 <USBD_static_malloc+0x18>)
}
 8015506:	4618      	mov	r0, r3
 8015508:	370c      	adds	r7, #12
 801550a:	46bd      	mov	sp, r7
 801550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015510:	4770      	bx	lr
 8015512:	bf00      	nop
 8015514:	200079ac 	.word	0x200079ac

08015518 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015518:	b480      	push	{r7}
 801551a:	b083      	sub	sp, #12
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]

}
 8015520:	bf00      	nop
 8015522:	370c      	adds	r7, #12
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr

0801552c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801552c:	b480      	push	{r7}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
 8015532:	4603      	mov	r3, r0
 8015534:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015536:	2300      	movs	r3, #0
 8015538:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801553a:	79fb      	ldrb	r3, [r7, #7]
 801553c:	2b03      	cmp	r3, #3
 801553e:	d817      	bhi.n	8015570 <USBD_Get_USB_Status+0x44>
 8015540:	a201      	add	r2, pc, #4	; (adr r2, 8015548 <USBD_Get_USB_Status+0x1c>)
 8015542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015546:	bf00      	nop
 8015548:	08015559 	.word	0x08015559
 801554c:	0801555f 	.word	0x0801555f
 8015550:	08015565 	.word	0x08015565
 8015554:	0801556b 	.word	0x0801556b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015558:	2300      	movs	r3, #0
 801555a:	73fb      	strb	r3, [r7, #15]
    break;
 801555c:	e00b      	b.n	8015576 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801555e:	2303      	movs	r3, #3
 8015560:	73fb      	strb	r3, [r7, #15]
    break;
 8015562:	e008      	b.n	8015576 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015564:	2301      	movs	r3, #1
 8015566:	73fb      	strb	r3, [r7, #15]
    break;
 8015568:	e005      	b.n	8015576 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801556a:	2303      	movs	r3, #3
 801556c:	73fb      	strb	r3, [r7, #15]
    break;
 801556e:	e002      	b.n	8015576 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015570:	2303      	movs	r3, #3
 8015572:	73fb      	strb	r3, [r7, #15]
    break;
 8015574:	bf00      	nop
  }
  return usb_status;
 8015576:	7bfb      	ldrb	r3, [r7, #15]
}
 8015578:	4618      	mov	r0, r3
 801557a:	3714      	adds	r7, #20
 801557c:	46bd      	mov	sp, r7
 801557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015582:	4770      	bx	lr

08015584 <memset>:
 8015584:	4402      	add	r2, r0
 8015586:	4603      	mov	r3, r0
 8015588:	4293      	cmp	r3, r2
 801558a:	d100      	bne.n	801558e <memset+0xa>
 801558c:	4770      	bx	lr
 801558e:	f803 1b01 	strb.w	r1, [r3], #1
 8015592:	e7f9      	b.n	8015588 <memset+0x4>

08015594 <_reclaim_reent>:
 8015594:	4b29      	ldr	r3, [pc, #164]	; (801563c <_reclaim_reent+0xa8>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	4283      	cmp	r3, r0
 801559a:	b570      	push	{r4, r5, r6, lr}
 801559c:	4604      	mov	r4, r0
 801559e:	d04b      	beq.n	8015638 <_reclaim_reent+0xa4>
 80155a0:	69c3      	ldr	r3, [r0, #28]
 80155a2:	b143      	cbz	r3, 80155b6 <_reclaim_reent+0x22>
 80155a4:	68db      	ldr	r3, [r3, #12]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d144      	bne.n	8015634 <_reclaim_reent+0xa0>
 80155aa:	69e3      	ldr	r3, [r4, #28]
 80155ac:	6819      	ldr	r1, [r3, #0]
 80155ae:	b111      	cbz	r1, 80155b6 <_reclaim_reent+0x22>
 80155b0:	4620      	mov	r0, r4
 80155b2:	f000 f879 	bl	80156a8 <_free_r>
 80155b6:	6961      	ldr	r1, [r4, #20]
 80155b8:	b111      	cbz	r1, 80155c0 <_reclaim_reent+0x2c>
 80155ba:	4620      	mov	r0, r4
 80155bc:	f000 f874 	bl	80156a8 <_free_r>
 80155c0:	69e1      	ldr	r1, [r4, #28]
 80155c2:	b111      	cbz	r1, 80155ca <_reclaim_reent+0x36>
 80155c4:	4620      	mov	r0, r4
 80155c6:	f000 f86f 	bl	80156a8 <_free_r>
 80155ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80155cc:	b111      	cbz	r1, 80155d4 <_reclaim_reent+0x40>
 80155ce:	4620      	mov	r0, r4
 80155d0:	f000 f86a 	bl	80156a8 <_free_r>
 80155d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155d6:	b111      	cbz	r1, 80155de <_reclaim_reent+0x4a>
 80155d8:	4620      	mov	r0, r4
 80155da:	f000 f865 	bl	80156a8 <_free_r>
 80155de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80155e0:	b111      	cbz	r1, 80155e8 <_reclaim_reent+0x54>
 80155e2:	4620      	mov	r0, r4
 80155e4:	f000 f860 	bl	80156a8 <_free_r>
 80155e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80155ea:	b111      	cbz	r1, 80155f2 <_reclaim_reent+0x5e>
 80155ec:	4620      	mov	r0, r4
 80155ee:	f000 f85b 	bl	80156a8 <_free_r>
 80155f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80155f4:	b111      	cbz	r1, 80155fc <_reclaim_reent+0x68>
 80155f6:	4620      	mov	r0, r4
 80155f8:	f000 f856 	bl	80156a8 <_free_r>
 80155fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80155fe:	b111      	cbz	r1, 8015606 <_reclaim_reent+0x72>
 8015600:	4620      	mov	r0, r4
 8015602:	f000 f851 	bl	80156a8 <_free_r>
 8015606:	6a23      	ldr	r3, [r4, #32]
 8015608:	b1b3      	cbz	r3, 8015638 <_reclaim_reent+0xa4>
 801560a:	4620      	mov	r0, r4
 801560c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015610:	4718      	bx	r3
 8015612:	5949      	ldr	r1, [r1, r5]
 8015614:	b941      	cbnz	r1, 8015628 <_reclaim_reent+0x94>
 8015616:	3504      	adds	r5, #4
 8015618:	69e3      	ldr	r3, [r4, #28]
 801561a:	2d80      	cmp	r5, #128	; 0x80
 801561c:	68d9      	ldr	r1, [r3, #12]
 801561e:	d1f8      	bne.n	8015612 <_reclaim_reent+0x7e>
 8015620:	4620      	mov	r0, r4
 8015622:	f000 f841 	bl	80156a8 <_free_r>
 8015626:	e7c0      	b.n	80155aa <_reclaim_reent+0x16>
 8015628:	680e      	ldr	r6, [r1, #0]
 801562a:	4620      	mov	r0, r4
 801562c:	f000 f83c 	bl	80156a8 <_free_r>
 8015630:	4631      	mov	r1, r6
 8015632:	e7ef      	b.n	8015614 <_reclaim_reent+0x80>
 8015634:	2500      	movs	r5, #0
 8015636:	e7ef      	b.n	8015618 <_reclaim_reent+0x84>
 8015638:	bd70      	pop	{r4, r5, r6, pc}
 801563a:	bf00      	nop
 801563c:	2000017c 	.word	0x2000017c

08015640 <__libc_init_array>:
 8015640:	b570      	push	{r4, r5, r6, lr}
 8015642:	4d0d      	ldr	r5, [pc, #52]	; (8015678 <__libc_init_array+0x38>)
 8015644:	4c0d      	ldr	r4, [pc, #52]	; (801567c <__libc_init_array+0x3c>)
 8015646:	1b64      	subs	r4, r4, r5
 8015648:	10a4      	asrs	r4, r4, #2
 801564a:	2600      	movs	r6, #0
 801564c:	42a6      	cmp	r6, r4
 801564e:	d109      	bne.n	8015664 <__libc_init_array+0x24>
 8015650:	4d0b      	ldr	r5, [pc, #44]	; (8015680 <__libc_init_array+0x40>)
 8015652:	4c0c      	ldr	r4, [pc, #48]	; (8015684 <__libc_init_array+0x44>)
 8015654:	f001 fe8a 	bl	801736c <_init>
 8015658:	1b64      	subs	r4, r4, r5
 801565a:	10a4      	asrs	r4, r4, #2
 801565c:	2600      	movs	r6, #0
 801565e:	42a6      	cmp	r6, r4
 8015660:	d105      	bne.n	801566e <__libc_init_array+0x2e>
 8015662:	bd70      	pop	{r4, r5, r6, pc}
 8015664:	f855 3b04 	ldr.w	r3, [r5], #4
 8015668:	4798      	blx	r3
 801566a:	3601      	adds	r6, #1
 801566c:	e7ee      	b.n	801564c <__libc_init_array+0xc>
 801566e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015672:	4798      	blx	r3
 8015674:	3601      	adds	r6, #1
 8015676:	e7f2      	b.n	801565e <__libc_init_array+0x1e>
 8015678:	080179e0 	.word	0x080179e0
 801567c:	080179e0 	.word	0x080179e0
 8015680:	080179e0 	.word	0x080179e0
 8015684:	080179e4 	.word	0x080179e4

08015688 <__retarget_lock_acquire_recursive>:
 8015688:	4770      	bx	lr

0801568a <__retarget_lock_release_recursive>:
 801568a:	4770      	bx	lr

0801568c <memcpy>:
 801568c:	440a      	add	r2, r1
 801568e:	4291      	cmp	r1, r2
 8015690:	f100 33ff 	add.w	r3, r0, #4294967295
 8015694:	d100      	bne.n	8015698 <memcpy+0xc>
 8015696:	4770      	bx	lr
 8015698:	b510      	push	{r4, lr}
 801569a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801569e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156a2:	4291      	cmp	r1, r2
 80156a4:	d1f9      	bne.n	801569a <memcpy+0xe>
 80156a6:	bd10      	pop	{r4, pc}

080156a8 <_free_r>:
 80156a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80156aa:	2900      	cmp	r1, #0
 80156ac:	d044      	beq.n	8015738 <_free_r+0x90>
 80156ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156b2:	9001      	str	r0, [sp, #4]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f1a1 0404 	sub.w	r4, r1, #4
 80156ba:	bfb8      	it	lt
 80156bc:	18e4      	addlt	r4, r4, r3
 80156be:	f000 f83f 	bl	8015740 <__malloc_lock>
 80156c2:	4a1e      	ldr	r2, [pc, #120]	; (801573c <_free_r+0x94>)
 80156c4:	9801      	ldr	r0, [sp, #4]
 80156c6:	6813      	ldr	r3, [r2, #0]
 80156c8:	b933      	cbnz	r3, 80156d8 <_free_r+0x30>
 80156ca:	6063      	str	r3, [r4, #4]
 80156cc:	6014      	str	r4, [r2, #0]
 80156ce:	b003      	add	sp, #12
 80156d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156d4:	f000 b83a 	b.w	801574c <__malloc_unlock>
 80156d8:	42a3      	cmp	r3, r4
 80156da:	d908      	bls.n	80156ee <_free_r+0x46>
 80156dc:	6825      	ldr	r5, [r4, #0]
 80156de:	1961      	adds	r1, r4, r5
 80156e0:	428b      	cmp	r3, r1
 80156e2:	bf01      	itttt	eq
 80156e4:	6819      	ldreq	r1, [r3, #0]
 80156e6:	685b      	ldreq	r3, [r3, #4]
 80156e8:	1949      	addeq	r1, r1, r5
 80156ea:	6021      	streq	r1, [r4, #0]
 80156ec:	e7ed      	b.n	80156ca <_free_r+0x22>
 80156ee:	461a      	mov	r2, r3
 80156f0:	685b      	ldr	r3, [r3, #4]
 80156f2:	b10b      	cbz	r3, 80156f8 <_free_r+0x50>
 80156f4:	42a3      	cmp	r3, r4
 80156f6:	d9fa      	bls.n	80156ee <_free_r+0x46>
 80156f8:	6811      	ldr	r1, [r2, #0]
 80156fa:	1855      	adds	r5, r2, r1
 80156fc:	42a5      	cmp	r5, r4
 80156fe:	d10b      	bne.n	8015718 <_free_r+0x70>
 8015700:	6824      	ldr	r4, [r4, #0]
 8015702:	4421      	add	r1, r4
 8015704:	1854      	adds	r4, r2, r1
 8015706:	42a3      	cmp	r3, r4
 8015708:	6011      	str	r1, [r2, #0]
 801570a:	d1e0      	bne.n	80156ce <_free_r+0x26>
 801570c:	681c      	ldr	r4, [r3, #0]
 801570e:	685b      	ldr	r3, [r3, #4]
 8015710:	6053      	str	r3, [r2, #4]
 8015712:	440c      	add	r4, r1
 8015714:	6014      	str	r4, [r2, #0]
 8015716:	e7da      	b.n	80156ce <_free_r+0x26>
 8015718:	d902      	bls.n	8015720 <_free_r+0x78>
 801571a:	230c      	movs	r3, #12
 801571c:	6003      	str	r3, [r0, #0]
 801571e:	e7d6      	b.n	80156ce <_free_r+0x26>
 8015720:	6825      	ldr	r5, [r4, #0]
 8015722:	1961      	adds	r1, r4, r5
 8015724:	428b      	cmp	r3, r1
 8015726:	bf04      	itt	eq
 8015728:	6819      	ldreq	r1, [r3, #0]
 801572a:	685b      	ldreq	r3, [r3, #4]
 801572c:	6063      	str	r3, [r4, #4]
 801572e:	bf04      	itt	eq
 8015730:	1949      	addeq	r1, r1, r5
 8015732:	6021      	streq	r1, [r4, #0]
 8015734:	6054      	str	r4, [r2, #4]
 8015736:	e7ca      	b.n	80156ce <_free_r+0x26>
 8015738:	b003      	add	sp, #12
 801573a:	bd30      	pop	{r4, r5, pc}
 801573c:	20007d08 	.word	0x20007d08

08015740 <__malloc_lock>:
 8015740:	4801      	ldr	r0, [pc, #4]	; (8015748 <__malloc_lock+0x8>)
 8015742:	f7ff bfa1 	b.w	8015688 <__retarget_lock_acquire_recursive>
 8015746:	bf00      	nop
 8015748:	20007d04 	.word	0x20007d04

0801574c <__malloc_unlock>:
 801574c:	4801      	ldr	r0, [pc, #4]	; (8015754 <__malloc_unlock+0x8>)
 801574e:	f7ff bf9c 	b.w	801568a <__retarget_lock_release_recursive>
 8015752:	bf00      	nop
 8015754:	20007d04 	.word	0x20007d04

08015758 <asin>:
 8015758:	b538      	push	{r3, r4, r5, lr}
 801575a:	ed2d 8b02 	vpush	{d8}
 801575e:	ec55 4b10 	vmov	r4, r5, d0
 8015762:	f000 fb29 	bl	8015db8 <__ieee754_asin>
 8015766:	4622      	mov	r2, r4
 8015768:	462b      	mov	r3, r5
 801576a:	4620      	mov	r0, r4
 801576c:	4629      	mov	r1, r5
 801576e:	eeb0 8a40 	vmov.f32	s16, s0
 8015772:	eef0 8a60 	vmov.f32	s17, s1
 8015776:	f7eb f991 	bl	8000a9c <__aeabi_dcmpun>
 801577a:	b9a8      	cbnz	r0, 80157a8 <asin+0x50>
 801577c:	ec45 4b10 	vmov	d0, r4, r5
 8015780:	f000 f8a2 	bl	80158c8 <fabs>
 8015784:	4b0c      	ldr	r3, [pc, #48]	; (80157b8 <asin+0x60>)
 8015786:	ec51 0b10 	vmov	r0, r1, d0
 801578a:	2200      	movs	r2, #0
 801578c:	f7eb f97c 	bl	8000a88 <__aeabi_dcmpgt>
 8015790:	b150      	cbz	r0, 80157a8 <asin+0x50>
 8015792:	f001 fde5 	bl	8017360 <__errno>
 8015796:	ecbd 8b02 	vpop	{d8}
 801579a:	2321      	movs	r3, #33	; 0x21
 801579c:	6003      	str	r3, [r0, #0]
 801579e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157a2:	4806      	ldr	r0, [pc, #24]	; (80157bc <asin+0x64>)
 80157a4:	f000 b89c 	b.w	80158e0 <nan>
 80157a8:	eeb0 0a48 	vmov.f32	s0, s16
 80157ac:	eef0 0a68 	vmov.f32	s1, s17
 80157b0:	ecbd 8b02 	vpop	{d8}
 80157b4:	bd38      	pop	{r3, r4, r5, pc}
 80157b6:	bf00      	nop
 80157b8:	3ff00000 	.word	0x3ff00000
 80157bc:	0801778c 	.word	0x0801778c

080157c0 <atan2>:
 80157c0:	f000 bd0e 	b.w	80161e0 <__ieee754_atan2>

080157c4 <sqrt>:
 80157c4:	b538      	push	{r3, r4, r5, lr}
 80157c6:	ed2d 8b02 	vpush	{d8}
 80157ca:	ec55 4b10 	vmov	r4, r5, d0
 80157ce:	f000 f88f 	bl	80158f0 <__ieee754_sqrt>
 80157d2:	4622      	mov	r2, r4
 80157d4:	462b      	mov	r3, r5
 80157d6:	4620      	mov	r0, r4
 80157d8:	4629      	mov	r1, r5
 80157da:	eeb0 8a40 	vmov.f32	s16, s0
 80157de:	eef0 8a60 	vmov.f32	s17, s1
 80157e2:	f7eb f95b 	bl	8000a9c <__aeabi_dcmpun>
 80157e6:	b990      	cbnz	r0, 801580e <sqrt+0x4a>
 80157e8:	2200      	movs	r2, #0
 80157ea:	2300      	movs	r3, #0
 80157ec:	4620      	mov	r0, r4
 80157ee:	4629      	mov	r1, r5
 80157f0:	f7eb f92c 	bl	8000a4c <__aeabi_dcmplt>
 80157f4:	b158      	cbz	r0, 801580e <sqrt+0x4a>
 80157f6:	f001 fdb3 	bl	8017360 <__errno>
 80157fa:	2321      	movs	r3, #33	; 0x21
 80157fc:	6003      	str	r3, [r0, #0]
 80157fe:	2200      	movs	r2, #0
 8015800:	2300      	movs	r3, #0
 8015802:	4610      	mov	r0, r2
 8015804:	4619      	mov	r1, r3
 8015806:	f7ea ffd9 	bl	80007bc <__aeabi_ddiv>
 801580a:	ec41 0b18 	vmov	d8, r0, r1
 801580e:	eeb0 0a48 	vmov.f32	s0, s16
 8015812:	eef0 0a68 	vmov.f32	s1, s17
 8015816:	ecbd 8b02 	vpop	{d8}
 801581a:	bd38      	pop	{r3, r4, r5, pc}
 801581c:	0000      	movs	r0, r0
	...

08015820 <cos>:
 8015820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015822:	ec53 2b10 	vmov	r2, r3, d0
 8015826:	4826      	ldr	r0, [pc, #152]	; (80158c0 <cos+0xa0>)
 8015828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801582c:	4281      	cmp	r1, r0
 801582e:	dc06      	bgt.n	801583e <cos+0x1e>
 8015830:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80158b8 <cos+0x98>
 8015834:	b005      	add	sp, #20
 8015836:	f85d eb04 	ldr.w	lr, [sp], #4
 801583a:	f000 b935 	b.w	8015aa8 <__kernel_cos>
 801583e:	4821      	ldr	r0, [pc, #132]	; (80158c4 <cos+0xa4>)
 8015840:	4281      	cmp	r1, r0
 8015842:	dd09      	ble.n	8015858 <cos+0x38>
 8015844:	ee10 0a10 	vmov	r0, s0
 8015848:	4619      	mov	r1, r3
 801584a:	f7ea fcd5 	bl	80001f8 <__aeabi_dsub>
 801584e:	ec41 0b10 	vmov	d0, r0, r1
 8015852:	b005      	add	sp, #20
 8015854:	f85d fb04 	ldr.w	pc, [sp], #4
 8015858:	4668      	mov	r0, sp
 801585a:	f000 fd89 	bl	8016370 <__ieee754_rem_pio2>
 801585e:	f000 0003 	and.w	r0, r0, #3
 8015862:	2801      	cmp	r0, #1
 8015864:	d00b      	beq.n	801587e <cos+0x5e>
 8015866:	2802      	cmp	r0, #2
 8015868:	d016      	beq.n	8015898 <cos+0x78>
 801586a:	b9e0      	cbnz	r0, 80158a6 <cos+0x86>
 801586c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015870:	ed9d 0b00 	vldr	d0, [sp]
 8015874:	f000 f918 	bl	8015aa8 <__kernel_cos>
 8015878:	ec51 0b10 	vmov	r0, r1, d0
 801587c:	e7e7      	b.n	801584e <cos+0x2e>
 801587e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015882:	ed9d 0b00 	vldr	d0, [sp]
 8015886:	f000 f9d7 	bl	8015c38 <__kernel_sin>
 801588a:	ec53 2b10 	vmov	r2, r3, d0
 801588e:	ee10 0a10 	vmov	r0, s0
 8015892:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015896:	e7da      	b.n	801584e <cos+0x2e>
 8015898:	ed9d 1b02 	vldr	d1, [sp, #8]
 801589c:	ed9d 0b00 	vldr	d0, [sp]
 80158a0:	f000 f902 	bl	8015aa8 <__kernel_cos>
 80158a4:	e7f1      	b.n	801588a <cos+0x6a>
 80158a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80158aa:	ed9d 0b00 	vldr	d0, [sp]
 80158ae:	2001      	movs	r0, #1
 80158b0:	f000 f9c2 	bl	8015c38 <__kernel_sin>
 80158b4:	e7e0      	b.n	8015878 <cos+0x58>
 80158b6:	bf00      	nop
	...
 80158c0:	3fe921fb 	.word	0x3fe921fb
 80158c4:	7fefffff 	.word	0x7fefffff

080158c8 <fabs>:
 80158c8:	ec51 0b10 	vmov	r0, r1, d0
 80158cc:	ee10 2a10 	vmov	r2, s0
 80158d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80158d4:	ec43 2b10 	vmov	d0, r2, r3
 80158d8:	4770      	bx	lr
 80158da:	0000      	movs	r0, r0
 80158dc:	0000      	movs	r0, r0
	...

080158e0 <nan>:
 80158e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80158e8 <nan+0x8>
 80158e4:	4770      	bx	lr
 80158e6:	bf00      	nop
 80158e8:	00000000 	.word	0x00000000
 80158ec:	7ff80000 	.word	0x7ff80000

080158f0 <__ieee754_sqrt>:
 80158f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158f4:	ec55 4b10 	vmov	r4, r5, d0
 80158f8:	4e67      	ldr	r6, [pc, #412]	; (8015a98 <__ieee754_sqrt+0x1a8>)
 80158fa:	43ae      	bics	r6, r5
 80158fc:	ee10 0a10 	vmov	r0, s0
 8015900:	ee10 2a10 	vmov	r2, s0
 8015904:	4629      	mov	r1, r5
 8015906:	462b      	mov	r3, r5
 8015908:	d10d      	bne.n	8015926 <__ieee754_sqrt+0x36>
 801590a:	f7ea fe2d 	bl	8000568 <__aeabi_dmul>
 801590e:	4602      	mov	r2, r0
 8015910:	460b      	mov	r3, r1
 8015912:	4620      	mov	r0, r4
 8015914:	4629      	mov	r1, r5
 8015916:	f7ea fc71 	bl	80001fc <__adddf3>
 801591a:	4604      	mov	r4, r0
 801591c:	460d      	mov	r5, r1
 801591e:	ec45 4b10 	vmov	d0, r4, r5
 8015922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015926:	2d00      	cmp	r5, #0
 8015928:	dc0b      	bgt.n	8015942 <__ieee754_sqrt+0x52>
 801592a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801592e:	4326      	orrs	r6, r4
 8015930:	d0f5      	beq.n	801591e <__ieee754_sqrt+0x2e>
 8015932:	b135      	cbz	r5, 8015942 <__ieee754_sqrt+0x52>
 8015934:	f7ea fc60 	bl	80001f8 <__aeabi_dsub>
 8015938:	4602      	mov	r2, r0
 801593a:	460b      	mov	r3, r1
 801593c:	f7ea ff3e 	bl	80007bc <__aeabi_ddiv>
 8015940:	e7eb      	b.n	801591a <__ieee754_sqrt+0x2a>
 8015942:	1509      	asrs	r1, r1, #20
 8015944:	f000 808d 	beq.w	8015a62 <__ieee754_sqrt+0x172>
 8015948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801594c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8015950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015954:	07c9      	lsls	r1, r1, #31
 8015956:	bf5c      	itt	pl
 8015958:	005b      	lslpl	r3, r3, #1
 801595a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801595e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015962:	bf58      	it	pl
 8015964:	0052      	lslpl	r2, r2, #1
 8015966:	2500      	movs	r5, #0
 8015968:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801596c:	1076      	asrs	r6, r6, #1
 801596e:	0052      	lsls	r2, r2, #1
 8015970:	f04f 0e16 	mov.w	lr, #22
 8015974:	46ac      	mov	ip, r5
 8015976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801597a:	eb0c 0001 	add.w	r0, ip, r1
 801597e:	4298      	cmp	r0, r3
 8015980:	bfde      	ittt	le
 8015982:	1a1b      	suble	r3, r3, r0
 8015984:	eb00 0c01 	addle.w	ip, r0, r1
 8015988:	186d      	addle	r5, r5, r1
 801598a:	005b      	lsls	r3, r3, #1
 801598c:	f1be 0e01 	subs.w	lr, lr, #1
 8015990:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015994:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015998:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801599c:	d1ed      	bne.n	801597a <__ieee754_sqrt+0x8a>
 801599e:	4674      	mov	r4, lr
 80159a0:	2720      	movs	r7, #32
 80159a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80159a6:	4563      	cmp	r3, ip
 80159a8:	eb01 000e 	add.w	r0, r1, lr
 80159ac:	dc02      	bgt.n	80159b4 <__ieee754_sqrt+0xc4>
 80159ae:	d113      	bne.n	80159d8 <__ieee754_sqrt+0xe8>
 80159b0:	4290      	cmp	r0, r2
 80159b2:	d811      	bhi.n	80159d8 <__ieee754_sqrt+0xe8>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	eb00 0e01 	add.w	lr, r0, r1
 80159ba:	da57      	bge.n	8015a6c <__ieee754_sqrt+0x17c>
 80159bc:	f1be 0f00 	cmp.w	lr, #0
 80159c0:	db54      	blt.n	8015a6c <__ieee754_sqrt+0x17c>
 80159c2:	f10c 0801 	add.w	r8, ip, #1
 80159c6:	eba3 030c 	sub.w	r3, r3, ip
 80159ca:	4290      	cmp	r0, r2
 80159cc:	bf88      	it	hi
 80159ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80159d2:	1a12      	subs	r2, r2, r0
 80159d4:	440c      	add	r4, r1
 80159d6:	46c4      	mov	ip, r8
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	3f01      	subs	r7, #1
 80159dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80159e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80159e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80159e8:	d1dd      	bne.n	80159a6 <__ieee754_sqrt+0xb6>
 80159ea:	4313      	orrs	r3, r2
 80159ec:	d01b      	beq.n	8015a26 <__ieee754_sqrt+0x136>
 80159ee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015a9c <__ieee754_sqrt+0x1ac>
 80159f2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8015aa0 <__ieee754_sqrt+0x1b0>
 80159f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80159fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80159fe:	f7ea fbfb 	bl	80001f8 <__aeabi_dsub>
 8015a02:	e9da 8900 	ldrd	r8, r9, [sl]
 8015a06:	4602      	mov	r2, r0
 8015a08:	460b      	mov	r3, r1
 8015a0a:	4640      	mov	r0, r8
 8015a0c:	4649      	mov	r1, r9
 8015a0e:	f7eb f827 	bl	8000a60 <__aeabi_dcmple>
 8015a12:	b140      	cbz	r0, 8015a26 <__ieee754_sqrt+0x136>
 8015a14:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015a18:	e9da 0100 	ldrd	r0, r1, [sl]
 8015a1c:	e9db 2300 	ldrd	r2, r3, [fp]
 8015a20:	d126      	bne.n	8015a70 <__ieee754_sqrt+0x180>
 8015a22:	3501      	adds	r5, #1
 8015a24:	463c      	mov	r4, r7
 8015a26:	106a      	asrs	r2, r5, #1
 8015a28:	0863      	lsrs	r3, r4, #1
 8015a2a:	07e9      	lsls	r1, r5, #31
 8015a2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015a30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015a34:	bf48      	it	mi
 8015a36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015a3a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8015a3e:	461c      	mov	r4, r3
 8015a40:	e76d      	b.n	801591e <__ieee754_sqrt+0x2e>
 8015a42:	0ad3      	lsrs	r3, r2, #11
 8015a44:	3815      	subs	r0, #21
 8015a46:	0552      	lsls	r2, r2, #21
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d0fa      	beq.n	8015a42 <__ieee754_sqrt+0x152>
 8015a4c:	02dc      	lsls	r4, r3, #11
 8015a4e:	d50a      	bpl.n	8015a66 <__ieee754_sqrt+0x176>
 8015a50:	f1c1 0420 	rsb	r4, r1, #32
 8015a54:	fa22 f404 	lsr.w	r4, r2, r4
 8015a58:	1e4d      	subs	r5, r1, #1
 8015a5a:	408a      	lsls	r2, r1
 8015a5c:	4323      	orrs	r3, r4
 8015a5e:	1b41      	subs	r1, r0, r5
 8015a60:	e772      	b.n	8015948 <__ieee754_sqrt+0x58>
 8015a62:	4608      	mov	r0, r1
 8015a64:	e7f0      	b.n	8015a48 <__ieee754_sqrt+0x158>
 8015a66:	005b      	lsls	r3, r3, #1
 8015a68:	3101      	adds	r1, #1
 8015a6a:	e7ef      	b.n	8015a4c <__ieee754_sqrt+0x15c>
 8015a6c:	46e0      	mov	r8, ip
 8015a6e:	e7aa      	b.n	80159c6 <__ieee754_sqrt+0xd6>
 8015a70:	f7ea fbc4 	bl	80001fc <__adddf3>
 8015a74:	e9da 8900 	ldrd	r8, r9, [sl]
 8015a78:	4602      	mov	r2, r0
 8015a7a:	460b      	mov	r3, r1
 8015a7c:	4640      	mov	r0, r8
 8015a7e:	4649      	mov	r1, r9
 8015a80:	f7ea ffe4 	bl	8000a4c <__aeabi_dcmplt>
 8015a84:	b120      	cbz	r0, 8015a90 <__ieee754_sqrt+0x1a0>
 8015a86:	1ca0      	adds	r0, r4, #2
 8015a88:	bf08      	it	eq
 8015a8a:	3501      	addeq	r5, #1
 8015a8c:	3402      	adds	r4, #2
 8015a8e:	e7ca      	b.n	8015a26 <__ieee754_sqrt+0x136>
 8015a90:	3401      	adds	r4, #1
 8015a92:	f024 0401 	bic.w	r4, r4, #1
 8015a96:	e7c6      	b.n	8015a26 <__ieee754_sqrt+0x136>
 8015a98:	7ff00000 	.word	0x7ff00000
 8015a9c:	20000180 	.word	0x20000180
 8015aa0:	20000188 	.word	0x20000188
 8015aa4:	00000000 	.word	0x00000000

08015aa8 <__kernel_cos>:
 8015aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aac:	ec57 6b10 	vmov	r6, r7, d0
 8015ab0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015ab4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015ab8:	ed8d 1b00 	vstr	d1, [sp]
 8015abc:	da07      	bge.n	8015ace <__kernel_cos+0x26>
 8015abe:	ee10 0a10 	vmov	r0, s0
 8015ac2:	4639      	mov	r1, r7
 8015ac4:	f7eb f800 	bl	8000ac8 <__aeabi_d2iz>
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	f000 8088 	beq.w	8015bde <__kernel_cos+0x136>
 8015ace:	4632      	mov	r2, r6
 8015ad0:	463b      	mov	r3, r7
 8015ad2:	4630      	mov	r0, r6
 8015ad4:	4639      	mov	r1, r7
 8015ad6:	f7ea fd47 	bl	8000568 <__aeabi_dmul>
 8015ada:	4b51      	ldr	r3, [pc, #324]	; (8015c20 <__kernel_cos+0x178>)
 8015adc:	2200      	movs	r2, #0
 8015ade:	4604      	mov	r4, r0
 8015ae0:	460d      	mov	r5, r1
 8015ae2:	f7ea fd41 	bl	8000568 <__aeabi_dmul>
 8015ae6:	a340      	add	r3, pc, #256	; (adr r3, 8015be8 <__kernel_cos+0x140>)
 8015ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aec:	4682      	mov	sl, r0
 8015aee:	468b      	mov	fp, r1
 8015af0:	4620      	mov	r0, r4
 8015af2:	4629      	mov	r1, r5
 8015af4:	f7ea fd38 	bl	8000568 <__aeabi_dmul>
 8015af8:	a33d      	add	r3, pc, #244	; (adr r3, 8015bf0 <__kernel_cos+0x148>)
 8015afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afe:	f7ea fb7d 	bl	80001fc <__adddf3>
 8015b02:	4622      	mov	r2, r4
 8015b04:	462b      	mov	r3, r5
 8015b06:	f7ea fd2f 	bl	8000568 <__aeabi_dmul>
 8015b0a:	a33b      	add	r3, pc, #236	; (adr r3, 8015bf8 <__kernel_cos+0x150>)
 8015b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b10:	f7ea fb72 	bl	80001f8 <__aeabi_dsub>
 8015b14:	4622      	mov	r2, r4
 8015b16:	462b      	mov	r3, r5
 8015b18:	f7ea fd26 	bl	8000568 <__aeabi_dmul>
 8015b1c:	a338      	add	r3, pc, #224	; (adr r3, 8015c00 <__kernel_cos+0x158>)
 8015b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b22:	f7ea fb6b 	bl	80001fc <__adddf3>
 8015b26:	4622      	mov	r2, r4
 8015b28:	462b      	mov	r3, r5
 8015b2a:	f7ea fd1d 	bl	8000568 <__aeabi_dmul>
 8015b2e:	a336      	add	r3, pc, #216	; (adr r3, 8015c08 <__kernel_cos+0x160>)
 8015b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b34:	f7ea fb60 	bl	80001f8 <__aeabi_dsub>
 8015b38:	4622      	mov	r2, r4
 8015b3a:	462b      	mov	r3, r5
 8015b3c:	f7ea fd14 	bl	8000568 <__aeabi_dmul>
 8015b40:	a333      	add	r3, pc, #204	; (adr r3, 8015c10 <__kernel_cos+0x168>)
 8015b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b46:	f7ea fb59 	bl	80001fc <__adddf3>
 8015b4a:	4622      	mov	r2, r4
 8015b4c:	462b      	mov	r3, r5
 8015b4e:	f7ea fd0b 	bl	8000568 <__aeabi_dmul>
 8015b52:	4622      	mov	r2, r4
 8015b54:	462b      	mov	r3, r5
 8015b56:	f7ea fd07 	bl	8000568 <__aeabi_dmul>
 8015b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b5e:	4604      	mov	r4, r0
 8015b60:	460d      	mov	r5, r1
 8015b62:	4630      	mov	r0, r6
 8015b64:	4639      	mov	r1, r7
 8015b66:	f7ea fcff 	bl	8000568 <__aeabi_dmul>
 8015b6a:	460b      	mov	r3, r1
 8015b6c:	4602      	mov	r2, r0
 8015b6e:	4629      	mov	r1, r5
 8015b70:	4620      	mov	r0, r4
 8015b72:	f7ea fb41 	bl	80001f8 <__aeabi_dsub>
 8015b76:	4b2b      	ldr	r3, [pc, #172]	; (8015c24 <__kernel_cos+0x17c>)
 8015b78:	4598      	cmp	r8, r3
 8015b7a:	4606      	mov	r6, r0
 8015b7c:	460f      	mov	r7, r1
 8015b7e:	dc10      	bgt.n	8015ba2 <__kernel_cos+0xfa>
 8015b80:	4602      	mov	r2, r0
 8015b82:	460b      	mov	r3, r1
 8015b84:	4650      	mov	r0, sl
 8015b86:	4659      	mov	r1, fp
 8015b88:	f7ea fb36 	bl	80001f8 <__aeabi_dsub>
 8015b8c:	460b      	mov	r3, r1
 8015b8e:	4926      	ldr	r1, [pc, #152]	; (8015c28 <__kernel_cos+0x180>)
 8015b90:	4602      	mov	r2, r0
 8015b92:	2000      	movs	r0, #0
 8015b94:	f7ea fb30 	bl	80001f8 <__aeabi_dsub>
 8015b98:	ec41 0b10 	vmov	d0, r0, r1
 8015b9c:	b003      	add	sp, #12
 8015b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ba2:	4b22      	ldr	r3, [pc, #136]	; (8015c2c <__kernel_cos+0x184>)
 8015ba4:	4920      	ldr	r1, [pc, #128]	; (8015c28 <__kernel_cos+0x180>)
 8015ba6:	4598      	cmp	r8, r3
 8015ba8:	bfcc      	ite	gt
 8015baa:	4d21      	ldrgt	r5, [pc, #132]	; (8015c30 <__kernel_cos+0x188>)
 8015bac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8015bb0:	2400      	movs	r4, #0
 8015bb2:	4622      	mov	r2, r4
 8015bb4:	462b      	mov	r3, r5
 8015bb6:	2000      	movs	r0, #0
 8015bb8:	f7ea fb1e 	bl	80001f8 <__aeabi_dsub>
 8015bbc:	4622      	mov	r2, r4
 8015bbe:	4680      	mov	r8, r0
 8015bc0:	4689      	mov	r9, r1
 8015bc2:	462b      	mov	r3, r5
 8015bc4:	4650      	mov	r0, sl
 8015bc6:	4659      	mov	r1, fp
 8015bc8:	f7ea fb16 	bl	80001f8 <__aeabi_dsub>
 8015bcc:	4632      	mov	r2, r6
 8015bce:	463b      	mov	r3, r7
 8015bd0:	f7ea fb12 	bl	80001f8 <__aeabi_dsub>
 8015bd4:	4602      	mov	r2, r0
 8015bd6:	460b      	mov	r3, r1
 8015bd8:	4640      	mov	r0, r8
 8015bda:	4649      	mov	r1, r9
 8015bdc:	e7da      	b.n	8015b94 <__kernel_cos+0xec>
 8015bde:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015c18 <__kernel_cos+0x170>
 8015be2:	e7db      	b.n	8015b9c <__kernel_cos+0xf4>
 8015be4:	f3af 8000 	nop.w
 8015be8:	be8838d4 	.word	0xbe8838d4
 8015bec:	bda8fae9 	.word	0xbda8fae9
 8015bf0:	bdb4b1c4 	.word	0xbdb4b1c4
 8015bf4:	3e21ee9e 	.word	0x3e21ee9e
 8015bf8:	809c52ad 	.word	0x809c52ad
 8015bfc:	3e927e4f 	.word	0x3e927e4f
 8015c00:	19cb1590 	.word	0x19cb1590
 8015c04:	3efa01a0 	.word	0x3efa01a0
 8015c08:	16c15177 	.word	0x16c15177
 8015c0c:	3f56c16c 	.word	0x3f56c16c
 8015c10:	5555554c 	.word	0x5555554c
 8015c14:	3fa55555 	.word	0x3fa55555
 8015c18:	00000000 	.word	0x00000000
 8015c1c:	3ff00000 	.word	0x3ff00000
 8015c20:	3fe00000 	.word	0x3fe00000
 8015c24:	3fd33332 	.word	0x3fd33332
 8015c28:	3ff00000 	.word	0x3ff00000
 8015c2c:	3fe90000 	.word	0x3fe90000
 8015c30:	3fd20000 	.word	0x3fd20000
 8015c34:	00000000 	.word	0x00000000

08015c38 <__kernel_sin>:
 8015c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c3c:	ed2d 8b04 	vpush	{d8-d9}
 8015c40:	eeb0 8a41 	vmov.f32	s16, s2
 8015c44:	eef0 8a61 	vmov.f32	s17, s3
 8015c48:	ec55 4b10 	vmov	r4, r5, d0
 8015c4c:	b083      	sub	sp, #12
 8015c4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015c52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015c56:	9001      	str	r0, [sp, #4]
 8015c58:	da06      	bge.n	8015c68 <__kernel_sin+0x30>
 8015c5a:	ee10 0a10 	vmov	r0, s0
 8015c5e:	4629      	mov	r1, r5
 8015c60:	f7ea ff32 	bl	8000ac8 <__aeabi_d2iz>
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d051      	beq.n	8015d0c <__kernel_sin+0xd4>
 8015c68:	4622      	mov	r2, r4
 8015c6a:	462b      	mov	r3, r5
 8015c6c:	4620      	mov	r0, r4
 8015c6e:	4629      	mov	r1, r5
 8015c70:	f7ea fc7a 	bl	8000568 <__aeabi_dmul>
 8015c74:	4682      	mov	sl, r0
 8015c76:	468b      	mov	fp, r1
 8015c78:	4602      	mov	r2, r0
 8015c7a:	460b      	mov	r3, r1
 8015c7c:	4620      	mov	r0, r4
 8015c7e:	4629      	mov	r1, r5
 8015c80:	f7ea fc72 	bl	8000568 <__aeabi_dmul>
 8015c84:	a341      	add	r3, pc, #260	; (adr r3, 8015d8c <__kernel_sin+0x154>)
 8015c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8a:	4680      	mov	r8, r0
 8015c8c:	4689      	mov	r9, r1
 8015c8e:	4650      	mov	r0, sl
 8015c90:	4659      	mov	r1, fp
 8015c92:	f7ea fc69 	bl	8000568 <__aeabi_dmul>
 8015c96:	a33f      	add	r3, pc, #252	; (adr r3, 8015d94 <__kernel_sin+0x15c>)
 8015c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9c:	f7ea faac 	bl	80001f8 <__aeabi_dsub>
 8015ca0:	4652      	mov	r2, sl
 8015ca2:	465b      	mov	r3, fp
 8015ca4:	f7ea fc60 	bl	8000568 <__aeabi_dmul>
 8015ca8:	a33c      	add	r3, pc, #240	; (adr r3, 8015d9c <__kernel_sin+0x164>)
 8015caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cae:	f7ea faa5 	bl	80001fc <__adddf3>
 8015cb2:	4652      	mov	r2, sl
 8015cb4:	465b      	mov	r3, fp
 8015cb6:	f7ea fc57 	bl	8000568 <__aeabi_dmul>
 8015cba:	a33a      	add	r3, pc, #232	; (adr r3, 8015da4 <__kernel_sin+0x16c>)
 8015cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc0:	f7ea fa9a 	bl	80001f8 <__aeabi_dsub>
 8015cc4:	4652      	mov	r2, sl
 8015cc6:	465b      	mov	r3, fp
 8015cc8:	f7ea fc4e 	bl	8000568 <__aeabi_dmul>
 8015ccc:	a337      	add	r3, pc, #220	; (adr r3, 8015dac <__kernel_sin+0x174>)
 8015cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd2:	f7ea fa93 	bl	80001fc <__adddf3>
 8015cd6:	9b01      	ldr	r3, [sp, #4]
 8015cd8:	4606      	mov	r6, r0
 8015cda:	460f      	mov	r7, r1
 8015cdc:	b9eb      	cbnz	r3, 8015d1a <__kernel_sin+0xe2>
 8015cde:	4602      	mov	r2, r0
 8015ce0:	460b      	mov	r3, r1
 8015ce2:	4650      	mov	r0, sl
 8015ce4:	4659      	mov	r1, fp
 8015ce6:	f7ea fc3f 	bl	8000568 <__aeabi_dmul>
 8015cea:	a325      	add	r3, pc, #148	; (adr r3, 8015d80 <__kernel_sin+0x148>)
 8015cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf0:	f7ea fa82 	bl	80001f8 <__aeabi_dsub>
 8015cf4:	4642      	mov	r2, r8
 8015cf6:	464b      	mov	r3, r9
 8015cf8:	f7ea fc36 	bl	8000568 <__aeabi_dmul>
 8015cfc:	4602      	mov	r2, r0
 8015cfe:	460b      	mov	r3, r1
 8015d00:	4620      	mov	r0, r4
 8015d02:	4629      	mov	r1, r5
 8015d04:	f7ea fa7a 	bl	80001fc <__adddf3>
 8015d08:	4604      	mov	r4, r0
 8015d0a:	460d      	mov	r5, r1
 8015d0c:	ec45 4b10 	vmov	d0, r4, r5
 8015d10:	b003      	add	sp, #12
 8015d12:	ecbd 8b04 	vpop	{d8-d9}
 8015d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d1a:	4b1b      	ldr	r3, [pc, #108]	; (8015d88 <__kernel_sin+0x150>)
 8015d1c:	ec51 0b18 	vmov	r0, r1, d8
 8015d20:	2200      	movs	r2, #0
 8015d22:	f7ea fc21 	bl	8000568 <__aeabi_dmul>
 8015d26:	4632      	mov	r2, r6
 8015d28:	ec41 0b19 	vmov	d9, r0, r1
 8015d2c:	463b      	mov	r3, r7
 8015d2e:	4640      	mov	r0, r8
 8015d30:	4649      	mov	r1, r9
 8015d32:	f7ea fc19 	bl	8000568 <__aeabi_dmul>
 8015d36:	4602      	mov	r2, r0
 8015d38:	460b      	mov	r3, r1
 8015d3a:	ec51 0b19 	vmov	r0, r1, d9
 8015d3e:	f7ea fa5b 	bl	80001f8 <__aeabi_dsub>
 8015d42:	4652      	mov	r2, sl
 8015d44:	465b      	mov	r3, fp
 8015d46:	f7ea fc0f 	bl	8000568 <__aeabi_dmul>
 8015d4a:	ec53 2b18 	vmov	r2, r3, d8
 8015d4e:	f7ea fa53 	bl	80001f8 <__aeabi_dsub>
 8015d52:	a30b      	add	r3, pc, #44	; (adr r3, 8015d80 <__kernel_sin+0x148>)
 8015d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d58:	4606      	mov	r6, r0
 8015d5a:	460f      	mov	r7, r1
 8015d5c:	4640      	mov	r0, r8
 8015d5e:	4649      	mov	r1, r9
 8015d60:	f7ea fc02 	bl	8000568 <__aeabi_dmul>
 8015d64:	4602      	mov	r2, r0
 8015d66:	460b      	mov	r3, r1
 8015d68:	4630      	mov	r0, r6
 8015d6a:	4639      	mov	r1, r7
 8015d6c:	f7ea fa46 	bl	80001fc <__adddf3>
 8015d70:	4602      	mov	r2, r0
 8015d72:	460b      	mov	r3, r1
 8015d74:	4620      	mov	r0, r4
 8015d76:	4629      	mov	r1, r5
 8015d78:	f7ea fa3e 	bl	80001f8 <__aeabi_dsub>
 8015d7c:	e7c4      	b.n	8015d08 <__kernel_sin+0xd0>
 8015d7e:	bf00      	nop
 8015d80:	55555549 	.word	0x55555549
 8015d84:	3fc55555 	.word	0x3fc55555
 8015d88:	3fe00000 	.word	0x3fe00000
 8015d8c:	5acfd57c 	.word	0x5acfd57c
 8015d90:	3de5d93a 	.word	0x3de5d93a
 8015d94:	8a2b9ceb 	.word	0x8a2b9ceb
 8015d98:	3e5ae5e6 	.word	0x3e5ae5e6
 8015d9c:	57b1fe7d 	.word	0x57b1fe7d
 8015da0:	3ec71de3 	.word	0x3ec71de3
 8015da4:	19c161d5 	.word	0x19c161d5
 8015da8:	3f2a01a0 	.word	0x3f2a01a0
 8015dac:	1110f8a6 	.word	0x1110f8a6
 8015db0:	3f811111 	.word	0x3f811111
 8015db4:	00000000 	.word	0x00000000

08015db8 <__ieee754_asin>:
 8015db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dbc:	ed2d 8b04 	vpush	{d8-d9}
 8015dc0:	ec55 4b10 	vmov	r4, r5, d0
 8015dc4:	4bcc      	ldr	r3, [pc, #816]	; (80160f8 <__ieee754_asin+0x340>)
 8015dc6:	b083      	sub	sp, #12
 8015dc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8015dcc:	4598      	cmp	r8, r3
 8015dce:	9501      	str	r5, [sp, #4]
 8015dd0:	dd33      	ble.n	8015e3a <__ieee754_asin+0x82>
 8015dd2:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8015dd6:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8015dda:	ea58 0804 	orrs.w	r8, r8, r4
 8015dde:	d117      	bne.n	8015e10 <__ieee754_asin+0x58>
 8015de0:	a3ab      	add	r3, pc, #684	; (adr r3, 8016090 <__ieee754_asin+0x2d8>)
 8015de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015de6:	ee10 0a10 	vmov	r0, s0
 8015dea:	4629      	mov	r1, r5
 8015dec:	f7ea fbbc 	bl	8000568 <__aeabi_dmul>
 8015df0:	a3a9      	add	r3, pc, #676	; (adr r3, 8016098 <__ieee754_asin+0x2e0>)
 8015df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df6:	4606      	mov	r6, r0
 8015df8:	460f      	mov	r7, r1
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	4629      	mov	r1, r5
 8015dfe:	f7ea fbb3 	bl	8000568 <__aeabi_dmul>
 8015e02:	4602      	mov	r2, r0
 8015e04:	460b      	mov	r3, r1
 8015e06:	4630      	mov	r0, r6
 8015e08:	4639      	mov	r1, r7
 8015e0a:	f7ea f9f7 	bl	80001fc <__adddf3>
 8015e0e:	e00b      	b.n	8015e28 <__ieee754_asin+0x70>
 8015e10:	ee10 2a10 	vmov	r2, s0
 8015e14:	462b      	mov	r3, r5
 8015e16:	ee10 0a10 	vmov	r0, s0
 8015e1a:	4629      	mov	r1, r5
 8015e1c:	f7ea f9ec 	bl	80001f8 <__aeabi_dsub>
 8015e20:	4602      	mov	r2, r0
 8015e22:	460b      	mov	r3, r1
 8015e24:	f7ea fcca 	bl	80007bc <__aeabi_ddiv>
 8015e28:	4604      	mov	r4, r0
 8015e2a:	460d      	mov	r5, r1
 8015e2c:	ec45 4b10 	vmov	d0, r4, r5
 8015e30:	b003      	add	sp, #12
 8015e32:	ecbd 8b04 	vpop	{d8-d9}
 8015e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e3a:	4bb0      	ldr	r3, [pc, #704]	; (80160fc <__ieee754_asin+0x344>)
 8015e3c:	4598      	cmp	r8, r3
 8015e3e:	dc11      	bgt.n	8015e64 <__ieee754_asin+0xac>
 8015e40:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015e44:	f280 80ae 	bge.w	8015fa4 <__ieee754_asin+0x1ec>
 8015e48:	a395      	add	r3, pc, #596	; (adr r3, 80160a0 <__ieee754_asin+0x2e8>)
 8015e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e4e:	ee10 0a10 	vmov	r0, s0
 8015e52:	4629      	mov	r1, r5
 8015e54:	f7ea f9d2 	bl	80001fc <__adddf3>
 8015e58:	4ba9      	ldr	r3, [pc, #676]	; (8016100 <__ieee754_asin+0x348>)
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	f7ea fe14 	bl	8000a88 <__aeabi_dcmpgt>
 8015e60:	2800      	cmp	r0, #0
 8015e62:	d1e3      	bne.n	8015e2c <__ieee754_asin+0x74>
 8015e64:	ec45 4b10 	vmov	d0, r4, r5
 8015e68:	f7ff fd2e 	bl	80158c8 <fabs>
 8015e6c:	49a4      	ldr	r1, [pc, #656]	; (8016100 <__ieee754_asin+0x348>)
 8015e6e:	ec53 2b10 	vmov	r2, r3, d0
 8015e72:	2000      	movs	r0, #0
 8015e74:	f7ea f9c0 	bl	80001f8 <__aeabi_dsub>
 8015e78:	4ba2      	ldr	r3, [pc, #648]	; (8016104 <__ieee754_asin+0x34c>)
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	f7ea fb74 	bl	8000568 <__aeabi_dmul>
 8015e80:	a389      	add	r3, pc, #548	; (adr r3, 80160a8 <__ieee754_asin+0x2f0>)
 8015e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e86:	4604      	mov	r4, r0
 8015e88:	460d      	mov	r5, r1
 8015e8a:	f7ea fb6d 	bl	8000568 <__aeabi_dmul>
 8015e8e:	a388      	add	r3, pc, #544	; (adr r3, 80160b0 <__ieee754_asin+0x2f8>)
 8015e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e94:	f7ea f9b2 	bl	80001fc <__adddf3>
 8015e98:	4622      	mov	r2, r4
 8015e9a:	462b      	mov	r3, r5
 8015e9c:	f7ea fb64 	bl	8000568 <__aeabi_dmul>
 8015ea0:	a385      	add	r3, pc, #532	; (adr r3, 80160b8 <__ieee754_asin+0x300>)
 8015ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ea6:	f7ea f9a7 	bl	80001f8 <__aeabi_dsub>
 8015eaa:	4622      	mov	r2, r4
 8015eac:	462b      	mov	r3, r5
 8015eae:	f7ea fb5b 	bl	8000568 <__aeabi_dmul>
 8015eb2:	a383      	add	r3, pc, #524	; (adr r3, 80160c0 <__ieee754_asin+0x308>)
 8015eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eb8:	f7ea f9a0 	bl	80001fc <__adddf3>
 8015ebc:	4622      	mov	r2, r4
 8015ebe:	462b      	mov	r3, r5
 8015ec0:	f7ea fb52 	bl	8000568 <__aeabi_dmul>
 8015ec4:	a380      	add	r3, pc, #512	; (adr r3, 80160c8 <__ieee754_asin+0x310>)
 8015ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eca:	f7ea f995 	bl	80001f8 <__aeabi_dsub>
 8015ece:	4622      	mov	r2, r4
 8015ed0:	462b      	mov	r3, r5
 8015ed2:	f7ea fb49 	bl	8000568 <__aeabi_dmul>
 8015ed6:	a37e      	add	r3, pc, #504	; (adr r3, 80160d0 <__ieee754_asin+0x318>)
 8015ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015edc:	f7ea f98e 	bl	80001fc <__adddf3>
 8015ee0:	4622      	mov	r2, r4
 8015ee2:	462b      	mov	r3, r5
 8015ee4:	f7ea fb40 	bl	8000568 <__aeabi_dmul>
 8015ee8:	a37b      	add	r3, pc, #492	; (adr r3, 80160d8 <__ieee754_asin+0x320>)
 8015eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eee:	ec41 0b18 	vmov	d8, r0, r1
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	4629      	mov	r1, r5
 8015ef6:	f7ea fb37 	bl	8000568 <__aeabi_dmul>
 8015efa:	a379      	add	r3, pc, #484	; (adr r3, 80160e0 <__ieee754_asin+0x328>)
 8015efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f00:	f7ea f97a 	bl	80001f8 <__aeabi_dsub>
 8015f04:	4622      	mov	r2, r4
 8015f06:	462b      	mov	r3, r5
 8015f08:	f7ea fb2e 	bl	8000568 <__aeabi_dmul>
 8015f0c:	a376      	add	r3, pc, #472	; (adr r3, 80160e8 <__ieee754_asin+0x330>)
 8015f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f12:	f7ea f973 	bl	80001fc <__adddf3>
 8015f16:	4622      	mov	r2, r4
 8015f18:	462b      	mov	r3, r5
 8015f1a:	f7ea fb25 	bl	8000568 <__aeabi_dmul>
 8015f1e:	a374      	add	r3, pc, #464	; (adr r3, 80160f0 <__ieee754_asin+0x338>)
 8015f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f24:	f7ea f968 	bl	80001f8 <__aeabi_dsub>
 8015f28:	4622      	mov	r2, r4
 8015f2a:	462b      	mov	r3, r5
 8015f2c:	f7ea fb1c 	bl	8000568 <__aeabi_dmul>
 8015f30:	4b73      	ldr	r3, [pc, #460]	; (8016100 <__ieee754_asin+0x348>)
 8015f32:	2200      	movs	r2, #0
 8015f34:	f7ea f962 	bl	80001fc <__adddf3>
 8015f38:	ec45 4b10 	vmov	d0, r4, r5
 8015f3c:	4606      	mov	r6, r0
 8015f3e:	460f      	mov	r7, r1
 8015f40:	f7ff fcd6 	bl	80158f0 <__ieee754_sqrt>
 8015f44:	4b70      	ldr	r3, [pc, #448]	; (8016108 <__ieee754_asin+0x350>)
 8015f46:	4598      	cmp	r8, r3
 8015f48:	ec5b ab10 	vmov	sl, fp, d0
 8015f4c:	f340 80de 	ble.w	801610c <__ieee754_asin+0x354>
 8015f50:	4632      	mov	r2, r6
 8015f52:	463b      	mov	r3, r7
 8015f54:	ec51 0b18 	vmov	r0, r1, d8
 8015f58:	f7ea fc30 	bl	80007bc <__aeabi_ddiv>
 8015f5c:	4652      	mov	r2, sl
 8015f5e:	465b      	mov	r3, fp
 8015f60:	f7ea fb02 	bl	8000568 <__aeabi_dmul>
 8015f64:	4652      	mov	r2, sl
 8015f66:	465b      	mov	r3, fp
 8015f68:	f7ea f948 	bl	80001fc <__adddf3>
 8015f6c:	4602      	mov	r2, r0
 8015f6e:	460b      	mov	r3, r1
 8015f70:	f7ea f944 	bl	80001fc <__adddf3>
 8015f74:	a348      	add	r3, pc, #288	; (adr r3, 8016098 <__ieee754_asin+0x2e0>)
 8015f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7a:	f7ea f93d 	bl	80001f8 <__aeabi_dsub>
 8015f7e:	4602      	mov	r2, r0
 8015f80:	460b      	mov	r3, r1
 8015f82:	a143      	add	r1, pc, #268	; (adr r1, 8016090 <__ieee754_asin+0x2d8>)
 8015f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f88:	f7ea f936 	bl	80001f8 <__aeabi_dsub>
 8015f8c:	9b01      	ldr	r3, [sp, #4]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	bfdc      	itt	le
 8015f92:	4602      	movle	r2, r0
 8015f94:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8015f98:	4604      	mov	r4, r0
 8015f9a:	460d      	mov	r5, r1
 8015f9c:	bfdc      	itt	le
 8015f9e:	4614      	movle	r4, r2
 8015fa0:	461d      	movle	r5, r3
 8015fa2:	e743      	b.n	8015e2c <__ieee754_asin+0x74>
 8015fa4:	ee10 2a10 	vmov	r2, s0
 8015fa8:	ee10 0a10 	vmov	r0, s0
 8015fac:	462b      	mov	r3, r5
 8015fae:	4629      	mov	r1, r5
 8015fb0:	f7ea fada 	bl	8000568 <__aeabi_dmul>
 8015fb4:	a33c      	add	r3, pc, #240	; (adr r3, 80160a8 <__ieee754_asin+0x2f0>)
 8015fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fba:	4606      	mov	r6, r0
 8015fbc:	460f      	mov	r7, r1
 8015fbe:	f7ea fad3 	bl	8000568 <__aeabi_dmul>
 8015fc2:	a33b      	add	r3, pc, #236	; (adr r3, 80160b0 <__ieee754_asin+0x2f8>)
 8015fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fc8:	f7ea f918 	bl	80001fc <__adddf3>
 8015fcc:	4632      	mov	r2, r6
 8015fce:	463b      	mov	r3, r7
 8015fd0:	f7ea faca 	bl	8000568 <__aeabi_dmul>
 8015fd4:	a338      	add	r3, pc, #224	; (adr r3, 80160b8 <__ieee754_asin+0x300>)
 8015fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fda:	f7ea f90d 	bl	80001f8 <__aeabi_dsub>
 8015fde:	4632      	mov	r2, r6
 8015fe0:	463b      	mov	r3, r7
 8015fe2:	f7ea fac1 	bl	8000568 <__aeabi_dmul>
 8015fe6:	a336      	add	r3, pc, #216	; (adr r3, 80160c0 <__ieee754_asin+0x308>)
 8015fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fec:	f7ea f906 	bl	80001fc <__adddf3>
 8015ff0:	4632      	mov	r2, r6
 8015ff2:	463b      	mov	r3, r7
 8015ff4:	f7ea fab8 	bl	8000568 <__aeabi_dmul>
 8015ff8:	a333      	add	r3, pc, #204	; (adr r3, 80160c8 <__ieee754_asin+0x310>)
 8015ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ffe:	f7ea f8fb 	bl	80001f8 <__aeabi_dsub>
 8016002:	4632      	mov	r2, r6
 8016004:	463b      	mov	r3, r7
 8016006:	f7ea faaf 	bl	8000568 <__aeabi_dmul>
 801600a:	a331      	add	r3, pc, #196	; (adr r3, 80160d0 <__ieee754_asin+0x318>)
 801600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016010:	f7ea f8f4 	bl	80001fc <__adddf3>
 8016014:	4632      	mov	r2, r6
 8016016:	463b      	mov	r3, r7
 8016018:	f7ea faa6 	bl	8000568 <__aeabi_dmul>
 801601c:	a32e      	add	r3, pc, #184	; (adr r3, 80160d8 <__ieee754_asin+0x320>)
 801601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016022:	4680      	mov	r8, r0
 8016024:	4689      	mov	r9, r1
 8016026:	4630      	mov	r0, r6
 8016028:	4639      	mov	r1, r7
 801602a:	f7ea fa9d 	bl	8000568 <__aeabi_dmul>
 801602e:	a32c      	add	r3, pc, #176	; (adr r3, 80160e0 <__ieee754_asin+0x328>)
 8016030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016034:	f7ea f8e0 	bl	80001f8 <__aeabi_dsub>
 8016038:	4632      	mov	r2, r6
 801603a:	463b      	mov	r3, r7
 801603c:	f7ea fa94 	bl	8000568 <__aeabi_dmul>
 8016040:	a329      	add	r3, pc, #164	; (adr r3, 80160e8 <__ieee754_asin+0x330>)
 8016042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016046:	f7ea f8d9 	bl	80001fc <__adddf3>
 801604a:	4632      	mov	r2, r6
 801604c:	463b      	mov	r3, r7
 801604e:	f7ea fa8b 	bl	8000568 <__aeabi_dmul>
 8016052:	a327      	add	r3, pc, #156	; (adr r3, 80160f0 <__ieee754_asin+0x338>)
 8016054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016058:	f7ea f8ce 	bl	80001f8 <__aeabi_dsub>
 801605c:	4632      	mov	r2, r6
 801605e:	463b      	mov	r3, r7
 8016060:	f7ea fa82 	bl	8000568 <__aeabi_dmul>
 8016064:	4b26      	ldr	r3, [pc, #152]	; (8016100 <__ieee754_asin+0x348>)
 8016066:	2200      	movs	r2, #0
 8016068:	f7ea f8c8 	bl	80001fc <__adddf3>
 801606c:	4602      	mov	r2, r0
 801606e:	460b      	mov	r3, r1
 8016070:	4640      	mov	r0, r8
 8016072:	4649      	mov	r1, r9
 8016074:	f7ea fba2 	bl	80007bc <__aeabi_ddiv>
 8016078:	4622      	mov	r2, r4
 801607a:	462b      	mov	r3, r5
 801607c:	f7ea fa74 	bl	8000568 <__aeabi_dmul>
 8016080:	4602      	mov	r2, r0
 8016082:	460b      	mov	r3, r1
 8016084:	4620      	mov	r0, r4
 8016086:	4629      	mov	r1, r5
 8016088:	e6bf      	b.n	8015e0a <__ieee754_asin+0x52>
 801608a:	bf00      	nop
 801608c:	f3af 8000 	nop.w
 8016090:	54442d18 	.word	0x54442d18
 8016094:	3ff921fb 	.word	0x3ff921fb
 8016098:	33145c07 	.word	0x33145c07
 801609c:	3c91a626 	.word	0x3c91a626
 80160a0:	8800759c 	.word	0x8800759c
 80160a4:	7e37e43c 	.word	0x7e37e43c
 80160a8:	0dfdf709 	.word	0x0dfdf709
 80160ac:	3f023de1 	.word	0x3f023de1
 80160b0:	7501b288 	.word	0x7501b288
 80160b4:	3f49efe0 	.word	0x3f49efe0
 80160b8:	b5688f3b 	.word	0xb5688f3b
 80160bc:	3fa48228 	.word	0x3fa48228
 80160c0:	0e884455 	.word	0x0e884455
 80160c4:	3fc9c155 	.word	0x3fc9c155
 80160c8:	03eb6f7d 	.word	0x03eb6f7d
 80160cc:	3fd4d612 	.word	0x3fd4d612
 80160d0:	55555555 	.word	0x55555555
 80160d4:	3fc55555 	.word	0x3fc55555
 80160d8:	b12e9282 	.word	0xb12e9282
 80160dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80160e0:	1b8d0159 	.word	0x1b8d0159
 80160e4:	3fe6066c 	.word	0x3fe6066c
 80160e8:	9c598ac8 	.word	0x9c598ac8
 80160ec:	40002ae5 	.word	0x40002ae5
 80160f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80160f4:	40033a27 	.word	0x40033a27
 80160f8:	3fefffff 	.word	0x3fefffff
 80160fc:	3fdfffff 	.word	0x3fdfffff
 8016100:	3ff00000 	.word	0x3ff00000
 8016104:	3fe00000 	.word	0x3fe00000
 8016108:	3fef3332 	.word	0x3fef3332
 801610c:	ee10 2a10 	vmov	r2, s0
 8016110:	ee10 0a10 	vmov	r0, s0
 8016114:	465b      	mov	r3, fp
 8016116:	4659      	mov	r1, fp
 8016118:	f7ea f870 	bl	80001fc <__adddf3>
 801611c:	4632      	mov	r2, r6
 801611e:	463b      	mov	r3, r7
 8016120:	ec41 0b19 	vmov	d9, r0, r1
 8016124:	ec51 0b18 	vmov	r0, r1, d8
 8016128:	f7ea fb48 	bl	80007bc <__aeabi_ddiv>
 801612c:	4602      	mov	r2, r0
 801612e:	460b      	mov	r3, r1
 8016130:	ec51 0b19 	vmov	r0, r1, d9
 8016134:	f7ea fa18 	bl	8000568 <__aeabi_dmul>
 8016138:	f04f 0800 	mov.w	r8, #0
 801613c:	4606      	mov	r6, r0
 801613e:	460f      	mov	r7, r1
 8016140:	4642      	mov	r2, r8
 8016142:	465b      	mov	r3, fp
 8016144:	4640      	mov	r0, r8
 8016146:	4659      	mov	r1, fp
 8016148:	f7ea fa0e 	bl	8000568 <__aeabi_dmul>
 801614c:	4602      	mov	r2, r0
 801614e:	460b      	mov	r3, r1
 8016150:	4620      	mov	r0, r4
 8016152:	4629      	mov	r1, r5
 8016154:	f7ea f850 	bl	80001f8 <__aeabi_dsub>
 8016158:	4642      	mov	r2, r8
 801615a:	4604      	mov	r4, r0
 801615c:	460d      	mov	r5, r1
 801615e:	465b      	mov	r3, fp
 8016160:	4650      	mov	r0, sl
 8016162:	4659      	mov	r1, fp
 8016164:	f7ea f84a 	bl	80001fc <__adddf3>
 8016168:	4602      	mov	r2, r0
 801616a:	460b      	mov	r3, r1
 801616c:	4620      	mov	r0, r4
 801616e:	4629      	mov	r1, r5
 8016170:	f7ea fb24 	bl	80007bc <__aeabi_ddiv>
 8016174:	4602      	mov	r2, r0
 8016176:	460b      	mov	r3, r1
 8016178:	f7ea f840 	bl	80001fc <__adddf3>
 801617c:	4602      	mov	r2, r0
 801617e:	460b      	mov	r3, r1
 8016180:	a113      	add	r1, pc, #76	; (adr r1, 80161d0 <__ieee754_asin+0x418>)
 8016182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016186:	f7ea f837 	bl	80001f8 <__aeabi_dsub>
 801618a:	4602      	mov	r2, r0
 801618c:	460b      	mov	r3, r1
 801618e:	4630      	mov	r0, r6
 8016190:	4639      	mov	r1, r7
 8016192:	f7ea f831 	bl	80001f8 <__aeabi_dsub>
 8016196:	4642      	mov	r2, r8
 8016198:	4604      	mov	r4, r0
 801619a:	460d      	mov	r5, r1
 801619c:	465b      	mov	r3, fp
 801619e:	4640      	mov	r0, r8
 80161a0:	4659      	mov	r1, fp
 80161a2:	f7ea f82b 	bl	80001fc <__adddf3>
 80161a6:	4602      	mov	r2, r0
 80161a8:	460b      	mov	r3, r1
 80161aa:	a10b      	add	r1, pc, #44	; (adr r1, 80161d8 <__ieee754_asin+0x420>)
 80161ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161b0:	f7ea f822 	bl	80001f8 <__aeabi_dsub>
 80161b4:	4602      	mov	r2, r0
 80161b6:	460b      	mov	r3, r1
 80161b8:	4620      	mov	r0, r4
 80161ba:	4629      	mov	r1, r5
 80161bc:	f7ea f81c 	bl	80001f8 <__aeabi_dsub>
 80161c0:	4602      	mov	r2, r0
 80161c2:	460b      	mov	r3, r1
 80161c4:	a104      	add	r1, pc, #16	; (adr r1, 80161d8 <__ieee754_asin+0x420>)
 80161c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161ca:	e6dd      	b.n	8015f88 <__ieee754_asin+0x1d0>
 80161cc:	f3af 8000 	nop.w
 80161d0:	33145c07 	.word	0x33145c07
 80161d4:	3c91a626 	.word	0x3c91a626
 80161d8:	54442d18 	.word	0x54442d18
 80161dc:	3fe921fb 	.word	0x3fe921fb

080161e0 <__ieee754_atan2>:
 80161e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161e4:	ec57 6b11 	vmov	r6, r7, d1
 80161e8:	4273      	negs	r3, r6
 80161ea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8016368 <__ieee754_atan2+0x188>
 80161ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80161f2:	4333      	orrs	r3, r6
 80161f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80161f8:	4543      	cmp	r3, r8
 80161fa:	ec51 0b10 	vmov	r0, r1, d0
 80161fe:	ee11 5a10 	vmov	r5, s2
 8016202:	d80a      	bhi.n	801621a <__ieee754_atan2+0x3a>
 8016204:	4244      	negs	r4, r0
 8016206:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801620a:	4304      	orrs	r4, r0
 801620c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8016210:	4544      	cmp	r4, r8
 8016212:	ee10 9a10 	vmov	r9, s0
 8016216:	468e      	mov	lr, r1
 8016218:	d907      	bls.n	801622a <__ieee754_atan2+0x4a>
 801621a:	4632      	mov	r2, r6
 801621c:	463b      	mov	r3, r7
 801621e:	f7e9 ffed 	bl	80001fc <__adddf3>
 8016222:	ec41 0b10 	vmov	d0, r0, r1
 8016226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801622a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801622e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016232:	4334      	orrs	r4, r6
 8016234:	d103      	bne.n	801623e <__ieee754_atan2+0x5e>
 8016236:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801623a:	f000 baa1 	b.w	8016780 <atan>
 801623e:	17bc      	asrs	r4, r7, #30
 8016240:	f004 0402 	and.w	r4, r4, #2
 8016244:	ea53 0909 	orrs.w	r9, r3, r9
 8016248:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801624c:	d107      	bne.n	801625e <__ieee754_atan2+0x7e>
 801624e:	2c02      	cmp	r4, #2
 8016250:	d05f      	beq.n	8016312 <__ieee754_atan2+0x132>
 8016252:	2c03      	cmp	r4, #3
 8016254:	d1e5      	bne.n	8016222 <__ieee754_atan2+0x42>
 8016256:	a140      	add	r1, pc, #256	; (adr r1, 8016358 <__ieee754_atan2+0x178>)
 8016258:	e9d1 0100 	ldrd	r0, r1, [r1]
 801625c:	e7e1      	b.n	8016222 <__ieee754_atan2+0x42>
 801625e:	4315      	orrs	r5, r2
 8016260:	d106      	bne.n	8016270 <__ieee754_atan2+0x90>
 8016262:	f1be 0f00 	cmp.w	lr, #0
 8016266:	da5f      	bge.n	8016328 <__ieee754_atan2+0x148>
 8016268:	a13d      	add	r1, pc, #244	; (adr r1, 8016360 <__ieee754_atan2+0x180>)
 801626a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801626e:	e7d8      	b.n	8016222 <__ieee754_atan2+0x42>
 8016270:	4542      	cmp	r2, r8
 8016272:	d10f      	bne.n	8016294 <__ieee754_atan2+0xb4>
 8016274:	4293      	cmp	r3, r2
 8016276:	f104 34ff 	add.w	r4, r4, #4294967295
 801627a:	d107      	bne.n	801628c <__ieee754_atan2+0xac>
 801627c:	2c02      	cmp	r4, #2
 801627e:	d84c      	bhi.n	801631a <__ieee754_atan2+0x13a>
 8016280:	4b33      	ldr	r3, [pc, #204]	; (8016350 <__ieee754_atan2+0x170>)
 8016282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016286:	e9d3 0100 	ldrd	r0, r1, [r3]
 801628a:	e7ca      	b.n	8016222 <__ieee754_atan2+0x42>
 801628c:	2c02      	cmp	r4, #2
 801628e:	d848      	bhi.n	8016322 <__ieee754_atan2+0x142>
 8016290:	4b30      	ldr	r3, [pc, #192]	; (8016354 <__ieee754_atan2+0x174>)
 8016292:	e7f6      	b.n	8016282 <__ieee754_atan2+0xa2>
 8016294:	4543      	cmp	r3, r8
 8016296:	d0e4      	beq.n	8016262 <__ieee754_atan2+0x82>
 8016298:	1a9b      	subs	r3, r3, r2
 801629a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801629e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80162a2:	da1e      	bge.n	80162e2 <__ieee754_atan2+0x102>
 80162a4:	2f00      	cmp	r7, #0
 80162a6:	da01      	bge.n	80162ac <__ieee754_atan2+0xcc>
 80162a8:	323c      	adds	r2, #60	; 0x3c
 80162aa:	db1e      	blt.n	80162ea <__ieee754_atan2+0x10a>
 80162ac:	4632      	mov	r2, r6
 80162ae:	463b      	mov	r3, r7
 80162b0:	f7ea fa84 	bl	80007bc <__aeabi_ddiv>
 80162b4:	ec41 0b10 	vmov	d0, r0, r1
 80162b8:	f7ff fb06 	bl	80158c8 <fabs>
 80162bc:	f000 fa60 	bl	8016780 <atan>
 80162c0:	ec51 0b10 	vmov	r0, r1, d0
 80162c4:	2c01      	cmp	r4, #1
 80162c6:	d013      	beq.n	80162f0 <__ieee754_atan2+0x110>
 80162c8:	2c02      	cmp	r4, #2
 80162ca:	d015      	beq.n	80162f8 <__ieee754_atan2+0x118>
 80162cc:	2c00      	cmp	r4, #0
 80162ce:	d0a8      	beq.n	8016222 <__ieee754_atan2+0x42>
 80162d0:	a317      	add	r3, pc, #92	; (adr r3, 8016330 <__ieee754_atan2+0x150>)
 80162d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d6:	f7e9 ff8f 	bl	80001f8 <__aeabi_dsub>
 80162da:	a317      	add	r3, pc, #92	; (adr r3, 8016338 <__ieee754_atan2+0x158>)
 80162dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e0:	e014      	b.n	801630c <__ieee754_atan2+0x12c>
 80162e2:	a117      	add	r1, pc, #92	; (adr r1, 8016340 <__ieee754_atan2+0x160>)
 80162e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162e8:	e7ec      	b.n	80162c4 <__ieee754_atan2+0xe4>
 80162ea:	2000      	movs	r0, #0
 80162ec:	2100      	movs	r1, #0
 80162ee:	e7e9      	b.n	80162c4 <__ieee754_atan2+0xe4>
 80162f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80162f4:	4619      	mov	r1, r3
 80162f6:	e794      	b.n	8016222 <__ieee754_atan2+0x42>
 80162f8:	a30d      	add	r3, pc, #52	; (adr r3, 8016330 <__ieee754_atan2+0x150>)
 80162fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fe:	f7e9 ff7b 	bl	80001f8 <__aeabi_dsub>
 8016302:	4602      	mov	r2, r0
 8016304:	460b      	mov	r3, r1
 8016306:	a10c      	add	r1, pc, #48	; (adr r1, 8016338 <__ieee754_atan2+0x158>)
 8016308:	e9d1 0100 	ldrd	r0, r1, [r1]
 801630c:	f7e9 ff74 	bl	80001f8 <__aeabi_dsub>
 8016310:	e787      	b.n	8016222 <__ieee754_atan2+0x42>
 8016312:	a109      	add	r1, pc, #36	; (adr r1, 8016338 <__ieee754_atan2+0x158>)
 8016314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016318:	e783      	b.n	8016222 <__ieee754_atan2+0x42>
 801631a:	a10b      	add	r1, pc, #44	; (adr r1, 8016348 <__ieee754_atan2+0x168>)
 801631c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016320:	e77f      	b.n	8016222 <__ieee754_atan2+0x42>
 8016322:	2000      	movs	r0, #0
 8016324:	2100      	movs	r1, #0
 8016326:	e77c      	b.n	8016222 <__ieee754_atan2+0x42>
 8016328:	a105      	add	r1, pc, #20	; (adr r1, 8016340 <__ieee754_atan2+0x160>)
 801632a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801632e:	e778      	b.n	8016222 <__ieee754_atan2+0x42>
 8016330:	33145c07 	.word	0x33145c07
 8016334:	3ca1a626 	.word	0x3ca1a626
 8016338:	54442d18 	.word	0x54442d18
 801633c:	400921fb 	.word	0x400921fb
 8016340:	54442d18 	.word	0x54442d18
 8016344:	3ff921fb 	.word	0x3ff921fb
 8016348:	54442d18 	.word	0x54442d18
 801634c:	3fe921fb 	.word	0x3fe921fb
 8016350:	08017790 	.word	0x08017790
 8016354:	080177a8 	.word	0x080177a8
 8016358:	54442d18 	.word	0x54442d18
 801635c:	c00921fb 	.word	0xc00921fb
 8016360:	54442d18 	.word	0x54442d18
 8016364:	bff921fb 	.word	0xbff921fb
 8016368:	7ff00000 	.word	0x7ff00000
 801636c:	00000000 	.word	0x00000000

08016370 <__ieee754_rem_pio2>:
 8016370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016374:	ed2d 8b02 	vpush	{d8}
 8016378:	ec55 4b10 	vmov	r4, r5, d0
 801637c:	4bca      	ldr	r3, [pc, #808]	; (80166a8 <__ieee754_rem_pio2+0x338>)
 801637e:	b08b      	sub	sp, #44	; 0x2c
 8016380:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8016384:	4598      	cmp	r8, r3
 8016386:	4682      	mov	sl, r0
 8016388:	9502      	str	r5, [sp, #8]
 801638a:	dc08      	bgt.n	801639e <__ieee754_rem_pio2+0x2e>
 801638c:	2200      	movs	r2, #0
 801638e:	2300      	movs	r3, #0
 8016390:	ed80 0b00 	vstr	d0, [r0]
 8016394:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016398:	f04f 0b00 	mov.w	fp, #0
 801639c:	e028      	b.n	80163f0 <__ieee754_rem_pio2+0x80>
 801639e:	4bc3      	ldr	r3, [pc, #780]	; (80166ac <__ieee754_rem_pio2+0x33c>)
 80163a0:	4598      	cmp	r8, r3
 80163a2:	dc78      	bgt.n	8016496 <__ieee754_rem_pio2+0x126>
 80163a4:	9b02      	ldr	r3, [sp, #8]
 80163a6:	4ec2      	ldr	r6, [pc, #776]	; (80166b0 <__ieee754_rem_pio2+0x340>)
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	ee10 0a10 	vmov	r0, s0
 80163ae:	a3b0      	add	r3, pc, #704	; (adr r3, 8016670 <__ieee754_rem_pio2+0x300>)
 80163b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b4:	4629      	mov	r1, r5
 80163b6:	dd39      	ble.n	801642c <__ieee754_rem_pio2+0xbc>
 80163b8:	f7e9 ff1e 	bl	80001f8 <__aeabi_dsub>
 80163bc:	45b0      	cmp	r8, r6
 80163be:	4604      	mov	r4, r0
 80163c0:	460d      	mov	r5, r1
 80163c2:	d01b      	beq.n	80163fc <__ieee754_rem_pio2+0x8c>
 80163c4:	a3ac      	add	r3, pc, #688	; (adr r3, 8016678 <__ieee754_rem_pio2+0x308>)
 80163c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ca:	f7e9 ff15 	bl	80001f8 <__aeabi_dsub>
 80163ce:	4602      	mov	r2, r0
 80163d0:	460b      	mov	r3, r1
 80163d2:	e9ca 2300 	strd	r2, r3, [sl]
 80163d6:	4620      	mov	r0, r4
 80163d8:	4629      	mov	r1, r5
 80163da:	f7e9 ff0d 	bl	80001f8 <__aeabi_dsub>
 80163de:	a3a6      	add	r3, pc, #664	; (adr r3, 8016678 <__ieee754_rem_pio2+0x308>)
 80163e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e4:	f7e9 ff08 	bl	80001f8 <__aeabi_dsub>
 80163e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80163ec:	f04f 0b01 	mov.w	fp, #1
 80163f0:	4658      	mov	r0, fp
 80163f2:	b00b      	add	sp, #44	; 0x2c
 80163f4:	ecbd 8b02 	vpop	{d8}
 80163f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163fc:	a3a0      	add	r3, pc, #640	; (adr r3, 8016680 <__ieee754_rem_pio2+0x310>)
 80163fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016402:	f7e9 fef9 	bl	80001f8 <__aeabi_dsub>
 8016406:	a3a0      	add	r3, pc, #640	; (adr r3, 8016688 <__ieee754_rem_pio2+0x318>)
 8016408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801640c:	4604      	mov	r4, r0
 801640e:	460d      	mov	r5, r1
 8016410:	f7e9 fef2 	bl	80001f8 <__aeabi_dsub>
 8016414:	4602      	mov	r2, r0
 8016416:	460b      	mov	r3, r1
 8016418:	e9ca 2300 	strd	r2, r3, [sl]
 801641c:	4620      	mov	r0, r4
 801641e:	4629      	mov	r1, r5
 8016420:	f7e9 feea 	bl	80001f8 <__aeabi_dsub>
 8016424:	a398      	add	r3, pc, #608	; (adr r3, 8016688 <__ieee754_rem_pio2+0x318>)
 8016426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801642a:	e7db      	b.n	80163e4 <__ieee754_rem_pio2+0x74>
 801642c:	f7e9 fee6 	bl	80001fc <__adddf3>
 8016430:	45b0      	cmp	r8, r6
 8016432:	4604      	mov	r4, r0
 8016434:	460d      	mov	r5, r1
 8016436:	d016      	beq.n	8016466 <__ieee754_rem_pio2+0xf6>
 8016438:	a38f      	add	r3, pc, #572	; (adr r3, 8016678 <__ieee754_rem_pio2+0x308>)
 801643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643e:	f7e9 fedd 	bl	80001fc <__adddf3>
 8016442:	4602      	mov	r2, r0
 8016444:	460b      	mov	r3, r1
 8016446:	e9ca 2300 	strd	r2, r3, [sl]
 801644a:	4620      	mov	r0, r4
 801644c:	4629      	mov	r1, r5
 801644e:	f7e9 fed3 	bl	80001f8 <__aeabi_dsub>
 8016452:	a389      	add	r3, pc, #548	; (adr r3, 8016678 <__ieee754_rem_pio2+0x308>)
 8016454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016458:	f7e9 fed0 	bl	80001fc <__adddf3>
 801645c:	f04f 3bff 	mov.w	fp, #4294967295
 8016460:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016464:	e7c4      	b.n	80163f0 <__ieee754_rem_pio2+0x80>
 8016466:	a386      	add	r3, pc, #536	; (adr r3, 8016680 <__ieee754_rem_pio2+0x310>)
 8016468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801646c:	f7e9 fec6 	bl	80001fc <__adddf3>
 8016470:	a385      	add	r3, pc, #532	; (adr r3, 8016688 <__ieee754_rem_pio2+0x318>)
 8016472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016476:	4604      	mov	r4, r0
 8016478:	460d      	mov	r5, r1
 801647a:	f7e9 febf 	bl	80001fc <__adddf3>
 801647e:	4602      	mov	r2, r0
 8016480:	460b      	mov	r3, r1
 8016482:	e9ca 2300 	strd	r2, r3, [sl]
 8016486:	4620      	mov	r0, r4
 8016488:	4629      	mov	r1, r5
 801648a:	f7e9 feb5 	bl	80001f8 <__aeabi_dsub>
 801648e:	a37e      	add	r3, pc, #504	; (adr r3, 8016688 <__ieee754_rem_pio2+0x318>)
 8016490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016494:	e7e0      	b.n	8016458 <__ieee754_rem_pio2+0xe8>
 8016496:	4b87      	ldr	r3, [pc, #540]	; (80166b4 <__ieee754_rem_pio2+0x344>)
 8016498:	4598      	cmp	r8, r3
 801649a:	f300 80d8 	bgt.w	801664e <__ieee754_rem_pio2+0x2de>
 801649e:	f7ff fa13 	bl	80158c8 <fabs>
 80164a2:	ec55 4b10 	vmov	r4, r5, d0
 80164a6:	ee10 0a10 	vmov	r0, s0
 80164aa:	a379      	add	r3, pc, #484	; (adr r3, 8016690 <__ieee754_rem_pio2+0x320>)
 80164ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b0:	4629      	mov	r1, r5
 80164b2:	f7ea f859 	bl	8000568 <__aeabi_dmul>
 80164b6:	4b80      	ldr	r3, [pc, #512]	; (80166b8 <__ieee754_rem_pio2+0x348>)
 80164b8:	2200      	movs	r2, #0
 80164ba:	f7e9 fe9f 	bl	80001fc <__adddf3>
 80164be:	f7ea fb03 	bl	8000ac8 <__aeabi_d2iz>
 80164c2:	4683      	mov	fp, r0
 80164c4:	f7e9 ffe6 	bl	8000494 <__aeabi_i2d>
 80164c8:	4602      	mov	r2, r0
 80164ca:	460b      	mov	r3, r1
 80164cc:	ec43 2b18 	vmov	d8, r2, r3
 80164d0:	a367      	add	r3, pc, #412	; (adr r3, 8016670 <__ieee754_rem_pio2+0x300>)
 80164d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d6:	f7ea f847 	bl	8000568 <__aeabi_dmul>
 80164da:	4602      	mov	r2, r0
 80164dc:	460b      	mov	r3, r1
 80164de:	4620      	mov	r0, r4
 80164e0:	4629      	mov	r1, r5
 80164e2:	f7e9 fe89 	bl	80001f8 <__aeabi_dsub>
 80164e6:	a364      	add	r3, pc, #400	; (adr r3, 8016678 <__ieee754_rem_pio2+0x308>)
 80164e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ec:	4606      	mov	r6, r0
 80164ee:	460f      	mov	r7, r1
 80164f0:	ec51 0b18 	vmov	r0, r1, d8
 80164f4:	f7ea f838 	bl	8000568 <__aeabi_dmul>
 80164f8:	f1bb 0f1f 	cmp.w	fp, #31
 80164fc:	4604      	mov	r4, r0
 80164fe:	460d      	mov	r5, r1
 8016500:	dc0d      	bgt.n	801651e <__ieee754_rem_pio2+0x1ae>
 8016502:	4b6e      	ldr	r3, [pc, #440]	; (80166bc <__ieee754_rem_pio2+0x34c>)
 8016504:	f10b 32ff 	add.w	r2, fp, #4294967295
 8016508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801650c:	4543      	cmp	r3, r8
 801650e:	d006      	beq.n	801651e <__ieee754_rem_pio2+0x1ae>
 8016510:	4622      	mov	r2, r4
 8016512:	462b      	mov	r3, r5
 8016514:	4630      	mov	r0, r6
 8016516:	4639      	mov	r1, r7
 8016518:	f7e9 fe6e 	bl	80001f8 <__aeabi_dsub>
 801651c:	e00e      	b.n	801653c <__ieee754_rem_pio2+0x1cc>
 801651e:	462b      	mov	r3, r5
 8016520:	4622      	mov	r2, r4
 8016522:	4630      	mov	r0, r6
 8016524:	4639      	mov	r1, r7
 8016526:	f7e9 fe67 	bl	80001f8 <__aeabi_dsub>
 801652a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801652e:	9303      	str	r3, [sp, #12]
 8016530:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016534:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8016538:	2b10      	cmp	r3, #16
 801653a:	dc02      	bgt.n	8016542 <__ieee754_rem_pio2+0x1d2>
 801653c:	e9ca 0100 	strd	r0, r1, [sl]
 8016540:	e039      	b.n	80165b6 <__ieee754_rem_pio2+0x246>
 8016542:	a34f      	add	r3, pc, #316	; (adr r3, 8016680 <__ieee754_rem_pio2+0x310>)
 8016544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016548:	ec51 0b18 	vmov	r0, r1, d8
 801654c:	f7ea f80c 	bl	8000568 <__aeabi_dmul>
 8016550:	4604      	mov	r4, r0
 8016552:	460d      	mov	r5, r1
 8016554:	4602      	mov	r2, r0
 8016556:	460b      	mov	r3, r1
 8016558:	4630      	mov	r0, r6
 801655a:	4639      	mov	r1, r7
 801655c:	f7e9 fe4c 	bl	80001f8 <__aeabi_dsub>
 8016560:	4602      	mov	r2, r0
 8016562:	460b      	mov	r3, r1
 8016564:	4680      	mov	r8, r0
 8016566:	4689      	mov	r9, r1
 8016568:	4630      	mov	r0, r6
 801656a:	4639      	mov	r1, r7
 801656c:	f7e9 fe44 	bl	80001f8 <__aeabi_dsub>
 8016570:	4622      	mov	r2, r4
 8016572:	462b      	mov	r3, r5
 8016574:	f7e9 fe40 	bl	80001f8 <__aeabi_dsub>
 8016578:	a343      	add	r3, pc, #268	; (adr r3, 8016688 <__ieee754_rem_pio2+0x318>)
 801657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801657e:	4604      	mov	r4, r0
 8016580:	460d      	mov	r5, r1
 8016582:	ec51 0b18 	vmov	r0, r1, d8
 8016586:	f7e9 ffef 	bl	8000568 <__aeabi_dmul>
 801658a:	4622      	mov	r2, r4
 801658c:	462b      	mov	r3, r5
 801658e:	f7e9 fe33 	bl	80001f8 <__aeabi_dsub>
 8016592:	4602      	mov	r2, r0
 8016594:	460b      	mov	r3, r1
 8016596:	4604      	mov	r4, r0
 8016598:	460d      	mov	r5, r1
 801659a:	4640      	mov	r0, r8
 801659c:	4649      	mov	r1, r9
 801659e:	f7e9 fe2b 	bl	80001f8 <__aeabi_dsub>
 80165a2:	9a03      	ldr	r2, [sp, #12]
 80165a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80165a8:	1ad3      	subs	r3, r2, r3
 80165aa:	2b31      	cmp	r3, #49	; 0x31
 80165ac:	dc24      	bgt.n	80165f8 <__ieee754_rem_pio2+0x288>
 80165ae:	e9ca 0100 	strd	r0, r1, [sl]
 80165b2:	4646      	mov	r6, r8
 80165b4:	464f      	mov	r7, r9
 80165b6:	e9da 8900 	ldrd	r8, r9, [sl]
 80165ba:	4630      	mov	r0, r6
 80165bc:	4642      	mov	r2, r8
 80165be:	464b      	mov	r3, r9
 80165c0:	4639      	mov	r1, r7
 80165c2:	f7e9 fe19 	bl	80001f8 <__aeabi_dsub>
 80165c6:	462b      	mov	r3, r5
 80165c8:	4622      	mov	r2, r4
 80165ca:	f7e9 fe15 	bl	80001f8 <__aeabi_dsub>
 80165ce:	9b02      	ldr	r3, [sp, #8]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80165d6:	f6bf af0b 	bge.w	80163f0 <__ieee754_rem_pio2+0x80>
 80165da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80165de:	f8ca 3004 	str.w	r3, [sl, #4]
 80165e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80165e6:	f8ca 8000 	str.w	r8, [sl]
 80165ea:	f8ca 0008 	str.w	r0, [sl, #8]
 80165ee:	f8ca 300c 	str.w	r3, [sl, #12]
 80165f2:	f1cb 0b00 	rsb	fp, fp, #0
 80165f6:	e6fb      	b.n	80163f0 <__ieee754_rem_pio2+0x80>
 80165f8:	a327      	add	r3, pc, #156	; (adr r3, 8016698 <__ieee754_rem_pio2+0x328>)
 80165fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165fe:	ec51 0b18 	vmov	r0, r1, d8
 8016602:	f7e9 ffb1 	bl	8000568 <__aeabi_dmul>
 8016606:	4604      	mov	r4, r0
 8016608:	460d      	mov	r5, r1
 801660a:	4602      	mov	r2, r0
 801660c:	460b      	mov	r3, r1
 801660e:	4640      	mov	r0, r8
 8016610:	4649      	mov	r1, r9
 8016612:	f7e9 fdf1 	bl	80001f8 <__aeabi_dsub>
 8016616:	4602      	mov	r2, r0
 8016618:	460b      	mov	r3, r1
 801661a:	4606      	mov	r6, r0
 801661c:	460f      	mov	r7, r1
 801661e:	4640      	mov	r0, r8
 8016620:	4649      	mov	r1, r9
 8016622:	f7e9 fde9 	bl	80001f8 <__aeabi_dsub>
 8016626:	4622      	mov	r2, r4
 8016628:	462b      	mov	r3, r5
 801662a:	f7e9 fde5 	bl	80001f8 <__aeabi_dsub>
 801662e:	a31c      	add	r3, pc, #112	; (adr r3, 80166a0 <__ieee754_rem_pio2+0x330>)
 8016630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016634:	4604      	mov	r4, r0
 8016636:	460d      	mov	r5, r1
 8016638:	ec51 0b18 	vmov	r0, r1, d8
 801663c:	f7e9 ff94 	bl	8000568 <__aeabi_dmul>
 8016640:	4622      	mov	r2, r4
 8016642:	462b      	mov	r3, r5
 8016644:	f7e9 fdd8 	bl	80001f8 <__aeabi_dsub>
 8016648:	4604      	mov	r4, r0
 801664a:	460d      	mov	r5, r1
 801664c:	e760      	b.n	8016510 <__ieee754_rem_pio2+0x1a0>
 801664e:	4b1c      	ldr	r3, [pc, #112]	; (80166c0 <__ieee754_rem_pio2+0x350>)
 8016650:	4598      	cmp	r8, r3
 8016652:	dd37      	ble.n	80166c4 <__ieee754_rem_pio2+0x354>
 8016654:	ee10 2a10 	vmov	r2, s0
 8016658:	462b      	mov	r3, r5
 801665a:	4620      	mov	r0, r4
 801665c:	4629      	mov	r1, r5
 801665e:	f7e9 fdcb 	bl	80001f8 <__aeabi_dsub>
 8016662:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016666:	e9ca 0100 	strd	r0, r1, [sl]
 801666a:	e695      	b.n	8016398 <__ieee754_rem_pio2+0x28>
 801666c:	f3af 8000 	nop.w
 8016670:	54400000 	.word	0x54400000
 8016674:	3ff921fb 	.word	0x3ff921fb
 8016678:	1a626331 	.word	0x1a626331
 801667c:	3dd0b461 	.word	0x3dd0b461
 8016680:	1a600000 	.word	0x1a600000
 8016684:	3dd0b461 	.word	0x3dd0b461
 8016688:	2e037073 	.word	0x2e037073
 801668c:	3ba3198a 	.word	0x3ba3198a
 8016690:	6dc9c883 	.word	0x6dc9c883
 8016694:	3fe45f30 	.word	0x3fe45f30
 8016698:	2e000000 	.word	0x2e000000
 801669c:	3ba3198a 	.word	0x3ba3198a
 80166a0:	252049c1 	.word	0x252049c1
 80166a4:	397b839a 	.word	0x397b839a
 80166a8:	3fe921fb 	.word	0x3fe921fb
 80166ac:	4002d97b 	.word	0x4002d97b
 80166b0:	3ff921fb 	.word	0x3ff921fb
 80166b4:	413921fb 	.word	0x413921fb
 80166b8:	3fe00000 	.word	0x3fe00000
 80166bc:	080177c0 	.word	0x080177c0
 80166c0:	7fefffff 	.word	0x7fefffff
 80166c4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80166c8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80166cc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80166d0:	4620      	mov	r0, r4
 80166d2:	460d      	mov	r5, r1
 80166d4:	f7ea f9f8 	bl	8000ac8 <__aeabi_d2iz>
 80166d8:	f7e9 fedc 	bl	8000494 <__aeabi_i2d>
 80166dc:	4602      	mov	r2, r0
 80166de:	460b      	mov	r3, r1
 80166e0:	4620      	mov	r0, r4
 80166e2:	4629      	mov	r1, r5
 80166e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80166e8:	f7e9 fd86 	bl	80001f8 <__aeabi_dsub>
 80166ec:	4b21      	ldr	r3, [pc, #132]	; (8016774 <__ieee754_rem_pio2+0x404>)
 80166ee:	2200      	movs	r2, #0
 80166f0:	f7e9 ff3a 	bl	8000568 <__aeabi_dmul>
 80166f4:	460d      	mov	r5, r1
 80166f6:	4604      	mov	r4, r0
 80166f8:	f7ea f9e6 	bl	8000ac8 <__aeabi_d2iz>
 80166fc:	f7e9 feca 	bl	8000494 <__aeabi_i2d>
 8016700:	4602      	mov	r2, r0
 8016702:	460b      	mov	r3, r1
 8016704:	4620      	mov	r0, r4
 8016706:	4629      	mov	r1, r5
 8016708:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801670c:	f7e9 fd74 	bl	80001f8 <__aeabi_dsub>
 8016710:	4b18      	ldr	r3, [pc, #96]	; (8016774 <__ieee754_rem_pio2+0x404>)
 8016712:	2200      	movs	r2, #0
 8016714:	f7e9 ff28 	bl	8000568 <__aeabi_dmul>
 8016718:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801671c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8016720:	2703      	movs	r7, #3
 8016722:	2400      	movs	r4, #0
 8016724:	2500      	movs	r5, #0
 8016726:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801672a:	4622      	mov	r2, r4
 801672c:	462b      	mov	r3, r5
 801672e:	46b9      	mov	r9, r7
 8016730:	3f01      	subs	r7, #1
 8016732:	f7ea f981 	bl	8000a38 <__aeabi_dcmpeq>
 8016736:	2800      	cmp	r0, #0
 8016738:	d1f5      	bne.n	8016726 <__ieee754_rem_pio2+0x3b6>
 801673a:	4b0f      	ldr	r3, [pc, #60]	; (8016778 <__ieee754_rem_pio2+0x408>)
 801673c:	9301      	str	r3, [sp, #4]
 801673e:	2302      	movs	r3, #2
 8016740:	9300      	str	r3, [sp, #0]
 8016742:	4632      	mov	r2, r6
 8016744:	464b      	mov	r3, r9
 8016746:	4651      	mov	r1, sl
 8016748:	a804      	add	r0, sp, #16
 801674a:	f000 f9b9 	bl	8016ac0 <__kernel_rem_pio2>
 801674e:	9b02      	ldr	r3, [sp, #8]
 8016750:	2b00      	cmp	r3, #0
 8016752:	4683      	mov	fp, r0
 8016754:	f6bf ae4c 	bge.w	80163f0 <__ieee754_rem_pio2+0x80>
 8016758:	e9da 2100 	ldrd	r2, r1, [sl]
 801675c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016760:	e9ca 2300 	strd	r2, r3, [sl]
 8016764:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8016768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801676c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8016770:	e73f      	b.n	80165f2 <__ieee754_rem_pio2+0x282>
 8016772:	bf00      	nop
 8016774:	41700000 	.word	0x41700000
 8016778:	08017840 	.word	0x08017840
 801677c:	00000000 	.word	0x00000000

08016780 <atan>:
 8016780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016784:	ec55 4b10 	vmov	r4, r5, d0
 8016788:	4bc3      	ldr	r3, [pc, #780]	; (8016a98 <atan+0x318>)
 801678a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801678e:	429e      	cmp	r6, r3
 8016790:	46ab      	mov	fp, r5
 8016792:	dd18      	ble.n	80167c6 <atan+0x46>
 8016794:	4bc1      	ldr	r3, [pc, #772]	; (8016a9c <atan+0x31c>)
 8016796:	429e      	cmp	r6, r3
 8016798:	dc01      	bgt.n	801679e <atan+0x1e>
 801679a:	d109      	bne.n	80167b0 <atan+0x30>
 801679c:	b144      	cbz	r4, 80167b0 <atan+0x30>
 801679e:	4622      	mov	r2, r4
 80167a0:	462b      	mov	r3, r5
 80167a2:	4620      	mov	r0, r4
 80167a4:	4629      	mov	r1, r5
 80167a6:	f7e9 fd29 	bl	80001fc <__adddf3>
 80167aa:	4604      	mov	r4, r0
 80167ac:	460d      	mov	r5, r1
 80167ae:	e006      	b.n	80167be <atan+0x3e>
 80167b0:	f1bb 0f00 	cmp.w	fp, #0
 80167b4:	f300 8131 	bgt.w	8016a1a <atan+0x29a>
 80167b8:	a59b      	add	r5, pc, #620	; (adr r5, 8016a28 <atan+0x2a8>)
 80167ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80167be:	ec45 4b10 	vmov	d0, r4, r5
 80167c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167c6:	4bb6      	ldr	r3, [pc, #728]	; (8016aa0 <atan+0x320>)
 80167c8:	429e      	cmp	r6, r3
 80167ca:	dc14      	bgt.n	80167f6 <atan+0x76>
 80167cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80167d0:	429e      	cmp	r6, r3
 80167d2:	dc0d      	bgt.n	80167f0 <atan+0x70>
 80167d4:	a396      	add	r3, pc, #600	; (adr r3, 8016a30 <atan+0x2b0>)
 80167d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167da:	ee10 0a10 	vmov	r0, s0
 80167de:	4629      	mov	r1, r5
 80167e0:	f7e9 fd0c 	bl	80001fc <__adddf3>
 80167e4:	4baf      	ldr	r3, [pc, #700]	; (8016aa4 <atan+0x324>)
 80167e6:	2200      	movs	r2, #0
 80167e8:	f7ea f94e 	bl	8000a88 <__aeabi_dcmpgt>
 80167ec:	2800      	cmp	r0, #0
 80167ee:	d1e6      	bne.n	80167be <atan+0x3e>
 80167f0:	f04f 3aff 	mov.w	sl, #4294967295
 80167f4:	e02b      	b.n	801684e <atan+0xce>
 80167f6:	f7ff f867 	bl	80158c8 <fabs>
 80167fa:	4bab      	ldr	r3, [pc, #684]	; (8016aa8 <atan+0x328>)
 80167fc:	429e      	cmp	r6, r3
 80167fe:	ec55 4b10 	vmov	r4, r5, d0
 8016802:	f300 80bf 	bgt.w	8016984 <atan+0x204>
 8016806:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801680a:	429e      	cmp	r6, r3
 801680c:	f300 80a0 	bgt.w	8016950 <atan+0x1d0>
 8016810:	ee10 2a10 	vmov	r2, s0
 8016814:	ee10 0a10 	vmov	r0, s0
 8016818:	462b      	mov	r3, r5
 801681a:	4629      	mov	r1, r5
 801681c:	f7e9 fcee 	bl	80001fc <__adddf3>
 8016820:	4ba0      	ldr	r3, [pc, #640]	; (8016aa4 <atan+0x324>)
 8016822:	2200      	movs	r2, #0
 8016824:	f7e9 fce8 	bl	80001f8 <__aeabi_dsub>
 8016828:	2200      	movs	r2, #0
 801682a:	4606      	mov	r6, r0
 801682c:	460f      	mov	r7, r1
 801682e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016832:	4620      	mov	r0, r4
 8016834:	4629      	mov	r1, r5
 8016836:	f7e9 fce1 	bl	80001fc <__adddf3>
 801683a:	4602      	mov	r2, r0
 801683c:	460b      	mov	r3, r1
 801683e:	4630      	mov	r0, r6
 8016840:	4639      	mov	r1, r7
 8016842:	f7e9 ffbb 	bl	80007bc <__aeabi_ddiv>
 8016846:	f04f 0a00 	mov.w	sl, #0
 801684a:	4604      	mov	r4, r0
 801684c:	460d      	mov	r5, r1
 801684e:	4622      	mov	r2, r4
 8016850:	462b      	mov	r3, r5
 8016852:	4620      	mov	r0, r4
 8016854:	4629      	mov	r1, r5
 8016856:	f7e9 fe87 	bl	8000568 <__aeabi_dmul>
 801685a:	4602      	mov	r2, r0
 801685c:	460b      	mov	r3, r1
 801685e:	4680      	mov	r8, r0
 8016860:	4689      	mov	r9, r1
 8016862:	f7e9 fe81 	bl	8000568 <__aeabi_dmul>
 8016866:	a374      	add	r3, pc, #464	; (adr r3, 8016a38 <atan+0x2b8>)
 8016868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801686c:	4606      	mov	r6, r0
 801686e:	460f      	mov	r7, r1
 8016870:	f7e9 fe7a 	bl	8000568 <__aeabi_dmul>
 8016874:	a372      	add	r3, pc, #456	; (adr r3, 8016a40 <atan+0x2c0>)
 8016876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687a:	f7e9 fcbf 	bl	80001fc <__adddf3>
 801687e:	4632      	mov	r2, r6
 8016880:	463b      	mov	r3, r7
 8016882:	f7e9 fe71 	bl	8000568 <__aeabi_dmul>
 8016886:	a370      	add	r3, pc, #448	; (adr r3, 8016a48 <atan+0x2c8>)
 8016888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801688c:	f7e9 fcb6 	bl	80001fc <__adddf3>
 8016890:	4632      	mov	r2, r6
 8016892:	463b      	mov	r3, r7
 8016894:	f7e9 fe68 	bl	8000568 <__aeabi_dmul>
 8016898:	a36d      	add	r3, pc, #436	; (adr r3, 8016a50 <atan+0x2d0>)
 801689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801689e:	f7e9 fcad 	bl	80001fc <__adddf3>
 80168a2:	4632      	mov	r2, r6
 80168a4:	463b      	mov	r3, r7
 80168a6:	f7e9 fe5f 	bl	8000568 <__aeabi_dmul>
 80168aa:	a36b      	add	r3, pc, #428	; (adr r3, 8016a58 <atan+0x2d8>)
 80168ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b0:	f7e9 fca4 	bl	80001fc <__adddf3>
 80168b4:	4632      	mov	r2, r6
 80168b6:	463b      	mov	r3, r7
 80168b8:	f7e9 fe56 	bl	8000568 <__aeabi_dmul>
 80168bc:	a368      	add	r3, pc, #416	; (adr r3, 8016a60 <atan+0x2e0>)
 80168be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c2:	f7e9 fc9b 	bl	80001fc <__adddf3>
 80168c6:	4642      	mov	r2, r8
 80168c8:	464b      	mov	r3, r9
 80168ca:	f7e9 fe4d 	bl	8000568 <__aeabi_dmul>
 80168ce:	a366      	add	r3, pc, #408	; (adr r3, 8016a68 <atan+0x2e8>)
 80168d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168d4:	4680      	mov	r8, r0
 80168d6:	4689      	mov	r9, r1
 80168d8:	4630      	mov	r0, r6
 80168da:	4639      	mov	r1, r7
 80168dc:	f7e9 fe44 	bl	8000568 <__aeabi_dmul>
 80168e0:	a363      	add	r3, pc, #396	; (adr r3, 8016a70 <atan+0x2f0>)
 80168e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e6:	f7e9 fc87 	bl	80001f8 <__aeabi_dsub>
 80168ea:	4632      	mov	r2, r6
 80168ec:	463b      	mov	r3, r7
 80168ee:	f7e9 fe3b 	bl	8000568 <__aeabi_dmul>
 80168f2:	a361      	add	r3, pc, #388	; (adr r3, 8016a78 <atan+0x2f8>)
 80168f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f8:	f7e9 fc7e 	bl	80001f8 <__aeabi_dsub>
 80168fc:	4632      	mov	r2, r6
 80168fe:	463b      	mov	r3, r7
 8016900:	f7e9 fe32 	bl	8000568 <__aeabi_dmul>
 8016904:	a35e      	add	r3, pc, #376	; (adr r3, 8016a80 <atan+0x300>)
 8016906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690a:	f7e9 fc75 	bl	80001f8 <__aeabi_dsub>
 801690e:	4632      	mov	r2, r6
 8016910:	463b      	mov	r3, r7
 8016912:	f7e9 fe29 	bl	8000568 <__aeabi_dmul>
 8016916:	a35c      	add	r3, pc, #368	; (adr r3, 8016a88 <atan+0x308>)
 8016918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801691c:	f7e9 fc6c 	bl	80001f8 <__aeabi_dsub>
 8016920:	4632      	mov	r2, r6
 8016922:	463b      	mov	r3, r7
 8016924:	f7e9 fe20 	bl	8000568 <__aeabi_dmul>
 8016928:	4602      	mov	r2, r0
 801692a:	460b      	mov	r3, r1
 801692c:	4640      	mov	r0, r8
 801692e:	4649      	mov	r1, r9
 8016930:	f7e9 fc64 	bl	80001fc <__adddf3>
 8016934:	4622      	mov	r2, r4
 8016936:	462b      	mov	r3, r5
 8016938:	f7e9 fe16 	bl	8000568 <__aeabi_dmul>
 801693c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016940:	4602      	mov	r2, r0
 8016942:	460b      	mov	r3, r1
 8016944:	d14b      	bne.n	80169de <atan+0x25e>
 8016946:	4620      	mov	r0, r4
 8016948:	4629      	mov	r1, r5
 801694a:	f7e9 fc55 	bl	80001f8 <__aeabi_dsub>
 801694e:	e72c      	b.n	80167aa <atan+0x2a>
 8016950:	ee10 0a10 	vmov	r0, s0
 8016954:	4b53      	ldr	r3, [pc, #332]	; (8016aa4 <atan+0x324>)
 8016956:	2200      	movs	r2, #0
 8016958:	4629      	mov	r1, r5
 801695a:	f7e9 fc4d 	bl	80001f8 <__aeabi_dsub>
 801695e:	4b51      	ldr	r3, [pc, #324]	; (8016aa4 <atan+0x324>)
 8016960:	4606      	mov	r6, r0
 8016962:	460f      	mov	r7, r1
 8016964:	2200      	movs	r2, #0
 8016966:	4620      	mov	r0, r4
 8016968:	4629      	mov	r1, r5
 801696a:	f7e9 fc47 	bl	80001fc <__adddf3>
 801696e:	4602      	mov	r2, r0
 8016970:	460b      	mov	r3, r1
 8016972:	4630      	mov	r0, r6
 8016974:	4639      	mov	r1, r7
 8016976:	f7e9 ff21 	bl	80007bc <__aeabi_ddiv>
 801697a:	f04f 0a01 	mov.w	sl, #1
 801697e:	4604      	mov	r4, r0
 8016980:	460d      	mov	r5, r1
 8016982:	e764      	b.n	801684e <atan+0xce>
 8016984:	4b49      	ldr	r3, [pc, #292]	; (8016aac <atan+0x32c>)
 8016986:	429e      	cmp	r6, r3
 8016988:	da1d      	bge.n	80169c6 <atan+0x246>
 801698a:	ee10 0a10 	vmov	r0, s0
 801698e:	4b48      	ldr	r3, [pc, #288]	; (8016ab0 <atan+0x330>)
 8016990:	2200      	movs	r2, #0
 8016992:	4629      	mov	r1, r5
 8016994:	f7e9 fc30 	bl	80001f8 <__aeabi_dsub>
 8016998:	4b45      	ldr	r3, [pc, #276]	; (8016ab0 <atan+0x330>)
 801699a:	4606      	mov	r6, r0
 801699c:	460f      	mov	r7, r1
 801699e:	2200      	movs	r2, #0
 80169a0:	4620      	mov	r0, r4
 80169a2:	4629      	mov	r1, r5
 80169a4:	f7e9 fde0 	bl	8000568 <__aeabi_dmul>
 80169a8:	4b3e      	ldr	r3, [pc, #248]	; (8016aa4 <atan+0x324>)
 80169aa:	2200      	movs	r2, #0
 80169ac:	f7e9 fc26 	bl	80001fc <__adddf3>
 80169b0:	4602      	mov	r2, r0
 80169b2:	460b      	mov	r3, r1
 80169b4:	4630      	mov	r0, r6
 80169b6:	4639      	mov	r1, r7
 80169b8:	f7e9 ff00 	bl	80007bc <__aeabi_ddiv>
 80169bc:	f04f 0a02 	mov.w	sl, #2
 80169c0:	4604      	mov	r4, r0
 80169c2:	460d      	mov	r5, r1
 80169c4:	e743      	b.n	801684e <atan+0xce>
 80169c6:	462b      	mov	r3, r5
 80169c8:	ee10 2a10 	vmov	r2, s0
 80169cc:	4939      	ldr	r1, [pc, #228]	; (8016ab4 <atan+0x334>)
 80169ce:	2000      	movs	r0, #0
 80169d0:	f7e9 fef4 	bl	80007bc <__aeabi_ddiv>
 80169d4:	f04f 0a03 	mov.w	sl, #3
 80169d8:	4604      	mov	r4, r0
 80169da:	460d      	mov	r5, r1
 80169dc:	e737      	b.n	801684e <atan+0xce>
 80169de:	4b36      	ldr	r3, [pc, #216]	; (8016ab8 <atan+0x338>)
 80169e0:	4e36      	ldr	r6, [pc, #216]	; (8016abc <atan+0x33c>)
 80169e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80169e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ea:	f7e9 fc05 	bl	80001f8 <__aeabi_dsub>
 80169ee:	4622      	mov	r2, r4
 80169f0:	462b      	mov	r3, r5
 80169f2:	f7e9 fc01 	bl	80001f8 <__aeabi_dsub>
 80169f6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80169fa:	4602      	mov	r2, r0
 80169fc:	460b      	mov	r3, r1
 80169fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8016a02:	f7e9 fbf9 	bl	80001f8 <__aeabi_dsub>
 8016a06:	f1bb 0f00 	cmp.w	fp, #0
 8016a0a:	4604      	mov	r4, r0
 8016a0c:	460d      	mov	r5, r1
 8016a0e:	f6bf aed6 	bge.w	80167be <atan+0x3e>
 8016a12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a16:	461d      	mov	r5, r3
 8016a18:	e6d1      	b.n	80167be <atan+0x3e>
 8016a1a:	a51d      	add	r5, pc, #116	; (adr r5, 8016a90 <atan+0x310>)
 8016a1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016a20:	e6cd      	b.n	80167be <atan+0x3e>
 8016a22:	bf00      	nop
 8016a24:	f3af 8000 	nop.w
 8016a28:	54442d18 	.word	0x54442d18
 8016a2c:	bff921fb 	.word	0xbff921fb
 8016a30:	8800759c 	.word	0x8800759c
 8016a34:	7e37e43c 	.word	0x7e37e43c
 8016a38:	e322da11 	.word	0xe322da11
 8016a3c:	3f90ad3a 	.word	0x3f90ad3a
 8016a40:	24760deb 	.word	0x24760deb
 8016a44:	3fa97b4b 	.word	0x3fa97b4b
 8016a48:	a0d03d51 	.word	0xa0d03d51
 8016a4c:	3fb10d66 	.word	0x3fb10d66
 8016a50:	c54c206e 	.word	0xc54c206e
 8016a54:	3fb745cd 	.word	0x3fb745cd
 8016a58:	920083ff 	.word	0x920083ff
 8016a5c:	3fc24924 	.word	0x3fc24924
 8016a60:	5555550d 	.word	0x5555550d
 8016a64:	3fd55555 	.word	0x3fd55555
 8016a68:	2c6a6c2f 	.word	0x2c6a6c2f
 8016a6c:	bfa2b444 	.word	0xbfa2b444
 8016a70:	52defd9a 	.word	0x52defd9a
 8016a74:	3fadde2d 	.word	0x3fadde2d
 8016a78:	af749a6d 	.word	0xaf749a6d
 8016a7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8016a80:	fe231671 	.word	0xfe231671
 8016a84:	3fbc71c6 	.word	0x3fbc71c6
 8016a88:	9998ebc4 	.word	0x9998ebc4
 8016a8c:	3fc99999 	.word	0x3fc99999
 8016a90:	54442d18 	.word	0x54442d18
 8016a94:	3ff921fb 	.word	0x3ff921fb
 8016a98:	440fffff 	.word	0x440fffff
 8016a9c:	7ff00000 	.word	0x7ff00000
 8016aa0:	3fdbffff 	.word	0x3fdbffff
 8016aa4:	3ff00000 	.word	0x3ff00000
 8016aa8:	3ff2ffff 	.word	0x3ff2ffff
 8016aac:	40038000 	.word	0x40038000
 8016ab0:	3ff80000 	.word	0x3ff80000
 8016ab4:	bff00000 	.word	0xbff00000
 8016ab8:	08017968 	.word	0x08017968
 8016abc:	08017948 	.word	0x08017948

08016ac0 <__kernel_rem_pio2>:
 8016ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac4:	ed2d 8b02 	vpush	{d8}
 8016ac8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8016acc:	f112 0f14 	cmn.w	r2, #20
 8016ad0:	9306      	str	r3, [sp, #24]
 8016ad2:	9104      	str	r1, [sp, #16]
 8016ad4:	4bc2      	ldr	r3, [pc, #776]	; (8016de0 <__kernel_rem_pio2+0x320>)
 8016ad6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8016ad8:	9009      	str	r0, [sp, #36]	; 0x24
 8016ada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016ade:	9300      	str	r3, [sp, #0]
 8016ae0:	9b06      	ldr	r3, [sp, #24]
 8016ae2:	f103 33ff 	add.w	r3, r3, #4294967295
 8016ae6:	bfa8      	it	ge
 8016ae8:	1ed4      	subge	r4, r2, #3
 8016aea:	9305      	str	r3, [sp, #20]
 8016aec:	bfb2      	itee	lt
 8016aee:	2400      	movlt	r4, #0
 8016af0:	2318      	movge	r3, #24
 8016af2:	fb94 f4f3 	sdivge	r4, r4, r3
 8016af6:	f06f 0317 	mvn.w	r3, #23
 8016afa:	fb04 3303 	mla	r3, r4, r3, r3
 8016afe:	eb03 0a02 	add.w	sl, r3, r2
 8016b02:	9b00      	ldr	r3, [sp, #0]
 8016b04:	9a05      	ldr	r2, [sp, #20]
 8016b06:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8016dd0 <__kernel_rem_pio2+0x310>
 8016b0a:	eb03 0802 	add.w	r8, r3, r2
 8016b0e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016b10:	1aa7      	subs	r7, r4, r2
 8016b12:	ae20      	add	r6, sp, #128	; 0x80
 8016b14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016b18:	2500      	movs	r5, #0
 8016b1a:	4545      	cmp	r5, r8
 8016b1c:	dd13      	ble.n	8016b46 <__kernel_rem_pio2+0x86>
 8016b1e:	9b06      	ldr	r3, [sp, #24]
 8016b20:	aa20      	add	r2, sp, #128	; 0x80
 8016b22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8016b26:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8016b2a:	f04f 0800 	mov.w	r8, #0
 8016b2e:	9b00      	ldr	r3, [sp, #0]
 8016b30:	4598      	cmp	r8, r3
 8016b32:	dc31      	bgt.n	8016b98 <__kernel_rem_pio2+0xd8>
 8016b34:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8016dd0 <__kernel_rem_pio2+0x310>
 8016b38:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016b3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016b40:	462f      	mov	r7, r5
 8016b42:	2600      	movs	r6, #0
 8016b44:	e01b      	b.n	8016b7e <__kernel_rem_pio2+0xbe>
 8016b46:	42ef      	cmn	r7, r5
 8016b48:	d407      	bmi.n	8016b5a <__kernel_rem_pio2+0x9a>
 8016b4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016b4e:	f7e9 fca1 	bl	8000494 <__aeabi_i2d>
 8016b52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016b56:	3501      	adds	r5, #1
 8016b58:	e7df      	b.n	8016b1a <__kernel_rem_pio2+0x5a>
 8016b5a:	ec51 0b18 	vmov	r0, r1, d8
 8016b5e:	e7f8      	b.n	8016b52 <__kernel_rem_pio2+0x92>
 8016b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8016b68:	f7e9 fcfe 	bl	8000568 <__aeabi_dmul>
 8016b6c:	4602      	mov	r2, r0
 8016b6e:	460b      	mov	r3, r1
 8016b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b74:	f7e9 fb42 	bl	80001fc <__adddf3>
 8016b78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016b7c:	3601      	adds	r6, #1
 8016b7e:	9b05      	ldr	r3, [sp, #20]
 8016b80:	429e      	cmp	r6, r3
 8016b82:	f1a7 0708 	sub.w	r7, r7, #8
 8016b86:	ddeb      	ble.n	8016b60 <__kernel_rem_pio2+0xa0>
 8016b88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016b8c:	f108 0801 	add.w	r8, r8, #1
 8016b90:	ecab 7b02 	vstmia	fp!, {d7}
 8016b94:	3508      	adds	r5, #8
 8016b96:	e7ca      	b.n	8016b2e <__kernel_rem_pio2+0x6e>
 8016b98:	9b00      	ldr	r3, [sp, #0]
 8016b9a:	aa0c      	add	r2, sp, #48	; 0x30
 8016b9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ba2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016ba4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016ba8:	9c00      	ldr	r4, [sp, #0]
 8016baa:	930a      	str	r3, [sp, #40]	; 0x28
 8016bac:	00e3      	lsls	r3, r4, #3
 8016bae:	9308      	str	r3, [sp, #32]
 8016bb0:	ab98      	add	r3, sp, #608	; 0x260
 8016bb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016bb6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8016bba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8016bbe:	ab70      	add	r3, sp, #448	; 0x1c0
 8016bc0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8016bc4:	46c3      	mov	fp, r8
 8016bc6:	46a1      	mov	r9, r4
 8016bc8:	f1b9 0f00 	cmp.w	r9, #0
 8016bcc:	f1a5 0508 	sub.w	r5, r5, #8
 8016bd0:	dc77      	bgt.n	8016cc2 <__kernel_rem_pio2+0x202>
 8016bd2:	ec47 6b10 	vmov	d0, r6, r7
 8016bd6:	4650      	mov	r0, sl
 8016bd8:	f000 fac2 	bl	8017160 <scalbn>
 8016bdc:	ec57 6b10 	vmov	r6, r7, d0
 8016be0:	2200      	movs	r2, #0
 8016be2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016be6:	ee10 0a10 	vmov	r0, s0
 8016bea:	4639      	mov	r1, r7
 8016bec:	f7e9 fcbc 	bl	8000568 <__aeabi_dmul>
 8016bf0:	ec41 0b10 	vmov	d0, r0, r1
 8016bf4:	f000 fb34 	bl	8017260 <floor>
 8016bf8:	4b7a      	ldr	r3, [pc, #488]	; (8016de4 <__kernel_rem_pio2+0x324>)
 8016bfa:	ec51 0b10 	vmov	r0, r1, d0
 8016bfe:	2200      	movs	r2, #0
 8016c00:	f7e9 fcb2 	bl	8000568 <__aeabi_dmul>
 8016c04:	4602      	mov	r2, r0
 8016c06:	460b      	mov	r3, r1
 8016c08:	4630      	mov	r0, r6
 8016c0a:	4639      	mov	r1, r7
 8016c0c:	f7e9 faf4 	bl	80001f8 <__aeabi_dsub>
 8016c10:	460f      	mov	r7, r1
 8016c12:	4606      	mov	r6, r0
 8016c14:	f7e9 ff58 	bl	8000ac8 <__aeabi_d2iz>
 8016c18:	9002      	str	r0, [sp, #8]
 8016c1a:	f7e9 fc3b 	bl	8000494 <__aeabi_i2d>
 8016c1e:	4602      	mov	r2, r0
 8016c20:	460b      	mov	r3, r1
 8016c22:	4630      	mov	r0, r6
 8016c24:	4639      	mov	r1, r7
 8016c26:	f7e9 fae7 	bl	80001f8 <__aeabi_dsub>
 8016c2a:	f1ba 0f00 	cmp.w	sl, #0
 8016c2e:	4606      	mov	r6, r0
 8016c30:	460f      	mov	r7, r1
 8016c32:	dd6d      	ble.n	8016d10 <__kernel_rem_pio2+0x250>
 8016c34:	1e61      	subs	r1, r4, #1
 8016c36:	ab0c      	add	r3, sp, #48	; 0x30
 8016c38:	9d02      	ldr	r5, [sp, #8]
 8016c3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016c3e:	f1ca 0018 	rsb	r0, sl, #24
 8016c42:	fa43 f200 	asr.w	r2, r3, r0
 8016c46:	4415      	add	r5, r2
 8016c48:	4082      	lsls	r2, r0
 8016c4a:	1a9b      	subs	r3, r3, r2
 8016c4c:	aa0c      	add	r2, sp, #48	; 0x30
 8016c4e:	9502      	str	r5, [sp, #8]
 8016c50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016c54:	f1ca 0217 	rsb	r2, sl, #23
 8016c58:	fa43 fb02 	asr.w	fp, r3, r2
 8016c5c:	f1bb 0f00 	cmp.w	fp, #0
 8016c60:	dd65      	ble.n	8016d2e <__kernel_rem_pio2+0x26e>
 8016c62:	9b02      	ldr	r3, [sp, #8]
 8016c64:	2200      	movs	r2, #0
 8016c66:	3301      	adds	r3, #1
 8016c68:	9302      	str	r3, [sp, #8]
 8016c6a:	4615      	mov	r5, r2
 8016c6c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016c70:	4294      	cmp	r4, r2
 8016c72:	f300 809f 	bgt.w	8016db4 <__kernel_rem_pio2+0x2f4>
 8016c76:	f1ba 0f00 	cmp.w	sl, #0
 8016c7a:	dd07      	ble.n	8016c8c <__kernel_rem_pio2+0x1cc>
 8016c7c:	f1ba 0f01 	cmp.w	sl, #1
 8016c80:	f000 80c1 	beq.w	8016e06 <__kernel_rem_pio2+0x346>
 8016c84:	f1ba 0f02 	cmp.w	sl, #2
 8016c88:	f000 80c7 	beq.w	8016e1a <__kernel_rem_pio2+0x35a>
 8016c8c:	f1bb 0f02 	cmp.w	fp, #2
 8016c90:	d14d      	bne.n	8016d2e <__kernel_rem_pio2+0x26e>
 8016c92:	4632      	mov	r2, r6
 8016c94:	463b      	mov	r3, r7
 8016c96:	4954      	ldr	r1, [pc, #336]	; (8016de8 <__kernel_rem_pio2+0x328>)
 8016c98:	2000      	movs	r0, #0
 8016c9a:	f7e9 faad 	bl	80001f8 <__aeabi_dsub>
 8016c9e:	4606      	mov	r6, r0
 8016ca0:	460f      	mov	r7, r1
 8016ca2:	2d00      	cmp	r5, #0
 8016ca4:	d043      	beq.n	8016d2e <__kernel_rem_pio2+0x26e>
 8016ca6:	4650      	mov	r0, sl
 8016ca8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8016dd8 <__kernel_rem_pio2+0x318>
 8016cac:	f000 fa58 	bl	8017160 <scalbn>
 8016cb0:	4630      	mov	r0, r6
 8016cb2:	4639      	mov	r1, r7
 8016cb4:	ec53 2b10 	vmov	r2, r3, d0
 8016cb8:	f7e9 fa9e 	bl	80001f8 <__aeabi_dsub>
 8016cbc:	4606      	mov	r6, r0
 8016cbe:	460f      	mov	r7, r1
 8016cc0:	e035      	b.n	8016d2e <__kernel_rem_pio2+0x26e>
 8016cc2:	4b4a      	ldr	r3, [pc, #296]	; (8016dec <__kernel_rem_pio2+0x32c>)
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	4630      	mov	r0, r6
 8016cc8:	4639      	mov	r1, r7
 8016cca:	f7e9 fc4d 	bl	8000568 <__aeabi_dmul>
 8016cce:	f7e9 fefb 	bl	8000ac8 <__aeabi_d2iz>
 8016cd2:	f7e9 fbdf 	bl	8000494 <__aeabi_i2d>
 8016cd6:	4602      	mov	r2, r0
 8016cd8:	460b      	mov	r3, r1
 8016cda:	ec43 2b18 	vmov	d8, r2, r3
 8016cde:	4b44      	ldr	r3, [pc, #272]	; (8016df0 <__kernel_rem_pio2+0x330>)
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	f7e9 fc41 	bl	8000568 <__aeabi_dmul>
 8016ce6:	4602      	mov	r2, r0
 8016ce8:	460b      	mov	r3, r1
 8016cea:	4630      	mov	r0, r6
 8016cec:	4639      	mov	r1, r7
 8016cee:	f7e9 fa83 	bl	80001f8 <__aeabi_dsub>
 8016cf2:	f7e9 fee9 	bl	8000ac8 <__aeabi_d2iz>
 8016cf6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016cfa:	f84b 0b04 	str.w	r0, [fp], #4
 8016cfe:	ec51 0b18 	vmov	r0, r1, d8
 8016d02:	f7e9 fa7b 	bl	80001fc <__adddf3>
 8016d06:	f109 39ff 	add.w	r9, r9, #4294967295
 8016d0a:	4606      	mov	r6, r0
 8016d0c:	460f      	mov	r7, r1
 8016d0e:	e75b      	b.n	8016bc8 <__kernel_rem_pio2+0x108>
 8016d10:	d106      	bne.n	8016d20 <__kernel_rem_pio2+0x260>
 8016d12:	1e63      	subs	r3, r4, #1
 8016d14:	aa0c      	add	r2, sp, #48	; 0x30
 8016d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d1a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8016d1e:	e79d      	b.n	8016c5c <__kernel_rem_pio2+0x19c>
 8016d20:	4b34      	ldr	r3, [pc, #208]	; (8016df4 <__kernel_rem_pio2+0x334>)
 8016d22:	2200      	movs	r2, #0
 8016d24:	f7e9 fea6 	bl	8000a74 <__aeabi_dcmpge>
 8016d28:	2800      	cmp	r0, #0
 8016d2a:	d140      	bne.n	8016dae <__kernel_rem_pio2+0x2ee>
 8016d2c:	4683      	mov	fp, r0
 8016d2e:	2200      	movs	r2, #0
 8016d30:	2300      	movs	r3, #0
 8016d32:	4630      	mov	r0, r6
 8016d34:	4639      	mov	r1, r7
 8016d36:	f7e9 fe7f 	bl	8000a38 <__aeabi_dcmpeq>
 8016d3a:	2800      	cmp	r0, #0
 8016d3c:	f000 80c1 	beq.w	8016ec2 <__kernel_rem_pio2+0x402>
 8016d40:	1e65      	subs	r5, r4, #1
 8016d42:	462b      	mov	r3, r5
 8016d44:	2200      	movs	r2, #0
 8016d46:	9900      	ldr	r1, [sp, #0]
 8016d48:	428b      	cmp	r3, r1
 8016d4a:	da6d      	bge.n	8016e28 <__kernel_rem_pio2+0x368>
 8016d4c:	2a00      	cmp	r2, #0
 8016d4e:	f000 808a 	beq.w	8016e66 <__kernel_rem_pio2+0x3a6>
 8016d52:	ab0c      	add	r3, sp, #48	; 0x30
 8016d54:	f1aa 0a18 	sub.w	sl, sl, #24
 8016d58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	f000 80ae 	beq.w	8016ebe <__kernel_rem_pio2+0x3fe>
 8016d62:	4650      	mov	r0, sl
 8016d64:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8016dd8 <__kernel_rem_pio2+0x318>
 8016d68:	f000 f9fa 	bl	8017160 <scalbn>
 8016d6c:	1c6b      	adds	r3, r5, #1
 8016d6e:	00da      	lsls	r2, r3, #3
 8016d70:	9205      	str	r2, [sp, #20]
 8016d72:	ec57 6b10 	vmov	r6, r7, d0
 8016d76:	aa70      	add	r2, sp, #448	; 0x1c0
 8016d78:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8016dec <__kernel_rem_pio2+0x32c>
 8016d7c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8016d80:	462c      	mov	r4, r5
 8016d82:	f04f 0800 	mov.w	r8, #0
 8016d86:	2c00      	cmp	r4, #0
 8016d88:	f280 80d4 	bge.w	8016f34 <__kernel_rem_pio2+0x474>
 8016d8c:	462c      	mov	r4, r5
 8016d8e:	2c00      	cmp	r4, #0
 8016d90:	f2c0 8102 	blt.w	8016f98 <__kernel_rem_pio2+0x4d8>
 8016d94:	4b18      	ldr	r3, [pc, #96]	; (8016df8 <__kernel_rem_pio2+0x338>)
 8016d96:	461e      	mov	r6, r3
 8016d98:	ab70      	add	r3, sp, #448	; 0x1c0
 8016d9a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8016d9e:	1b2b      	subs	r3, r5, r4
 8016da0:	f04f 0900 	mov.w	r9, #0
 8016da4:	f04f 0a00 	mov.w	sl, #0
 8016da8:	2700      	movs	r7, #0
 8016daa:	9306      	str	r3, [sp, #24]
 8016dac:	e0e6      	b.n	8016f7c <__kernel_rem_pio2+0x4bc>
 8016dae:	f04f 0b02 	mov.w	fp, #2
 8016db2:	e756      	b.n	8016c62 <__kernel_rem_pio2+0x1a2>
 8016db4:	f8d8 3000 	ldr.w	r3, [r8]
 8016db8:	bb05      	cbnz	r5, 8016dfc <__kernel_rem_pio2+0x33c>
 8016dba:	b123      	cbz	r3, 8016dc6 <__kernel_rem_pio2+0x306>
 8016dbc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016dc0:	f8c8 3000 	str.w	r3, [r8]
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	3201      	adds	r2, #1
 8016dc8:	f108 0804 	add.w	r8, r8, #4
 8016dcc:	461d      	mov	r5, r3
 8016dce:	e74f      	b.n	8016c70 <__kernel_rem_pio2+0x1b0>
	...
 8016ddc:	3ff00000 	.word	0x3ff00000
 8016de0:	080179c8 	.word	0x080179c8
 8016de4:	40200000 	.word	0x40200000
 8016de8:	3ff00000 	.word	0x3ff00000
 8016dec:	3e700000 	.word	0x3e700000
 8016df0:	41700000 	.word	0x41700000
 8016df4:	3fe00000 	.word	0x3fe00000
 8016df8:	08017988 	.word	0x08017988
 8016dfc:	1acb      	subs	r3, r1, r3
 8016dfe:	f8c8 3000 	str.w	r3, [r8]
 8016e02:	462b      	mov	r3, r5
 8016e04:	e7df      	b.n	8016dc6 <__kernel_rem_pio2+0x306>
 8016e06:	1e62      	subs	r2, r4, #1
 8016e08:	ab0c      	add	r3, sp, #48	; 0x30
 8016e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016e12:	a90c      	add	r1, sp, #48	; 0x30
 8016e14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016e18:	e738      	b.n	8016c8c <__kernel_rem_pio2+0x1cc>
 8016e1a:	1e62      	subs	r2, r4, #1
 8016e1c:	ab0c      	add	r3, sp, #48	; 0x30
 8016e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e22:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016e26:	e7f4      	b.n	8016e12 <__kernel_rem_pio2+0x352>
 8016e28:	a90c      	add	r1, sp, #48	; 0x30
 8016e2a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016e2e:	3b01      	subs	r3, #1
 8016e30:	430a      	orrs	r2, r1
 8016e32:	e788      	b.n	8016d46 <__kernel_rem_pio2+0x286>
 8016e34:	3301      	adds	r3, #1
 8016e36:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016e3a:	2900      	cmp	r1, #0
 8016e3c:	d0fa      	beq.n	8016e34 <__kernel_rem_pio2+0x374>
 8016e3e:	9a08      	ldr	r2, [sp, #32]
 8016e40:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8016e44:	446a      	add	r2, sp
 8016e46:	3a98      	subs	r2, #152	; 0x98
 8016e48:	9208      	str	r2, [sp, #32]
 8016e4a:	9a06      	ldr	r2, [sp, #24]
 8016e4c:	a920      	add	r1, sp, #128	; 0x80
 8016e4e:	18a2      	adds	r2, r4, r2
 8016e50:	18e3      	adds	r3, r4, r3
 8016e52:	f104 0801 	add.w	r8, r4, #1
 8016e56:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8016e5a:	9302      	str	r3, [sp, #8]
 8016e5c:	9b02      	ldr	r3, [sp, #8]
 8016e5e:	4543      	cmp	r3, r8
 8016e60:	da04      	bge.n	8016e6c <__kernel_rem_pio2+0x3ac>
 8016e62:	461c      	mov	r4, r3
 8016e64:	e6a2      	b.n	8016bac <__kernel_rem_pio2+0xec>
 8016e66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016e68:	2301      	movs	r3, #1
 8016e6a:	e7e4      	b.n	8016e36 <__kernel_rem_pio2+0x376>
 8016e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e6e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016e72:	f7e9 fb0f 	bl	8000494 <__aeabi_i2d>
 8016e76:	e8e5 0102 	strd	r0, r1, [r5], #8
 8016e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e7c:	46ab      	mov	fp, r5
 8016e7e:	461c      	mov	r4, r3
 8016e80:	f04f 0900 	mov.w	r9, #0
 8016e84:	2600      	movs	r6, #0
 8016e86:	2700      	movs	r7, #0
 8016e88:	9b05      	ldr	r3, [sp, #20]
 8016e8a:	4599      	cmp	r9, r3
 8016e8c:	dd06      	ble.n	8016e9c <__kernel_rem_pio2+0x3dc>
 8016e8e:	9b08      	ldr	r3, [sp, #32]
 8016e90:	e8e3 6702 	strd	r6, r7, [r3], #8
 8016e94:	f108 0801 	add.w	r8, r8, #1
 8016e98:	9308      	str	r3, [sp, #32]
 8016e9a:	e7df      	b.n	8016e5c <__kernel_rem_pio2+0x39c>
 8016e9c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016ea0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8016ea4:	f7e9 fb60 	bl	8000568 <__aeabi_dmul>
 8016ea8:	4602      	mov	r2, r0
 8016eaa:	460b      	mov	r3, r1
 8016eac:	4630      	mov	r0, r6
 8016eae:	4639      	mov	r1, r7
 8016eb0:	f7e9 f9a4 	bl	80001fc <__adddf3>
 8016eb4:	f109 0901 	add.w	r9, r9, #1
 8016eb8:	4606      	mov	r6, r0
 8016eba:	460f      	mov	r7, r1
 8016ebc:	e7e4      	b.n	8016e88 <__kernel_rem_pio2+0x3c8>
 8016ebe:	3d01      	subs	r5, #1
 8016ec0:	e747      	b.n	8016d52 <__kernel_rem_pio2+0x292>
 8016ec2:	ec47 6b10 	vmov	d0, r6, r7
 8016ec6:	f1ca 0000 	rsb	r0, sl, #0
 8016eca:	f000 f949 	bl	8017160 <scalbn>
 8016ece:	ec57 6b10 	vmov	r6, r7, d0
 8016ed2:	4ba0      	ldr	r3, [pc, #640]	; (8017154 <__kernel_rem_pio2+0x694>)
 8016ed4:	ee10 0a10 	vmov	r0, s0
 8016ed8:	2200      	movs	r2, #0
 8016eda:	4639      	mov	r1, r7
 8016edc:	f7e9 fdca 	bl	8000a74 <__aeabi_dcmpge>
 8016ee0:	b1f8      	cbz	r0, 8016f22 <__kernel_rem_pio2+0x462>
 8016ee2:	4b9d      	ldr	r3, [pc, #628]	; (8017158 <__kernel_rem_pio2+0x698>)
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	4630      	mov	r0, r6
 8016ee8:	4639      	mov	r1, r7
 8016eea:	f7e9 fb3d 	bl	8000568 <__aeabi_dmul>
 8016eee:	f7e9 fdeb 	bl	8000ac8 <__aeabi_d2iz>
 8016ef2:	4680      	mov	r8, r0
 8016ef4:	f7e9 face 	bl	8000494 <__aeabi_i2d>
 8016ef8:	4b96      	ldr	r3, [pc, #600]	; (8017154 <__kernel_rem_pio2+0x694>)
 8016efa:	2200      	movs	r2, #0
 8016efc:	f7e9 fb34 	bl	8000568 <__aeabi_dmul>
 8016f00:	460b      	mov	r3, r1
 8016f02:	4602      	mov	r2, r0
 8016f04:	4639      	mov	r1, r7
 8016f06:	4630      	mov	r0, r6
 8016f08:	f7e9 f976 	bl	80001f8 <__aeabi_dsub>
 8016f0c:	f7e9 fddc 	bl	8000ac8 <__aeabi_d2iz>
 8016f10:	1c65      	adds	r5, r4, #1
 8016f12:	ab0c      	add	r3, sp, #48	; 0x30
 8016f14:	f10a 0a18 	add.w	sl, sl, #24
 8016f18:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016f1c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8016f20:	e71f      	b.n	8016d62 <__kernel_rem_pio2+0x2a2>
 8016f22:	4630      	mov	r0, r6
 8016f24:	4639      	mov	r1, r7
 8016f26:	f7e9 fdcf 	bl	8000ac8 <__aeabi_d2iz>
 8016f2a:	ab0c      	add	r3, sp, #48	; 0x30
 8016f2c:	4625      	mov	r5, r4
 8016f2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016f32:	e716      	b.n	8016d62 <__kernel_rem_pio2+0x2a2>
 8016f34:	ab0c      	add	r3, sp, #48	; 0x30
 8016f36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016f3a:	f7e9 faab 	bl	8000494 <__aeabi_i2d>
 8016f3e:	4632      	mov	r2, r6
 8016f40:	463b      	mov	r3, r7
 8016f42:	f7e9 fb11 	bl	8000568 <__aeabi_dmul>
 8016f46:	4642      	mov	r2, r8
 8016f48:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8016f4c:	464b      	mov	r3, r9
 8016f4e:	4630      	mov	r0, r6
 8016f50:	4639      	mov	r1, r7
 8016f52:	f7e9 fb09 	bl	8000568 <__aeabi_dmul>
 8016f56:	3c01      	subs	r4, #1
 8016f58:	4606      	mov	r6, r0
 8016f5a:	460f      	mov	r7, r1
 8016f5c:	e713      	b.n	8016d86 <__kernel_rem_pio2+0x2c6>
 8016f5e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8016f62:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8016f66:	f7e9 faff 	bl	8000568 <__aeabi_dmul>
 8016f6a:	4602      	mov	r2, r0
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	4648      	mov	r0, r9
 8016f70:	4651      	mov	r1, sl
 8016f72:	f7e9 f943 	bl	80001fc <__adddf3>
 8016f76:	3701      	adds	r7, #1
 8016f78:	4681      	mov	r9, r0
 8016f7a:	468a      	mov	sl, r1
 8016f7c:	9b00      	ldr	r3, [sp, #0]
 8016f7e:	429f      	cmp	r7, r3
 8016f80:	dc02      	bgt.n	8016f88 <__kernel_rem_pio2+0x4c8>
 8016f82:	9b06      	ldr	r3, [sp, #24]
 8016f84:	429f      	cmp	r7, r3
 8016f86:	ddea      	ble.n	8016f5e <__kernel_rem_pio2+0x49e>
 8016f88:	9a06      	ldr	r2, [sp, #24]
 8016f8a:	ab48      	add	r3, sp, #288	; 0x120
 8016f8c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8016f90:	e9c6 9a00 	strd	r9, sl, [r6]
 8016f94:	3c01      	subs	r4, #1
 8016f96:	e6fa      	b.n	8016d8e <__kernel_rem_pio2+0x2ce>
 8016f98:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016f9a:	2b02      	cmp	r3, #2
 8016f9c:	dc0b      	bgt.n	8016fb6 <__kernel_rem_pio2+0x4f6>
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	dc39      	bgt.n	8017016 <__kernel_rem_pio2+0x556>
 8016fa2:	d05d      	beq.n	8017060 <__kernel_rem_pio2+0x5a0>
 8016fa4:	9b02      	ldr	r3, [sp, #8]
 8016fa6:	f003 0007 	and.w	r0, r3, #7
 8016faa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8016fae:	ecbd 8b02 	vpop	{d8}
 8016fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fb6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016fb8:	2b03      	cmp	r3, #3
 8016fba:	d1f3      	bne.n	8016fa4 <__kernel_rem_pio2+0x4e4>
 8016fbc:	9b05      	ldr	r3, [sp, #20]
 8016fbe:	9500      	str	r5, [sp, #0]
 8016fc0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016fc4:	eb0d 0403 	add.w	r4, sp, r3
 8016fc8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8016fcc:	46a2      	mov	sl, r4
 8016fce:	9b00      	ldr	r3, [sp, #0]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f1aa 0a08 	sub.w	sl, sl, #8
 8016fd6:	dc69      	bgt.n	80170ac <__kernel_rem_pio2+0x5ec>
 8016fd8:	46aa      	mov	sl, r5
 8016fda:	f1ba 0f01 	cmp.w	sl, #1
 8016fde:	f1a4 0408 	sub.w	r4, r4, #8
 8016fe2:	f300 8083 	bgt.w	80170ec <__kernel_rem_pio2+0x62c>
 8016fe6:	9c05      	ldr	r4, [sp, #20]
 8016fe8:	ab48      	add	r3, sp, #288	; 0x120
 8016fea:	441c      	add	r4, r3
 8016fec:	2000      	movs	r0, #0
 8016fee:	2100      	movs	r1, #0
 8016ff0:	2d01      	cmp	r5, #1
 8016ff2:	f300 809a 	bgt.w	801712a <__kernel_rem_pio2+0x66a>
 8016ff6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8016ffa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8016ffe:	f1bb 0f00 	cmp.w	fp, #0
 8017002:	f040 8098 	bne.w	8017136 <__kernel_rem_pio2+0x676>
 8017006:	9b04      	ldr	r3, [sp, #16]
 8017008:	e9c3 7800 	strd	r7, r8, [r3]
 801700c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017010:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017014:	e7c6      	b.n	8016fa4 <__kernel_rem_pio2+0x4e4>
 8017016:	9e05      	ldr	r6, [sp, #20]
 8017018:	ab48      	add	r3, sp, #288	; 0x120
 801701a:	441e      	add	r6, r3
 801701c:	462c      	mov	r4, r5
 801701e:	2000      	movs	r0, #0
 8017020:	2100      	movs	r1, #0
 8017022:	2c00      	cmp	r4, #0
 8017024:	da33      	bge.n	801708e <__kernel_rem_pio2+0x5ce>
 8017026:	f1bb 0f00 	cmp.w	fp, #0
 801702a:	d036      	beq.n	801709a <__kernel_rem_pio2+0x5da>
 801702c:	4602      	mov	r2, r0
 801702e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017032:	9c04      	ldr	r4, [sp, #16]
 8017034:	e9c4 2300 	strd	r2, r3, [r4]
 8017038:	4602      	mov	r2, r0
 801703a:	460b      	mov	r3, r1
 801703c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8017040:	f7e9 f8da 	bl	80001f8 <__aeabi_dsub>
 8017044:	ae4a      	add	r6, sp, #296	; 0x128
 8017046:	2401      	movs	r4, #1
 8017048:	42a5      	cmp	r5, r4
 801704a:	da29      	bge.n	80170a0 <__kernel_rem_pio2+0x5e0>
 801704c:	f1bb 0f00 	cmp.w	fp, #0
 8017050:	d002      	beq.n	8017058 <__kernel_rem_pio2+0x598>
 8017052:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017056:	4619      	mov	r1, r3
 8017058:	9b04      	ldr	r3, [sp, #16]
 801705a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801705e:	e7a1      	b.n	8016fa4 <__kernel_rem_pio2+0x4e4>
 8017060:	9c05      	ldr	r4, [sp, #20]
 8017062:	ab48      	add	r3, sp, #288	; 0x120
 8017064:	441c      	add	r4, r3
 8017066:	2000      	movs	r0, #0
 8017068:	2100      	movs	r1, #0
 801706a:	2d00      	cmp	r5, #0
 801706c:	da09      	bge.n	8017082 <__kernel_rem_pio2+0x5c2>
 801706e:	f1bb 0f00 	cmp.w	fp, #0
 8017072:	d002      	beq.n	801707a <__kernel_rem_pio2+0x5ba>
 8017074:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017078:	4619      	mov	r1, r3
 801707a:	9b04      	ldr	r3, [sp, #16]
 801707c:	e9c3 0100 	strd	r0, r1, [r3]
 8017080:	e790      	b.n	8016fa4 <__kernel_rem_pio2+0x4e4>
 8017082:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017086:	f7e9 f8b9 	bl	80001fc <__adddf3>
 801708a:	3d01      	subs	r5, #1
 801708c:	e7ed      	b.n	801706a <__kernel_rem_pio2+0x5aa>
 801708e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8017092:	f7e9 f8b3 	bl	80001fc <__adddf3>
 8017096:	3c01      	subs	r4, #1
 8017098:	e7c3      	b.n	8017022 <__kernel_rem_pio2+0x562>
 801709a:	4602      	mov	r2, r0
 801709c:	460b      	mov	r3, r1
 801709e:	e7c8      	b.n	8017032 <__kernel_rem_pio2+0x572>
 80170a0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80170a4:	f7e9 f8aa 	bl	80001fc <__adddf3>
 80170a8:	3401      	adds	r4, #1
 80170aa:	e7cd      	b.n	8017048 <__kernel_rem_pio2+0x588>
 80170ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80170b0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80170b4:	9b00      	ldr	r3, [sp, #0]
 80170b6:	3b01      	subs	r3, #1
 80170b8:	9300      	str	r3, [sp, #0]
 80170ba:	4632      	mov	r2, r6
 80170bc:	463b      	mov	r3, r7
 80170be:	4640      	mov	r0, r8
 80170c0:	4649      	mov	r1, r9
 80170c2:	f7e9 f89b 	bl	80001fc <__adddf3>
 80170c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80170ca:	4602      	mov	r2, r0
 80170cc:	460b      	mov	r3, r1
 80170ce:	4640      	mov	r0, r8
 80170d0:	4649      	mov	r1, r9
 80170d2:	f7e9 f891 	bl	80001f8 <__aeabi_dsub>
 80170d6:	4632      	mov	r2, r6
 80170d8:	463b      	mov	r3, r7
 80170da:	f7e9 f88f 	bl	80001fc <__adddf3>
 80170de:	ed9d 7b06 	vldr	d7, [sp, #24]
 80170e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80170e6:	ed8a 7b00 	vstr	d7, [sl]
 80170ea:	e770      	b.n	8016fce <__kernel_rem_pio2+0x50e>
 80170ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 80170f0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80170f4:	4640      	mov	r0, r8
 80170f6:	4632      	mov	r2, r6
 80170f8:	463b      	mov	r3, r7
 80170fa:	4649      	mov	r1, r9
 80170fc:	f7e9 f87e 	bl	80001fc <__adddf3>
 8017100:	e9cd 0100 	strd	r0, r1, [sp]
 8017104:	4602      	mov	r2, r0
 8017106:	460b      	mov	r3, r1
 8017108:	4640      	mov	r0, r8
 801710a:	4649      	mov	r1, r9
 801710c:	f7e9 f874 	bl	80001f8 <__aeabi_dsub>
 8017110:	4632      	mov	r2, r6
 8017112:	463b      	mov	r3, r7
 8017114:	f7e9 f872 	bl	80001fc <__adddf3>
 8017118:	ed9d 7b00 	vldr	d7, [sp]
 801711c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017120:	ed84 7b00 	vstr	d7, [r4]
 8017124:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017128:	e757      	b.n	8016fda <__kernel_rem_pio2+0x51a>
 801712a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801712e:	f7e9 f865 	bl	80001fc <__adddf3>
 8017132:	3d01      	subs	r5, #1
 8017134:	e75c      	b.n	8016ff0 <__kernel_rem_pio2+0x530>
 8017136:	9b04      	ldr	r3, [sp, #16]
 8017138:	9a04      	ldr	r2, [sp, #16]
 801713a:	601f      	str	r7, [r3, #0]
 801713c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8017140:	605c      	str	r4, [r3, #4]
 8017142:	609d      	str	r5, [r3, #8]
 8017144:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017148:	60d3      	str	r3, [r2, #12]
 801714a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801714e:	6110      	str	r0, [r2, #16]
 8017150:	6153      	str	r3, [r2, #20]
 8017152:	e727      	b.n	8016fa4 <__kernel_rem_pio2+0x4e4>
 8017154:	41700000 	.word	0x41700000
 8017158:	3e700000 	.word	0x3e700000
 801715c:	00000000 	.word	0x00000000

08017160 <scalbn>:
 8017160:	b570      	push	{r4, r5, r6, lr}
 8017162:	ec55 4b10 	vmov	r4, r5, d0
 8017166:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801716a:	4606      	mov	r6, r0
 801716c:	462b      	mov	r3, r5
 801716e:	b999      	cbnz	r1, 8017198 <scalbn+0x38>
 8017170:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017174:	4323      	orrs	r3, r4
 8017176:	d03f      	beq.n	80171f8 <scalbn+0x98>
 8017178:	4b35      	ldr	r3, [pc, #212]	; (8017250 <scalbn+0xf0>)
 801717a:	4629      	mov	r1, r5
 801717c:	ee10 0a10 	vmov	r0, s0
 8017180:	2200      	movs	r2, #0
 8017182:	f7e9 f9f1 	bl	8000568 <__aeabi_dmul>
 8017186:	4b33      	ldr	r3, [pc, #204]	; (8017254 <scalbn+0xf4>)
 8017188:	429e      	cmp	r6, r3
 801718a:	4604      	mov	r4, r0
 801718c:	460d      	mov	r5, r1
 801718e:	da10      	bge.n	80171b2 <scalbn+0x52>
 8017190:	a327      	add	r3, pc, #156	; (adr r3, 8017230 <scalbn+0xd0>)
 8017192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017196:	e01f      	b.n	80171d8 <scalbn+0x78>
 8017198:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801719c:	4291      	cmp	r1, r2
 801719e:	d10c      	bne.n	80171ba <scalbn+0x5a>
 80171a0:	ee10 2a10 	vmov	r2, s0
 80171a4:	4620      	mov	r0, r4
 80171a6:	4629      	mov	r1, r5
 80171a8:	f7e9 f828 	bl	80001fc <__adddf3>
 80171ac:	4604      	mov	r4, r0
 80171ae:	460d      	mov	r5, r1
 80171b0:	e022      	b.n	80171f8 <scalbn+0x98>
 80171b2:	460b      	mov	r3, r1
 80171b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80171b8:	3936      	subs	r1, #54	; 0x36
 80171ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80171be:	4296      	cmp	r6, r2
 80171c0:	dd0d      	ble.n	80171de <scalbn+0x7e>
 80171c2:	2d00      	cmp	r5, #0
 80171c4:	a11c      	add	r1, pc, #112	; (adr r1, 8017238 <scalbn+0xd8>)
 80171c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80171ca:	da02      	bge.n	80171d2 <scalbn+0x72>
 80171cc:	a11c      	add	r1, pc, #112	; (adr r1, 8017240 <scalbn+0xe0>)
 80171ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80171d2:	a319      	add	r3, pc, #100	; (adr r3, 8017238 <scalbn+0xd8>)
 80171d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d8:	f7e9 f9c6 	bl	8000568 <__aeabi_dmul>
 80171dc:	e7e6      	b.n	80171ac <scalbn+0x4c>
 80171de:	1872      	adds	r2, r6, r1
 80171e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80171e4:	428a      	cmp	r2, r1
 80171e6:	dcec      	bgt.n	80171c2 <scalbn+0x62>
 80171e8:	2a00      	cmp	r2, #0
 80171ea:	dd08      	ble.n	80171fe <scalbn+0x9e>
 80171ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80171f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80171f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80171f8:	ec45 4b10 	vmov	d0, r4, r5
 80171fc:	bd70      	pop	{r4, r5, r6, pc}
 80171fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017202:	da08      	bge.n	8017216 <scalbn+0xb6>
 8017204:	2d00      	cmp	r5, #0
 8017206:	a10a      	add	r1, pc, #40	; (adr r1, 8017230 <scalbn+0xd0>)
 8017208:	e9d1 0100 	ldrd	r0, r1, [r1]
 801720c:	dac0      	bge.n	8017190 <scalbn+0x30>
 801720e:	a10e      	add	r1, pc, #56	; (adr r1, 8017248 <scalbn+0xe8>)
 8017210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017214:	e7bc      	b.n	8017190 <scalbn+0x30>
 8017216:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801721a:	3236      	adds	r2, #54	; 0x36
 801721c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017220:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017224:	4620      	mov	r0, r4
 8017226:	4b0c      	ldr	r3, [pc, #48]	; (8017258 <scalbn+0xf8>)
 8017228:	2200      	movs	r2, #0
 801722a:	e7d5      	b.n	80171d8 <scalbn+0x78>
 801722c:	f3af 8000 	nop.w
 8017230:	c2f8f359 	.word	0xc2f8f359
 8017234:	01a56e1f 	.word	0x01a56e1f
 8017238:	8800759c 	.word	0x8800759c
 801723c:	7e37e43c 	.word	0x7e37e43c
 8017240:	8800759c 	.word	0x8800759c
 8017244:	fe37e43c 	.word	0xfe37e43c
 8017248:	c2f8f359 	.word	0xc2f8f359
 801724c:	81a56e1f 	.word	0x81a56e1f
 8017250:	43500000 	.word	0x43500000
 8017254:	ffff3cb0 	.word	0xffff3cb0
 8017258:	3c900000 	.word	0x3c900000
 801725c:	00000000 	.word	0x00000000

08017260 <floor>:
 8017260:	ec51 0b10 	vmov	r0, r1, d0
 8017264:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801726c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8017270:	2e13      	cmp	r6, #19
 8017272:	ee10 5a10 	vmov	r5, s0
 8017276:	ee10 8a10 	vmov	r8, s0
 801727a:	460c      	mov	r4, r1
 801727c:	dc31      	bgt.n	80172e2 <floor+0x82>
 801727e:	2e00      	cmp	r6, #0
 8017280:	da14      	bge.n	80172ac <floor+0x4c>
 8017282:	a333      	add	r3, pc, #204	; (adr r3, 8017350 <floor+0xf0>)
 8017284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017288:	f7e8 ffb8 	bl	80001fc <__adddf3>
 801728c:	2200      	movs	r2, #0
 801728e:	2300      	movs	r3, #0
 8017290:	f7e9 fbfa 	bl	8000a88 <__aeabi_dcmpgt>
 8017294:	b138      	cbz	r0, 80172a6 <floor+0x46>
 8017296:	2c00      	cmp	r4, #0
 8017298:	da53      	bge.n	8017342 <floor+0xe2>
 801729a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801729e:	4325      	orrs	r5, r4
 80172a0:	d052      	beq.n	8017348 <floor+0xe8>
 80172a2:	4c2d      	ldr	r4, [pc, #180]	; (8017358 <floor+0xf8>)
 80172a4:	2500      	movs	r5, #0
 80172a6:	4621      	mov	r1, r4
 80172a8:	4628      	mov	r0, r5
 80172aa:	e024      	b.n	80172f6 <floor+0x96>
 80172ac:	4f2b      	ldr	r7, [pc, #172]	; (801735c <floor+0xfc>)
 80172ae:	4137      	asrs	r7, r6
 80172b0:	ea01 0307 	and.w	r3, r1, r7
 80172b4:	4303      	orrs	r3, r0
 80172b6:	d01e      	beq.n	80172f6 <floor+0x96>
 80172b8:	a325      	add	r3, pc, #148	; (adr r3, 8017350 <floor+0xf0>)
 80172ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172be:	f7e8 ff9d 	bl	80001fc <__adddf3>
 80172c2:	2200      	movs	r2, #0
 80172c4:	2300      	movs	r3, #0
 80172c6:	f7e9 fbdf 	bl	8000a88 <__aeabi_dcmpgt>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	d0eb      	beq.n	80172a6 <floor+0x46>
 80172ce:	2c00      	cmp	r4, #0
 80172d0:	bfbe      	ittt	lt
 80172d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80172d6:	4133      	asrlt	r3, r6
 80172d8:	18e4      	addlt	r4, r4, r3
 80172da:	ea24 0407 	bic.w	r4, r4, r7
 80172de:	2500      	movs	r5, #0
 80172e0:	e7e1      	b.n	80172a6 <floor+0x46>
 80172e2:	2e33      	cmp	r6, #51	; 0x33
 80172e4:	dd0b      	ble.n	80172fe <floor+0x9e>
 80172e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80172ea:	d104      	bne.n	80172f6 <floor+0x96>
 80172ec:	ee10 2a10 	vmov	r2, s0
 80172f0:	460b      	mov	r3, r1
 80172f2:	f7e8 ff83 	bl	80001fc <__adddf3>
 80172f6:	ec41 0b10 	vmov	d0, r0, r1
 80172fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172fe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8017302:	f04f 37ff 	mov.w	r7, #4294967295
 8017306:	40df      	lsrs	r7, r3
 8017308:	4238      	tst	r0, r7
 801730a:	d0f4      	beq.n	80172f6 <floor+0x96>
 801730c:	a310      	add	r3, pc, #64	; (adr r3, 8017350 <floor+0xf0>)
 801730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017312:	f7e8 ff73 	bl	80001fc <__adddf3>
 8017316:	2200      	movs	r2, #0
 8017318:	2300      	movs	r3, #0
 801731a:	f7e9 fbb5 	bl	8000a88 <__aeabi_dcmpgt>
 801731e:	2800      	cmp	r0, #0
 8017320:	d0c1      	beq.n	80172a6 <floor+0x46>
 8017322:	2c00      	cmp	r4, #0
 8017324:	da0a      	bge.n	801733c <floor+0xdc>
 8017326:	2e14      	cmp	r6, #20
 8017328:	d101      	bne.n	801732e <floor+0xce>
 801732a:	3401      	adds	r4, #1
 801732c:	e006      	b.n	801733c <floor+0xdc>
 801732e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017332:	2301      	movs	r3, #1
 8017334:	40b3      	lsls	r3, r6
 8017336:	441d      	add	r5, r3
 8017338:	45a8      	cmp	r8, r5
 801733a:	d8f6      	bhi.n	801732a <floor+0xca>
 801733c:	ea25 0507 	bic.w	r5, r5, r7
 8017340:	e7b1      	b.n	80172a6 <floor+0x46>
 8017342:	2500      	movs	r5, #0
 8017344:	462c      	mov	r4, r5
 8017346:	e7ae      	b.n	80172a6 <floor+0x46>
 8017348:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801734c:	e7ab      	b.n	80172a6 <floor+0x46>
 801734e:	bf00      	nop
 8017350:	8800759c 	.word	0x8800759c
 8017354:	7e37e43c 	.word	0x7e37e43c
 8017358:	bff00000 	.word	0xbff00000
 801735c:	000fffff 	.word	0x000fffff

08017360 <__errno>:
 8017360:	4b01      	ldr	r3, [pc, #4]	; (8017368 <__errno+0x8>)
 8017362:	6818      	ldr	r0, [r3, #0]
 8017364:	4770      	bx	lr
 8017366:	bf00      	nop
 8017368:	2000017c 	.word	0x2000017c

0801736c <_init>:
 801736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801736e:	bf00      	nop
 8017370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017372:	bc08      	pop	{r3}
 8017374:	469e      	mov	lr, r3
 8017376:	4770      	bx	lr

08017378 <_fini>:
 8017378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801737a:	bf00      	nop
 801737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801737e:	bc08      	pop	{r3}
 8017380:	469e      	mov	lr, r3
 8017382:	4770      	bx	lr
